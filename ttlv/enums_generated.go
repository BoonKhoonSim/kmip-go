// Code generated by kmipgen; DO NOT EDIT.
package ttlv

import (
	"fmt"
	"sort"
	"strings"
)

const (
	TagNone                                  Tag = 0x000000
	TagActivationDate                        Tag = 0x420001
	TagApplicationData                       Tag = 0x420002
	TagApplicationNamespace                  Tag = 0x420003
	TagApplicationSpecificInformation        Tag = 0x420004
	TagArchiveDate                           Tag = 0x420005
	TagAsynchronousCorrelationValue          Tag = 0x420006
	TagAsynchronousIndicator                 Tag = 0x420007
	TagAttribute                             Tag = 0x420008
	TagAttributeIndex                        Tag = 0x420009
	TagAttributeName                         Tag = 0x42000a
	TagAttributeValue                        Tag = 0x42000b
	TagAuthentication                        Tag = 0x42000c
	TagBatchCount                            Tag = 0x42000d
	TagBatchErrorContinuationOption          Tag = 0x42000e
	TagBatchItem                             Tag = 0x42000f
	TagBatchOrderOption                      Tag = 0x420010
	TagBlockCipherMode                       Tag = 0x420011
	TagCancellationResult                    Tag = 0x420012
	TagCertificate                           Tag = 0x420013
	TagCertificateIdentifier                 Tag = 0x420014
	TagCertificateIssuer                     Tag = 0x420015
	TagCertificateIssuerAlternativeName      Tag = 0x420016
	TagCertificateIssuerDistinguishedName    Tag = 0x420017
	TagCertificateRequest                    Tag = 0x420018
	TagCertificateRequestType                Tag = 0x420019
	TagCertificateSubject                    Tag = 0x42001a
	TagCertificateSubjectAlternativeName     Tag = 0x42001b
	TagCertificateSubjectDistinguishedName   Tag = 0x42001c
	TagCertificateType                       Tag = 0x42001d
	TagCertificateValue                      Tag = 0x42001e
	TagCommonTemplateAttribute               Tag = 0x42001f
	TagCompromiseDate                        Tag = 0x420020
	TagCompromiseOccurrenceDate              Tag = 0x420021
	TagContactInformation                    Tag = 0x420022
	TagCredential                            Tag = 0x420023
	TagCredentialType                        Tag = 0x420024
	TagCredentialValue                       Tag = 0x420025
	TagCriticalityIndicator                  Tag = 0x420026
	TagCRTCoefficient                        Tag = 0x420027
	TagCryptographicAlgorithm                Tag = 0x420028
	TagCryptographicDomainParameters         Tag = 0x420029
	TagCryptographicLength                   Tag = 0x42002a
	TagCryptographicParameters               Tag = 0x42002b
	TagCryptographicUsageMask                Tag = 0x42002c
	TagCustomAttribute                       Tag = 0x42002d
	TagD                                     Tag = 0x42002e
	TagDeactivationDate                      Tag = 0x42002f
	TagDerivationData                        Tag = 0x420030
	TagDerivationMethod                      Tag = 0x420031
	TagDerivationParameters                  Tag = 0x420032
	TagDestroyDate                           Tag = 0x420033
	TagDigest                                Tag = 0x420034
	TagDigestValue                           Tag = 0x420035
	TagEncryptionKeyInformation              Tag = 0x420036
	TagG                                     Tag = 0x420037
	TagHashingAlgorithm                      Tag = 0x420038
	TagInitialDate                           Tag = 0x420039
	TagInitializationVector                  Tag = 0x42003a
	TagIssuer                                Tag = 0x42003b
	TagIterationCount                        Tag = 0x42003c
	TagIVCounterNonce                        Tag = 0x42003d
	TagJ                                     Tag = 0x42003e
	TagKey                                   Tag = 0x42003f
	TagKeyBlock                              Tag = 0x420040
	TagKeyCompressionType                    Tag = 0x420041
	TagKeyFormatType                         Tag = 0x420042
	TagKeyMaterial                           Tag = 0x420043
	TagKeyPartIdentifier                     Tag = 0x420044
	TagKeyValue                              Tag = 0x420045
	TagKeyWrappingData                       Tag = 0x420046
	TagKeyWrappingSpecification              Tag = 0x420047
	TagLastChangeDate                        Tag = 0x420048
	TagLeaseTime                             Tag = 0x420049
	TagLink                                  Tag = 0x42004a
	TagLinkType                              Tag = 0x42004b
	TagLinkedObjectIdentifier                Tag = 0x42004c
	TagMACSignature                          Tag = 0x42004d
	TagMACSignatureKeyInformation            Tag = 0x42004e
	TagMaximumItems                          Tag = 0x42004f
	TagMaximumResponseSize                   Tag = 0x420050
	TagMessageExtension                      Tag = 0x420051
	TagModulus                               Tag = 0x420052
	TagName                                  Tag = 0x420053
	TagNameType                              Tag = 0x420054
	TagNameValue                             Tag = 0x420055
	TagObjectGroup                           Tag = 0x420056
	TagObjectType                            Tag = 0x420057
	TagOffset                                Tag = 0x420058
	TagOpaqueDataType                        Tag = 0x420059
	TagOpaqueDataValue                       Tag = 0x42005a
	TagOpaqueObject                          Tag = 0x42005b
	TagOperation                             Tag = 0x42005c
	TagOperationPolicyName                   Tag = 0x42005d
	TagP                                     Tag = 0x42005e
	TagPaddingMethod                         Tag = 0x42005f
	TagPrimeExponentP                        Tag = 0x420060
	TagPrimeExponentQ                        Tag = 0x420061
	TagPrimeFieldSize                        Tag = 0x420062
	TagPrivateExponent                       Tag = 0x420063
	TagPrivateKey                            Tag = 0x420064
	TagPrivateKeyTemplateAttribute           Tag = 0x420065
	TagPrivateKeyUniqueIdentifier            Tag = 0x420066
	TagProcessStartDate                      Tag = 0x420067
	TagProtectStopDate                       Tag = 0x420068
	TagProtocolVersion                       Tag = 0x420069
	TagProtocolVersionMajor                  Tag = 0x42006a
	TagProtocolVersionMinor                  Tag = 0x42006b
	TagPublicExponent                        Tag = 0x42006c
	TagPublicKey                             Tag = 0x42006d
	TagPublicKeyTemplateAttribute            Tag = 0x42006e
	TagPublicKeyUniqueIdentifier             Tag = 0x42006f
	TagPutFunction                           Tag = 0x420070
	TagQ                                     Tag = 0x420071
	TagQString                               Tag = 0x420072
	TagQlength                               Tag = 0x420073
	TagQueryFunction                         Tag = 0x420074
	TagRecommendedCurve                      Tag = 0x420075
	TagReplacedUniqueIdentifier              Tag = 0x420076
	TagRequestHeader                         Tag = 0x420077
	TagRequestMessage                        Tag = 0x420078
	TagRequestPayload                        Tag = 0x420079
	TagResponseHeader                        Tag = 0x42007a
	TagResponseMessage                       Tag = 0x42007b
	TagResponsePayload                       Tag = 0x42007c
	TagResultMessage                         Tag = 0x42007d
	TagResultReason                          Tag = 0x42007e
	TagResultStatus                          Tag = 0x42007f
	TagRevocationMessage                     Tag = 0x420080
	TagRevocationReason                      Tag = 0x420081
	TagRevocationReasonCode                  Tag = 0x420082
	TagKeyRoleType                           Tag = 0x420083
	TagSalt                                  Tag = 0x420084
	TagSecretData                            Tag = 0x420085
	TagSecretDataType                        Tag = 0x420086
	TagSerialNumber                          Tag = 0x420087
	TagServerInformation                     Tag = 0x420088
	TagSplitKey                              Tag = 0x420089
	TagSplitKeyMethod                        Tag = 0x42008a
	TagSplitKeyParts                         Tag = 0x42008b
	TagSplitKeyThreshold                     Tag = 0x42008c
	TagState                                 Tag = 0x42008d
	TagStorageStatusMask                     Tag = 0x42008e
	TagSymmetricKey                          Tag = 0x42008f
	TagTemplate                              Tag = 0x420090
	TagTemplateAttribute                     Tag = 0x420091
	TagTimeStamp                             Tag = 0x420092
	TagUniqueBatchItemID                     Tag = 0x420093
	TagUniqueIdentifier                      Tag = 0x420094
	TagUsageLimits                           Tag = 0x420095
	TagUsageLimitsCount                      Tag = 0x420096
	TagUsageLimitsTotal                      Tag = 0x420097
	TagUsageLimitsUnit                       Tag = 0x420098
	TagUsername                              Tag = 0x420099
	TagValidityDate                          Tag = 0x42009a
	TagValidityIndicator                     Tag = 0x42009b
	TagVendorExtension                       Tag = 0x42009c
	TagVendorIdentification                  Tag = 0x42009d
	TagWrappingMethod                        Tag = 0x42009e
	TagX                                     Tag = 0x42009f
	TagY                                     Tag = 0x4200a0
	TagPassword                              Tag = 0x4200a1
	TagDeviceIdentifier                      Tag = 0x4200a2
	TagEncodingOption                        Tag = 0x4200a3
	TagExtensionInformation                  Tag = 0x4200a4
	TagExtensionName                         Tag = 0x4200a5
	TagExtensionTag                          Tag = 0x4200a6
	TagExtensionType                         Tag = 0x4200a7
	TagFresh                                 Tag = 0x4200a8
	TagMachineIdentifier                     Tag = 0x4200a9
	TagMediaIdentifier                       Tag = 0x4200aa
	TagNetworkIdentifier                     Tag = 0x4200ab
	TagObjectGroupMember                     Tag = 0x4200ac
	TagCertificateLength                     Tag = 0x4200ad
	TagDigitalSignatureAlgorithm             Tag = 0x4200ae
	TagCertificateSerialNumber               Tag = 0x4200af
	TagDeviceSerialNumber                    Tag = 0x4200b0
	TagIssuerAlternativeName                 Tag = 0x4200b1
	TagIssuerDistinguishedName               Tag = 0x4200b2
	TagSubjectAlternativeName                Tag = 0x4200b3
	TagSubjectDistinguishedName              Tag = 0x4200b4
	TagX_509CertificateIdentifier            Tag = 0x4200b5
	TagX_509CertificateIssuer                Tag = 0x4200b6
	TagX_509CertificateSubject               Tag = 0x4200b7
	TagKeyValueLocation                      Tag = 0x4200b8
	TagKeyValueLocationValue                 Tag = 0x4200b9
	TagKeyValueLocationType                  Tag = 0x4200ba
	TagKeyValuePresent                       Tag = 0x4200bb
	TagOriginalCreationDate                  Tag = 0x4200bc
	TagPGPKey                                Tag = 0x4200bd
	TagPGPKeyVersion                         Tag = 0x4200be
	TagAlternativeName                       Tag = 0x4200bf
	TagAlternativeNameValue                  Tag = 0x4200c0
	TagAlternativeNameType                   Tag = 0x4200c1
	TagData                                  Tag = 0x4200c2
	TagSignatureData                         Tag = 0x4200c3
	TagDataLength                            Tag = 0x4200c4
	TagRandomIV                              Tag = 0x4200c5
	TagMACData                               Tag = 0x4200c6
	TagAttestationType                       Tag = 0x4200c7
	TagNonce                                 Tag = 0x4200c8
	TagNonceID                               Tag = 0x4200c9
	TagNonceValue                            Tag = 0x4200ca
	TagAttestationMeasurement                Tag = 0x4200cb
	TagAttestationAssertion                  Tag = 0x4200cc
	TagIVLength                              Tag = 0x4200cd
	TagTagLength                             Tag = 0x4200ce
	TagFixedFieldLength                      Tag = 0x4200cf
	TagCounterLength                         Tag = 0x4200d0
	TagInitialCounterValue                   Tag = 0x4200d1
	TagInvocationFieldLength                 Tag = 0x4200d2
	TagAttestationCapableIndicator           Tag = 0x4200d3
	TagOffsetItems                           Tag = 0x4200d4
	TagLocatedItems                          Tag = 0x4200d5
	TagCorrelationValue                      Tag = 0x4200d6
	TagInitIndicator                         Tag = 0x4200d7
	TagFinalIndicator                        Tag = 0x4200d8
	TagRNGParameters                         Tag = 0x4200d9
	TagRNGAlgorithm                          Tag = 0x4200da
	TagDRBGAlgorithm                         Tag = 0x4200db
	TagFIPS186Variation                      Tag = 0x4200dc
	TagPredictionResistance                  Tag = 0x4200dd
	TagRandomNumberGenerator                 Tag = 0x4200de
	TagValidationInformation                 Tag = 0x4200df
	TagValidationAuthorityType               Tag = 0x4200e0
	TagValidationAuthorityCountry            Tag = 0x4200e1
	TagValidationAuthorityURI                Tag = 0x4200e2
	TagValidationVersionMajor                Tag = 0x4200e3
	TagValidationVersionMinor                Tag = 0x4200e4
	TagValidationType                        Tag = 0x4200e5
	TagValidationLevel                       Tag = 0x4200e6
	TagValidationCertificateIdentifier       Tag = 0x4200e7
	TagValidationCertificateURI              Tag = 0x4200e8
	TagValidationVendorURI                   Tag = 0x4200e9
	TagValidationProfile                     Tag = 0x4200ea
	TagProfileInformation                    Tag = 0x4200eb
	TagProfileName                           Tag = 0x4200ec
	TagServerURI                             Tag = 0x4200ed
	TagServerPort                            Tag = 0x4200ee
	TagStreamingCapability                   Tag = 0x4200ef
	TagAsynchronousCapability                Tag = 0x4200f0
	TagAttestationCapability                 Tag = 0x4200f1
	TagUnwrapMode                            Tag = 0x4200f2
	TagDestroyAction                         Tag = 0x4200f3
	TagShreddingAlgorithm                    Tag = 0x4200f4
	TagRNGMode                               Tag = 0x4200f5
	TagClientRegistrationMethod              Tag = 0x4200f6
	TagCapabilityInformation                 Tag = 0x4200f7
	TagKeyWrapType                           Tag = 0x4200f8
	TagBatchUndoCapability                   Tag = 0x4200f9
	TagBatchContinueCapability               Tag = 0x4200fa
	TagPKCS_12FriendlyName                   Tag = 0x4200fb
	TagDescription                           Tag = 0x4200fc
	TagComment                               Tag = 0x4200fd
	TagAuthenticatedEncryptionAdditionalData Tag = 0x4200fe
	TagAuthenticatedEncryptionTag            Tag = 0x4200ff
	TagSaltLength                            Tag = 0x420100
	TagMaskGenerator                         Tag = 0x420101
	TagMaskGeneratorHashingAlgorithm         Tag = 0x420102
	TagPSource                               Tag = 0x420103
	TagTrailerField                          Tag = 0x420104
	TagClientCorrelationValue                Tag = 0x420105
	TagServerCorrelationValue                Tag = 0x420106
	TagDigestedData                          Tag = 0x420107
	TagCertificateSubjectCN                  Tag = 0x420108
	TagCertificateSubjectO                   Tag = 0x420109
	TagCertificateSubjectOU                  Tag = 0x42010a
	TagCertificateSubjectEmail               Tag = 0x42010b
	TagCertificateSubjectC                   Tag = 0x42010c
	TagCertificateSubjectST                  Tag = 0x42010d
	TagCertificateSubjectL                   Tag = 0x42010e
	TagCertificateSubjectUID                 Tag = 0x42010f
	TagCertificateSubjectSerialNumber        Tag = 0x420110
	TagCertificateSubjectTitle               Tag = 0x420111
	TagCertificateSubjectDC                  Tag = 0x420112
	TagCertificateSubjectDNQualifier         Tag = 0x420113
	TagCertificateIssuerCN                   Tag = 0x420114
	TagCertificateIssuerO                    Tag = 0x420115
	TagCertificateIssuerOU                   Tag = 0x420116
	TagCertificateIssuerEmail                Tag = 0x420117
	TagCertificateIssuerC                    Tag = 0x420118
	TagCertificateIssuerST                   Tag = 0x420119
	TagCertificateIssuerL                    Tag = 0x42011a
	TagCertificateIssuerUID                  Tag = 0x42011b
	TagCertificateIssuerSerialNumber         Tag = 0x42011c
	TagCertificateIssuerTitle                Tag = 0x42011d
	TagCertificateIssuerDC                   Tag = 0x42011e
	TagCertificateIssuerDNQualifier          Tag = 0x42011f
	TagSensitive                             Tag = 0x420120
	TagAlwaysSensitive                       Tag = 0x420121
	TagExtractable                           Tag = 0x420122
	TagNeverExtractable                      Tag = 0x420123
	TagReplaceExisting                       Tag = 0x420124
)

func init() {
	RegisterTag(Tag(0x000000), "None")
	RegisterTag(Tag(0x420001), "Activation Date")
	RegisterTag(Tag(0x420002), "Application Data")
	RegisterTag(Tag(0x420003), "Application Namespace")
	RegisterTag(Tag(0x420004), "Application Specific Information")
	RegisterTag(Tag(0x420005), "Archive Date")
	RegisterTag(Tag(0x420006), "Asynchronous Correlation Value")
	RegisterTag(Tag(0x420007), "Asynchronous Indicator")
	RegisterTag(Tag(0x420008), "Attribute")
	RegisterTag(Tag(0x420009), "Attribute Index")
	RegisterTag(Tag(0x42000a), "Attribute Name")
	RegisterTag(Tag(0x42000b), "Attribute Value")
	RegisterTag(Tag(0x42000c), "Authentication")
	RegisterTag(Tag(0x42000d), "Batch Count")
	RegisterTag(Tag(0x42000e), "Batch Error Continuation Option")
	RegisterTag(Tag(0x42000f), "Batch Item")
	RegisterTag(Tag(0x420010), "Batch Order Option")
	RegisterTag(Tag(0x420011), "Block Cipher Mode")
	RegisterTag(Tag(0x420012), "Cancellation Result")
	RegisterTag(Tag(0x420013), "Certificate")
	RegisterTag(Tag(0x420014), "Certificate Identifier")
	RegisterTag(Tag(0x420015), "Certificate Issuer")
	RegisterTag(Tag(0x420016), "Certificate Issuer Alternative Name")
	RegisterTag(Tag(0x420017), "Certificate Issuer Distinguished Name")
	RegisterTag(Tag(0x420018), "Certificate Request")
	RegisterTag(Tag(0x420019), "Certificate Request Type")
	RegisterTag(Tag(0x42001a), "Certificate Subject")
	RegisterTag(Tag(0x42001b), "Certificate Subject Alternative Name")
	RegisterTag(Tag(0x42001c), "Certificate Subject Distinguished Name")
	RegisterTag(Tag(0x42001d), "Certificate Type")
	RegisterTag(Tag(0x42001e), "Certificate Value")
	RegisterTag(Tag(0x42001f), "Common Template-Attribute")
	RegisterTag(Tag(0x420020), "Compromise  Date")
	RegisterTag(Tag(0x420021), "Compromise Occurrence Date")
	RegisterTag(Tag(0x420022), "Contact Information")
	RegisterTag(Tag(0x420023), "Credential")
	RegisterTag(Tag(0x420024), "Credential Type")
	RegisterTag(Tag(0x420025), "Credential Value")
	RegisterTag(Tag(0x420026), "Criticality Indicator")
	RegisterTag(Tag(0x420027), "CRT Coefficient")
	RegisterTag(Tag(0x420028), "Cryptographic Algorithm")
	RegisterTag(Tag(0x420029), "Cryptographic Domain Parameters")
	RegisterTag(Tag(0x42002a), "Cryptographic Length")
	RegisterTag(Tag(0x42002b), "Cryptographic Parameters")
	RegisterTag(Tag(0x42002c), "Cryptographic Usage Mask")
	RegisterTag(Tag(0x42002d), "Custom Attribute")
	RegisterTag(Tag(0x42002e), "D")
	RegisterTag(Tag(0x42002f), "Deactivation Date")
	RegisterTag(Tag(0x420030), "Derivation Data")
	RegisterTag(Tag(0x420031), "Derivation Method")
	RegisterTag(Tag(0x420032), "Derivation Parameters")
	RegisterTag(Tag(0x420033), "Destroy Date")
	RegisterTag(Tag(0x420034), "Digest")
	RegisterTag(Tag(0x420035), "Digest Value")
	RegisterTag(Tag(0x420036), "Encryption Key Information")
	RegisterTag(Tag(0x420037), "G")
	RegisterTag(Tag(0x420038), "Hashing Algorithm")
	RegisterTag(Tag(0x420039), "Initial Date")
	RegisterTag(Tag(0x42003a), "Initialization Vector")
	RegisterTag(Tag(0x42003b), "Issuer")
	RegisterTag(Tag(0x42003c), "Iteration Count")
	RegisterTag(Tag(0x42003d), "IV/Counter/Nonce")
	RegisterTag(Tag(0x42003e), "J")
	RegisterTag(Tag(0x42003f), "Key")
	RegisterTag(Tag(0x420040), "Key Block")
	RegisterTag(Tag(0x420041), "Key Compression Type")
	RegisterTag(Tag(0x420042), "Key Format Type")
	RegisterTag(Tag(0x420043), "Key Material")
	RegisterTag(Tag(0x420044), "Key Part Identifier")
	RegisterTag(Tag(0x420045), "Key Value")
	RegisterTag(Tag(0x420046), "Key Wrapping Data")
	RegisterTag(Tag(0x420047), "Key Wrapping Specification")
	RegisterTag(Tag(0x420048), "Last Change Date")
	RegisterTag(Tag(0x420049), "Lease Time")
	RegisterTag(Tag(0x42004a), "Link")
	RegisterTag(Tag(0x42004b), "Link Type")
	RegisterTag(Tag(0x42004c), "Linked Object Identifier")
	RegisterTag(Tag(0x42004d), "MAC/Signature")
	RegisterTag(Tag(0x42004e), "MAC/Signature Key Information")
	RegisterTag(Tag(0x42004f), "Maximum Items")
	RegisterTag(Tag(0x420050), "Maximum Response Size")
	RegisterTag(Tag(0x420051), "Message Extension")
	RegisterTag(Tag(0x420052), "Modulus")
	RegisterTag(Tag(0x420053), "Name")
	RegisterTag(Tag(0x420054), "Name Type")
	RegisterTag(Tag(0x420055), "Name Value")
	RegisterTag(Tag(0x420056), "Object Group")
	RegisterTag(Tag(0x420057), "Object Type")
	RegisterTag(Tag(0x420058), "Offset")
	RegisterTag(Tag(0x420059), "Opaque Data Type")
	RegisterTag(Tag(0x42005a), "Opaque Data Value")
	RegisterTag(Tag(0x42005b), "Opaque Object")
	RegisterTag(Tag(0x42005c), "Operation")
	RegisterTag(Tag(0x42005d), "Operation Policy Name")
	RegisterTag(Tag(0x42005e), "P")
	RegisterTag(Tag(0x42005f), "Padding Method")
	RegisterTag(Tag(0x420060), "Prime Exponent P")
	RegisterTag(Tag(0x420061), "Prime Exponent Q")
	RegisterTag(Tag(0x420062), "Prime Field Size")
	RegisterTag(Tag(0x420063), "Private Exponent")
	RegisterTag(Tag(0x420064), "Private Key")
	RegisterTag(Tag(0x420065), "Private Key Template-Attribute")
	RegisterTag(Tag(0x420066), "Private Key Unique Identifier")
	RegisterTag(Tag(0x420067), "Process Start Date")
	RegisterTag(Tag(0x420068), "Protect Stop Date")
	RegisterTag(Tag(0x420069), "Protocol Version")
	RegisterTag(Tag(0x42006a), "Protocol Version Major")
	RegisterTag(Tag(0x42006b), "Protocol Version Minor")
	RegisterTag(Tag(0x42006c), "Public Exponent")
	RegisterTag(Tag(0x42006d), "Public Key")
	RegisterTag(Tag(0x42006e), "Public Key Template-Attribute")
	RegisterTag(Tag(0x42006f), "Public Key Unique Identifier")
	RegisterTag(Tag(0x420070), "Put Function")
	RegisterTag(Tag(0x420071), "Q")
	RegisterTag(Tag(0x420072), "Q String")
	RegisterTag(Tag(0x420073), "Qlength")
	RegisterTag(Tag(0x420074), "Query Function")
	RegisterTag(Tag(0x420075), "Recommended Curve")
	RegisterTag(Tag(0x420076), "Replaced Unique Identifier")
	RegisterTag(Tag(0x420077), "Request Header")
	RegisterTag(Tag(0x420078), "Request Message")
	RegisterTag(Tag(0x420079), "Request Payload")
	RegisterTag(Tag(0x42007a), "Response Header")
	RegisterTag(Tag(0x42007b), "Response Message")
	RegisterTag(Tag(0x42007c), "Response Payload")
	RegisterTag(Tag(0x42007d), "Result Message")
	RegisterTag(Tag(0x42007e), "Result Reason")
	RegisterTag(Tag(0x42007f), "Result Status")
	RegisterTag(Tag(0x420080), "Revocation Message")
	RegisterTag(Tag(0x420081), "Revocation Reason")
	RegisterTag(Tag(0x420082), "Revocation Reason Code")
	RegisterTag(Tag(0x420083), "Key Role Type")
	RegisterTag(Tag(0x420084), "Salt")
	RegisterTag(Tag(0x420085), "Secret Data")
	RegisterTag(Tag(0x420086), "Secret Data Type")
	RegisterTag(Tag(0x420087), "Serial Number")
	RegisterTag(Tag(0x420088), "Server Information")
	RegisterTag(Tag(0x420089), "Split Key")
	RegisterTag(Tag(0x42008a), "Split Key Method")
	RegisterTag(Tag(0x42008b), "Split Key Parts")
	RegisterTag(Tag(0x42008c), "Split Key Threshold")
	RegisterTag(Tag(0x42008d), "State")
	RegisterTag(Tag(0x42008e), "Storage Status Mask")
	RegisterTag(Tag(0x42008f), "Symmetric Key")
	RegisterTag(Tag(0x420090), "Template")
	RegisterTag(Tag(0x420091), "Template-Attribute")
	RegisterTag(Tag(0x420092), "Time Stamp")
	RegisterTag(Tag(0x420093), "Unique Batch Item ID")
	RegisterTag(Tag(0x420094), "Unique Identifier")
	RegisterTag(Tag(0x420095), "Usage Limits")
	RegisterTag(Tag(0x420096), "Usage Limits Count")
	RegisterTag(Tag(0x420097), "Usage Limits Total")
	RegisterTag(Tag(0x420098), "Usage Limits Unit")
	RegisterTag(Tag(0x420099), "Username")
	RegisterTag(Tag(0x42009a), "Validity Date")
	RegisterTag(Tag(0x42009b), "Validity Indicator")
	RegisterTag(Tag(0x42009c), "Vendor Extension")
	RegisterTag(Tag(0x42009d), "Vendor Identification")
	RegisterTag(Tag(0x42009e), "Wrapping Method")
	RegisterTag(Tag(0x42009f), "X")
	RegisterTag(Tag(0x4200a0), "Y")
	RegisterTag(Tag(0x4200a1), "Password")
	RegisterTag(Tag(0x4200a2), "Device Identifier")
	RegisterTag(Tag(0x4200a3), "Encoding Option")
	RegisterTag(Tag(0x4200a4), "Extension Information")
	RegisterTag(Tag(0x4200a5), "Extension Name")
	RegisterTag(Tag(0x4200a6), "Extension Tag")
	RegisterTag(Tag(0x4200a7), "Extension Type")
	RegisterTag(Tag(0x4200a8), "Fresh")
	RegisterTag(Tag(0x4200a9), "Machine Identifier")
	RegisterTag(Tag(0x4200aa), "Media Identifier")
	RegisterTag(Tag(0x4200ab), "Network Identifier")
	RegisterTag(Tag(0x4200ac), "Object Group Member")
	RegisterTag(Tag(0x4200ad), "Certificate Length")
	RegisterTag(Tag(0x4200ae), "Digital Signature Algorithm")
	RegisterTag(Tag(0x4200af), "Certificate Serial Number")
	RegisterTag(Tag(0x4200b0), "Device Serial Number")
	RegisterTag(Tag(0x4200b1), "Issuer Alternative Name")
	RegisterTag(Tag(0x4200b2), "Issuer Distinguished Name")
	RegisterTag(Tag(0x4200b3), "Subject Alternative Name")
	RegisterTag(Tag(0x4200b4), "Subject Distinguished Name")
	RegisterTag(Tag(0x4200b5), "X.509 Certificate Identifier")
	RegisterTag(Tag(0x4200b6), "X.509 Certificate Issuer")
	RegisterTag(Tag(0x4200b7), "X.509 Certificate Subject")
	RegisterTag(Tag(0x4200b8), "Key Value Location")
	RegisterTag(Tag(0x4200b9), "Key Value Location Value")
	RegisterTag(Tag(0x4200ba), "Key Value Location Type")
	RegisterTag(Tag(0x4200bb), "Key Value Present")
	RegisterTag(Tag(0x4200bc), "Original Creation Date")
	RegisterTag(Tag(0x4200bd), "PGP Key")
	RegisterTag(Tag(0x4200be), "PGP Key Version")
	RegisterTag(Tag(0x4200bf), "Alternative Name")
	RegisterTag(Tag(0x4200c0), "Alternative Name Value")
	RegisterTag(Tag(0x4200c1), "Alternative Name Type")
	RegisterTag(Tag(0x4200c2), "Data")
	RegisterTag(Tag(0x4200c3), "Signature Data")
	RegisterTag(Tag(0x4200c4), "Data Length")
	RegisterTag(Tag(0x4200c5), "Random IV")
	RegisterTag(Tag(0x4200c6), "MAC Data")
	RegisterTag(Tag(0x4200c7), "Attestation Type")
	RegisterTag(Tag(0x4200c8), "Nonce")
	RegisterTag(Tag(0x4200c9), "Nonce ID")
	RegisterTag(Tag(0x4200ca), "Nonce Value")
	RegisterTag(Tag(0x4200cb), "Attestation Measurement")
	RegisterTag(Tag(0x4200cc), "Attestation Assertion")
	RegisterTag(Tag(0x4200cd), "IV Length")
	RegisterTag(Tag(0x4200ce), "Tag Length")
	RegisterTag(Tag(0x4200cf), "Fixed Field Length")
	RegisterTag(Tag(0x4200d0), "Counter Length")
	RegisterTag(Tag(0x4200d1), "Initial Counter Value")
	RegisterTag(Tag(0x4200d2), "Invocation Field Length")
	RegisterTag(Tag(0x4200d3), "Attestation Capable Indicator")
	RegisterTag(Tag(0x4200d4), "Offset Items")
	RegisterTag(Tag(0x4200d5), "Located Items")
	RegisterTag(Tag(0x4200d6), "Correlation Value")
	RegisterTag(Tag(0x4200d7), "Init Indicator")
	RegisterTag(Tag(0x4200d8), "Final Indicator")
	RegisterTag(Tag(0x4200d9), "RNG Parameters")
	RegisterTag(Tag(0x4200da), "RNG Algorithm")
	RegisterTag(Tag(0x4200db), "DRBG Algorithm")
	RegisterTag(Tag(0x4200dc), "FIPS186 Variation")
	RegisterTag(Tag(0x4200dd), "Prediction Resistance")
	RegisterTag(Tag(0x4200de), "Random Number Generator")
	RegisterTag(Tag(0x4200df), "Validation Information")
	RegisterTag(Tag(0x4200e0), "Validation Authority Type")
	RegisterTag(Tag(0x4200e1), "Validation Authority Country")
	RegisterTag(Tag(0x4200e2), "Validation Authority URI")
	RegisterTag(Tag(0x4200e3), "Validation Version Major")
	RegisterTag(Tag(0x4200e4), "Validation Version Minor")
	RegisterTag(Tag(0x4200e5), "Validation Type")
	RegisterTag(Tag(0x4200e6), "Validation Level")
	RegisterTag(Tag(0x4200e7), "Validation Certificate Identifier")
	RegisterTag(Tag(0x4200e8), "Validation Certificate URI")
	RegisterTag(Tag(0x4200e9), "Validation Vendor URI")
	RegisterTag(Tag(0x4200ea), "Validation Profile")
	RegisterTag(Tag(0x4200eb), "Profile Information")
	RegisterTag(Tag(0x4200ec), "Profile Name")
	RegisterTag(Tag(0x4200ed), "Server URI")
	RegisterTag(Tag(0x4200ee), "Server Port")
	RegisterTag(Tag(0x4200ef), "Streaming Capability")
	RegisterTag(Tag(0x4200f0), "Asynchronous Capability")
	RegisterTag(Tag(0x4200f1), "Attestation Capability")
	RegisterTag(Tag(0x4200f2), "Unwrap Mode")
	RegisterTag(Tag(0x4200f3), "Destroy Action")
	RegisterTag(Tag(0x4200f4), "Shredding Algorithm")
	RegisterTag(Tag(0x4200f5), "RNG Mode")
	RegisterTag(Tag(0x4200f6), "Client Registration Method")
	RegisterTag(Tag(0x4200f7), "Capability Information")
	RegisterTag(Tag(0x4200f8), "Key Wrap Type")
	RegisterTag(Tag(0x4200f9), "Batch Undo Capability")
	RegisterTag(Tag(0x4200fa), "Batch Continue Capability")
	RegisterTag(Tag(0x4200fb), "PKCS#12 Friendly Name")
	RegisterTag(Tag(0x4200fc), "Description")
	RegisterTag(Tag(0x4200fd), "Comment")
	RegisterTag(Tag(0x4200fe), "Authenticated Encryption Additional Data")
	RegisterTag(Tag(0x4200ff), "Authenticated Encryption Tag")
	RegisterTag(Tag(0x420100), "Salt Length")
	RegisterTag(Tag(0x420101), "Mask Generator")
	RegisterTag(Tag(0x420102), "Mask Generator Hashing Algorithm")
	RegisterTag(Tag(0x420103), "P Source")
	RegisterTag(Tag(0x420104), "Trailer Field")
	RegisterTag(Tag(0x420105), "Client Correlation Value")
	RegisterTag(Tag(0x420106), "Server Correlation Value")
	RegisterTag(Tag(0x420107), "Digested Data")
	RegisterTag(Tag(0x420108), "Certificate Subject CN")
	RegisterTag(Tag(0x420109), "Certificate Subject O")
	RegisterTag(Tag(0x42010a), "Certificate Subject OU")
	RegisterTag(Tag(0x42010b), "Certificate Subject Email")
	RegisterTag(Tag(0x42010c), "Certificate Subject C")
	RegisterTag(Tag(0x42010d), "Certificate Subject ST")
	RegisterTag(Tag(0x42010e), "Certificate Subject L")
	RegisterTag(Tag(0x42010f), "Certificate Subject UID")
	RegisterTag(Tag(0x420110), "Certificate Subject Serial Number")
	RegisterTag(Tag(0x420111), "Certificate Subject Title")
	RegisterTag(Tag(0x420112), "Certificate Subject DC")
	RegisterTag(Tag(0x420113), "Certificate Subject DN Qualifier")
	RegisterTag(Tag(0x420114), "Certificate Issuer CN")
	RegisterTag(Tag(0x420115), "Certificate Issuer O")
	RegisterTag(Tag(0x420116), "Certificate Issuer OU")
	RegisterTag(Tag(0x420117), "Certificate Issuer Email")
	RegisterTag(Tag(0x420118), "Certificate Issuer C")
	RegisterTag(Tag(0x420119), "Certificate Issuer ST")
	RegisterTag(Tag(0x42011a), "Certificate Issuer L")
	RegisterTag(Tag(0x42011b), "Certificate Issuer UID")
	RegisterTag(Tag(0x42011c), "Certificate Issuer Serial Number")
	RegisterTag(Tag(0x42011d), "Certificate Issuer Title")
	RegisterTag(Tag(0x42011e), "Certificate Issuer DC")
	RegisterTag(Tag(0x42011f), "Certificate Issuer DN Qualifier")
	RegisterTag(Tag(0x420120), "Sensitive")
	RegisterTag(Tag(0x420121), "Always Sensitive")
	RegisterTag(Tag(0x420122), "Extractable")
	RegisterTag(Tag(0x420123), "Never Extractable")
	RegisterTag(Tag(0x420124), "Replace Existing")
}

// Credential Type Enumeration

// 9.1.3.2.1 Table 289
type CredentialType uint32

const (
	CredentialTypeUsernameAndPassword CredentialType = 0x00000001
	CredentialTypeDevice              CredentialType = 0x00000002
	CredentialTypeAttestation         CredentialType = 0x00000003
)

var _CredentialTypeNameToValueMap = map[string]CredentialType{
	"UsernameAndPassword": CredentialTypeUsernameAndPassword,
	"Device":              CredentialTypeDevice,
	"Attestation":         CredentialTypeAttestation,
}

var _CredentialTypeValueToNameMap = map[CredentialType]string{
	CredentialTypeUsernameAndPassword: "UsernameAndPassword",
	CredentialTypeDevice:              "Device",
	CredentialTypeAttestation:         "Attestation",
}

func (c CredentialType) MarshalText() (text []byte, err error) {
	return []byte(c.String()), nil
}

func init() {
	RegisterEnum(TagCredentialType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _CredentialTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return CredentialType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return CredentialType(v)
		},
	})
}

func (c CredentialType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(c))
	return nil
}

func RegisterCredentialType(c CredentialType, name string) {
	name = NormalizeName(name)
	_CredentialTypeNameToValueMap[name] = c
	_CredentialTypeValueToNameMap[c] = name
}

func (c CredentialType) String() string {
	if s, ok := _CredentialTypeValueToNameMap[c]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(c))
}

// Key Compression Type Enumeration

// 9.1.3.2.2 Table 290
type KeyCompressionType uint32

const (
	KeyCompressionTypeECPublicKeyTypeUncompressed         KeyCompressionType = 0x00000001
	KeyCompressionTypeECPublicKeyTypeX9_62CompressedPrime KeyCompressionType = 0x00000002
	KeyCompressionTypeECPublicKeyTypeX9_62CompressedChar2 KeyCompressionType = 0x00000003
	KeyCompressionTypeECPublicKeyTypeX9_62Hybrid          KeyCompressionType = 0x00000004
)

var _KeyCompressionTypeNameToValueMap = map[string]KeyCompressionType{
	"ECPublicKeyTypeUncompressed":         KeyCompressionTypeECPublicKeyTypeUncompressed,
	"ECPublicKeyTypeX9_62CompressedPrime": KeyCompressionTypeECPublicKeyTypeX9_62CompressedPrime,
	"ECPublicKeyTypeX9_62CompressedChar2": KeyCompressionTypeECPublicKeyTypeX9_62CompressedChar2,
	"ECPublicKeyTypeX9_62Hybrid":          KeyCompressionTypeECPublicKeyTypeX9_62Hybrid,
}

var _KeyCompressionTypeValueToNameMap = map[KeyCompressionType]string{
	KeyCompressionTypeECPublicKeyTypeUncompressed:         "ECPublicKeyTypeUncompressed",
	KeyCompressionTypeECPublicKeyTypeX9_62CompressedPrime: "ECPublicKeyTypeX9_62CompressedPrime",
	KeyCompressionTypeECPublicKeyTypeX9_62CompressedChar2: "ECPublicKeyTypeX9_62CompressedChar2",
	KeyCompressionTypeECPublicKeyTypeX9_62Hybrid:          "ECPublicKeyTypeX9_62Hybrid",
}

func (k KeyCompressionType) MarshalText() (text []byte, err error) {
	return []byte(k.String()), nil
}

func init() {
	RegisterEnum(TagKeyCompressionType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _KeyCompressionTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return KeyCompressionType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return KeyCompressionType(v)
		},
	})
}

func (k KeyCompressionType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(k))
	return nil
}

func RegisterKeyCompressionType(k KeyCompressionType, name string) {
	name = NormalizeName(name)
	_KeyCompressionTypeNameToValueMap[name] = k
	_KeyCompressionTypeValueToNameMap[k] = name
}

func (k KeyCompressionType) String() string {
	if s, ok := _KeyCompressionTypeValueToNameMap[k]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(k))
}

// Key Format Type Enumeration

// 9.1.3.2.3 Table 291
type KeyFormatType uint32

const (
	KeyFormatTypeRaw                        KeyFormatType = 0x00000001
	KeyFormatTypeOpaque                     KeyFormatType = 0x00000002
	KeyFormatTypePKCS_1                     KeyFormatType = 0x00000003
	KeyFormatTypePKCS_8                     KeyFormatType = 0x00000004
	KeyFormatTypeX_509                      KeyFormatType = 0x00000005
	KeyFormatTypeECPrivateKey               KeyFormatType = 0x00000006
	KeyFormatTypeTransparentSymmetricKey    KeyFormatType = 0x00000007
	KeyFormatTypeTransparentDSAPrivateKey   KeyFormatType = 0x00000008
	KeyFormatTypeTransparentDSAPublicKey    KeyFormatType = 0x00000009
	KeyFormatTypeTransparentRSAPrivateKey   KeyFormatType = 0x0000000a
	KeyFormatTypeTransparentRSAPublicKey    KeyFormatType = 0x0000000b
	KeyFormatTypeTransparentDHPrivateKey    KeyFormatType = 0x0000000c
	KeyFormatTypeTransparentDHPublicKey     KeyFormatType = 0x0000000d
	KeyFormatTypeTransparentECDSAPrivateKey KeyFormatType = 0x0000000e
	KeyFormatTypeTransparentECDSAPublicKey  KeyFormatType = 0x0000000f
	KeyFormatTypeTransparentECDHPrivateKey  KeyFormatType = 0x00000010
	KeyFormatTypeTransparentECDHPublicKey   KeyFormatType = 0x00000011
	KeyFormatTypeTransparentECMQVPrivateKey KeyFormatType = 0x00000012
	KeyFormatTypeTransparentECMQVPublicKey  KeyFormatType = 0x00000013
	KeyFormatTypeTransparentECPrivateKey    KeyFormatType = 0x00000014
	KeyFormatTypeTransparentECPublicKey     KeyFormatType = 0x00000015
	KeyFormatTypePKCS_12                    KeyFormatType = 0x00000016
)

var _KeyFormatTypeNameToValueMap = map[string]KeyFormatType{
	"Raw":                        KeyFormatTypeRaw,
	"Opaque":                     KeyFormatTypeOpaque,
	"PKCS_1":                     KeyFormatTypePKCS_1,
	"PKCS_8":                     KeyFormatTypePKCS_8,
	"X_509":                      KeyFormatTypeX_509,
	"ECPrivateKey":               KeyFormatTypeECPrivateKey,
	"TransparentSymmetricKey":    KeyFormatTypeTransparentSymmetricKey,
	"TransparentDSAPrivateKey":   KeyFormatTypeTransparentDSAPrivateKey,
	"TransparentDSAPublicKey":    KeyFormatTypeTransparentDSAPublicKey,
	"TransparentRSAPrivateKey":   KeyFormatTypeTransparentRSAPrivateKey,
	"TransparentRSAPublicKey":    KeyFormatTypeTransparentRSAPublicKey,
	"TransparentDHPrivateKey":    KeyFormatTypeTransparentDHPrivateKey,
	"TransparentDHPublicKey":     KeyFormatTypeTransparentDHPublicKey,
	"TransparentECDSAPrivateKey": KeyFormatTypeTransparentECDSAPrivateKey,
	"TransparentECDSAPublicKey":  KeyFormatTypeTransparentECDSAPublicKey,
	"TransparentECDHPrivateKey":  KeyFormatTypeTransparentECDHPrivateKey,
	"TransparentECDHPublicKey":   KeyFormatTypeTransparentECDHPublicKey,
	"TransparentECMQVPrivateKey": KeyFormatTypeTransparentECMQVPrivateKey,
	"TransparentECMQVPublicKey":  KeyFormatTypeTransparentECMQVPublicKey,
	"TransparentECPrivateKey":    KeyFormatTypeTransparentECPrivateKey,
	"TransparentECPublicKey":     KeyFormatTypeTransparentECPublicKey,
	"PKCS_12":                    KeyFormatTypePKCS_12,
}

var _KeyFormatTypeValueToNameMap = map[KeyFormatType]string{
	KeyFormatTypeRaw:                        "Raw",
	KeyFormatTypeOpaque:                     "Opaque",
	KeyFormatTypePKCS_1:                     "PKCS_1",
	KeyFormatTypePKCS_8:                     "PKCS_8",
	KeyFormatTypeX_509:                      "X_509",
	KeyFormatTypeECPrivateKey:               "ECPrivateKey",
	KeyFormatTypeTransparentSymmetricKey:    "TransparentSymmetricKey",
	KeyFormatTypeTransparentDSAPrivateKey:   "TransparentDSAPrivateKey",
	KeyFormatTypeTransparentDSAPublicKey:    "TransparentDSAPublicKey",
	KeyFormatTypeTransparentRSAPrivateKey:   "TransparentRSAPrivateKey",
	KeyFormatTypeTransparentRSAPublicKey:    "TransparentRSAPublicKey",
	KeyFormatTypeTransparentDHPrivateKey:    "TransparentDHPrivateKey",
	KeyFormatTypeTransparentDHPublicKey:     "TransparentDHPublicKey",
	KeyFormatTypeTransparentECDSAPrivateKey: "TransparentECDSAPrivateKey",
	KeyFormatTypeTransparentECDSAPublicKey:  "TransparentECDSAPublicKey",
	KeyFormatTypeTransparentECDHPrivateKey:  "TransparentECDHPrivateKey",
	KeyFormatTypeTransparentECDHPublicKey:   "TransparentECDHPublicKey",
	KeyFormatTypeTransparentECMQVPrivateKey: "TransparentECMQVPrivateKey",
	KeyFormatTypeTransparentECMQVPublicKey:  "TransparentECMQVPublicKey",
	KeyFormatTypeTransparentECPrivateKey:    "TransparentECPrivateKey",
	KeyFormatTypeTransparentECPublicKey:     "TransparentECPublicKey",
	KeyFormatTypePKCS_12:                    "PKCS_12",
}

func (k KeyFormatType) MarshalText() (text []byte, err error) {
	return []byte(k.String()), nil
}

func init() {
	RegisterEnum(TagKeyFormatType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _KeyFormatTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return KeyFormatType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return KeyFormatType(v)
		},
	})
}

func (k KeyFormatType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(k))
	return nil
}

func RegisterKeyFormatType(k KeyFormatType, name string) {
	name = NormalizeName(name)
	_KeyFormatTypeNameToValueMap[name] = k
	_KeyFormatTypeValueToNameMap[k] = name
}

func (k KeyFormatType) String() string {
	if s, ok := _KeyFormatTypeValueToNameMap[k]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(k))
}

// Wrapping Method Enumeration

// 9.1.3.2.4 Table 292
type WrappingMethod uint32

const (
	WrappingMethodEncrypt            WrappingMethod = 0x00000001
	WrappingMethodMACSign            WrappingMethod = 0x00000002
	WrappingMethodEncryptThenMACSign WrappingMethod = 0x00000003
	WrappingMethodMACSignThenEncrypt WrappingMethod = 0x00000004
	WrappingMethodTR_31              WrappingMethod = 0x00000005
)

var _WrappingMethodNameToValueMap = map[string]WrappingMethod{
	"Encrypt":            WrappingMethodEncrypt,
	"MACSign":            WrappingMethodMACSign,
	"EncryptThenMACSign": WrappingMethodEncryptThenMACSign,
	"MACSignThenEncrypt": WrappingMethodMACSignThenEncrypt,
	"TR_31":              WrappingMethodTR_31,
}

var _WrappingMethodValueToNameMap = map[WrappingMethod]string{
	WrappingMethodEncrypt:            "Encrypt",
	WrappingMethodMACSign:            "MACSign",
	WrappingMethodEncryptThenMACSign: "EncryptThenMACSign",
	WrappingMethodMACSignThenEncrypt: "MACSignThenEncrypt",
	WrappingMethodTR_31:              "TR_31",
}

func (w WrappingMethod) MarshalText() (text []byte, err error) {
	return []byte(w.String()), nil
}

func init() {
	RegisterEnum(TagWrappingMethod, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _WrappingMethodNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return WrappingMethod(v).String()
		},
		Typed: func(v uint32) interface{} {
			return WrappingMethod(v)
		},
	})
}

func (w WrappingMethod) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(w))
	return nil
}

func RegisterWrappingMethod(w WrappingMethod, name string) {
	name = NormalizeName(name)
	_WrappingMethodNameToValueMap[name] = w
	_WrappingMethodValueToNameMap[w] = name
}

func (w WrappingMethod) String() string {
	if s, ok := _WrappingMethodValueToNameMap[w]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(w))
}

// Recommended Curve Enumeration

// 9.1.3.2.5 Table 293
type RecommendedCurve uint32

const (
	RecommendedCurveP_192            RecommendedCurve = 0x00000001
	RecommendedCurveK_163            RecommendedCurve = 0x00000002
	RecommendedCurveB_163            RecommendedCurve = 0x00000003
	RecommendedCurveP_224            RecommendedCurve = 0x00000004
	RecommendedCurveK_233            RecommendedCurve = 0x00000005
	RecommendedCurveB_233            RecommendedCurve = 0x00000006
	RecommendedCurveP_256            RecommendedCurve = 0x00000007
	RecommendedCurveK_283            RecommendedCurve = 0x00000008
	RecommendedCurveB_283            RecommendedCurve = 0x00000009
	RecommendedCurveP_384            RecommendedCurve = 0x0000000a
	RecommendedCurveK_409            RecommendedCurve = 0x0000000b
	RecommendedCurveB_409            RecommendedCurve = 0x0000000c
	RecommendedCurveP_521            RecommendedCurve = 0x0000000d
	RecommendedCurveK_571            RecommendedCurve = 0x0000000e
	RecommendedCurveB_571            RecommendedCurve = 0x0000000f
	RecommendedCurveSECP112R1        RecommendedCurve = 0x00000010
	RecommendedCurveSECP112R2        RecommendedCurve = 0x00000011
	RecommendedCurveSECP128R1        RecommendedCurve = 0x00000012
	RecommendedCurveSECP128R2        RecommendedCurve = 0x00000013
	RecommendedCurveSECP160K1        RecommendedCurve = 0x00000014
	RecommendedCurveSECP160R1        RecommendedCurve = 0x00000015
	RecommendedCurveSECP160R2        RecommendedCurve = 0x00000016
	RecommendedCurveSECP192K1        RecommendedCurve = 0x00000017
	RecommendedCurveSECP224K1        RecommendedCurve = 0x00000018
	RecommendedCurveSECP256K1        RecommendedCurve = 0x00000019
	RecommendedCurveSECT113R1        RecommendedCurve = 0x0000001a
	RecommendedCurveSECT113R2        RecommendedCurve = 0x0000001b
	RecommendedCurveSECT131R1        RecommendedCurve = 0x0000001c
	RecommendedCurveSECT131R2        RecommendedCurve = 0x0000001d
	RecommendedCurveSECT163R1        RecommendedCurve = 0x0000001e
	RecommendedCurveSECT193R1        RecommendedCurve = 0x0000001f
	RecommendedCurveSECT193R2        RecommendedCurve = 0x00000020
	RecommendedCurveSECT239K1        RecommendedCurve = 0x00000021
	RecommendedCurveANSIX9P192V2     RecommendedCurve = 0x00000022
	RecommendedCurveANSIX9P192V3     RecommendedCurve = 0x00000023
	RecommendedCurveANSIX9P239V1     RecommendedCurve = 0x00000024
	RecommendedCurveANSIX9P239V2     RecommendedCurve = 0x00000025
	RecommendedCurveANSIX9P239V3     RecommendedCurve = 0x00000026
	RecommendedCurveANSIX9C2PNB163V1 RecommendedCurve = 0x00000027
	RecommendedCurveANSIX9C2PNB163V2 RecommendedCurve = 0x00000028
	RecommendedCurveANSIX9C2PNB163V3 RecommendedCurve = 0x00000029
	RecommendedCurveANSIX9C2PNB176V1 RecommendedCurve = 0x0000002a
	RecommendedCurveANSIX9C2TNB191V1 RecommendedCurve = 0x0000002b
	RecommendedCurveANSIX9C2TNB191V2 RecommendedCurve = 0x0000002c
	RecommendedCurveANSIX9C2TNB191V3 RecommendedCurve = 0x0000002d
	RecommendedCurveANSIX9C2PNB208W1 RecommendedCurve = 0x0000002e
	RecommendedCurveANSIX9C2TNB239V1 RecommendedCurve = 0x0000002f
	RecommendedCurveANSIX9C2TNB239V2 RecommendedCurve = 0x00000030
	RecommendedCurveANSIX9C2TNB239V3 RecommendedCurve = 0x00000031
	RecommendedCurveANSIX9C2PNB272W1 RecommendedCurve = 0x00000032
	RecommendedCurveANSIX9C2PNB304W1 RecommendedCurve = 0x00000033
	RecommendedCurveANSIX9C2TNB359V1 RecommendedCurve = 0x00000034
	RecommendedCurveANSIX9C2PNB368W1 RecommendedCurve = 0x00000035
	RecommendedCurveANSIX9C2TNB431R1 RecommendedCurve = 0x00000036
	RecommendedCurveBRAINPOOLP160R1  RecommendedCurve = 0x00000037
	RecommendedCurveBRAINPOOLP160T1  RecommendedCurve = 0x00000038
	RecommendedCurveBRAINPOOLP192R1  RecommendedCurve = 0x00000039
	RecommendedCurveBRAINPOOLP192T1  RecommendedCurve = 0x0000003a
	RecommendedCurveBRAINPOOLP224R1  RecommendedCurve = 0x0000003b
	RecommendedCurveBRAINPOOLP224T1  RecommendedCurve = 0x0000003c
	RecommendedCurveBRAINPOOLP256R1  RecommendedCurve = 0x0000003d
	RecommendedCurveBRAINPOOLP256T1  RecommendedCurve = 0x0000003e
	RecommendedCurveBRAINPOOLP320R1  RecommendedCurve = 0x0000003f
	RecommendedCurveBRAINPOOLP320T1  RecommendedCurve = 0x00000040
	RecommendedCurveBRAINPOOLP384R1  RecommendedCurve = 0x00000041
	RecommendedCurveBRAINPOOLP384T1  RecommendedCurve = 0x00000042
	RecommendedCurveBRAINPOOLP512R1  RecommendedCurve = 0x00000043
	RecommendedCurveBRAINPOOLP512T1  RecommendedCurve = 0x00000044
)

var _RecommendedCurveNameToValueMap = map[string]RecommendedCurve{
	"P_192":            RecommendedCurveP_192,
	"K_163":            RecommendedCurveK_163,
	"B_163":            RecommendedCurveB_163,
	"P_224":            RecommendedCurveP_224,
	"K_233":            RecommendedCurveK_233,
	"B_233":            RecommendedCurveB_233,
	"P_256":            RecommendedCurveP_256,
	"K_283":            RecommendedCurveK_283,
	"B_283":            RecommendedCurveB_283,
	"P_384":            RecommendedCurveP_384,
	"K_409":            RecommendedCurveK_409,
	"B_409":            RecommendedCurveB_409,
	"P_521":            RecommendedCurveP_521,
	"K_571":            RecommendedCurveK_571,
	"B_571":            RecommendedCurveB_571,
	"SECP112R1":        RecommendedCurveSECP112R1,
	"SECP112R2":        RecommendedCurveSECP112R2,
	"SECP128R1":        RecommendedCurveSECP128R1,
	"SECP128R2":        RecommendedCurveSECP128R2,
	"SECP160K1":        RecommendedCurveSECP160K1,
	"SECP160R1":        RecommendedCurveSECP160R1,
	"SECP160R2":        RecommendedCurveSECP160R2,
	"SECP192K1":        RecommendedCurveSECP192K1,
	"SECP224K1":        RecommendedCurveSECP224K1,
	"SECP256K1":        RecommendedCurveSECP256K1,
	"SECT113R1":        RecommendedCurveSECT113R1,
	"SECT113R2":        RecommendedCurveSECT113R2,
	"SECT131R1":        RecommendedCurveSECT131R1,
	"SECT131R2":        RecommendedCurveSECT131R2,
	"SECT163R1":        RecommendedCurveSECT163R1,
	"SECT193R1":        RecommendedCurveSECT193R1,
	"SECT193R2":        RecommendedCurveSECT193R2,
	"SECT239K1":        RecommendedCurveSECT239K1,
	"ANSIX9P192V2":     RecommendedCurveANSIX9P192V2,
	"ANSIX9P192V3":     RecommendedCurveANSIX9P192V3,
	"ANSIX9P239V1":     RecommendedCurveANSIX9P239V1,
	"ANSIX9P239V2":     RecommendedCurveANSIX9P239V2,
	"ANSIX9P239V3":     RecommendedCurveANSIX9P239V3,
	"ANSIX9C2PNB163V1": RecommendedCurveANSIX9C2PNB163V1,
	"ANSIX9C2PNB163V2": RecommendedCurveANSIX9C2PNB163V2,
	"ANSIX9C2PNB163V3": RecommendedCurveANSIX9C2PNB163V3,
	"ANSIX9C2PNB176V1": RecommendedCurveANSIX9C2PNB176V1,
	"ANSIX9C2TNB191V1": RecommendedCurveANSIX9C2TNB191V1,
	"ANSIX9C2TNB191V2": RecommendedCurveANSIX9C2TNB191V2,
	"ANSIX9C2TNB191V3": RecommendedCurveANSIX9C2TNB191V3,
	"ANSIX9C2PNB208W1": RecommendedCurveANSIX9C2PNB208W1,
	"ANSIX9C2TNB239V1": RecommendedCurveANSIX9C2TNB239V1,
	"ANSIX9C2TNB239V2": RecommendedCurveANSIX9C2TNB239V2,
	"ANSIX9C2TNB239V3": RecommendedCurveANSIX9C2TNB239V3,
	"ANSIX9C2PNB272W1": RecommendedCurveANSIX9C2PNB272W1,
	"ANSIX9C2PNB304W1": RecommendedCurveANSIX9C2PNB304W1,
	"ANSIX9C2TNB359V1": RecommendedCurveANSIX9C2TNB359V1,
	"ANSIX9C2PNB368W1": RecommendedCurveANSIX9C2PNB368W1,
	"ANSIX9C2TNB431R1": RecommendedCurveANSIX9C2TNB431R1,
	"BRAINPOOLP160R1":  RecommendedCurveBRAINPOOLP160R1,
	"BRAINPOOLP160T1":  RecommendedCurveBRAINPOOLP160T1,
	"BRAINPOOLP192R1":  RecommendedCurveBRAINPOOLP192R1,
	"BRAINPOOLP192T1":  RecommendedCurveBRAINPOOLP192T1,
	"BRAINPOOLP224R1":  RecommendedCurveBRAINPOOLP224R1,
	"BRAINPOOLP224T1":  RecommendedCurveBRAINPOOLP224T1,
	"BRAINPOOLP256R1":  RecommendedCurveBRAINPOOLP256R1,
	"BRAINPOOLP256T1":  RecommendedCurveBRAINPOOLP256T1,
	"BRAINPOOLP320R1":  RecommendedCurveBRAINPOOLP320R1,
	"BRAINPOOLP320T1":  RecommendedCurveBRAINPOOLP320T1,
	"BRAINPOOLP384R1":  RecommendedCurveBRAINPOOLP384R1,
	"BRAINPOOLP384T1":  RecommendedCurveBRAINPOOLP384T1,
	"BRAINPOOLP512R1":  RecommendedCurveBRAINPOOLP512R1,
	"BRAINPOOLP512T1":  RecommendedCurveBRAINPOOLP512T1,
}

var _RecommendedCurveValueToNameMap = map[RecommendedCurve]string{
	RecommendedCurveP_192:            "P_192",
	RecommendedCurveK_163:            "K_163",
	RecommendedCurveB_163:            "B_163",
	RecommendedCurveP_224:            "P_224",
	RecommendedCurveK_233:            "K_233",
	RecommendedCurveB_233:            "B_233",
	RecommendedCurveP_256:            "P_256",
	RecommendedCurveK_283:            "K_283",
	RecommendedCurveB_283:            "B_283",
	RecommendedCurveP_384:            "P_384",
	RecommendedCurveK_409:            "K_409",
	RecommendedCurveB_409:            "B_409",
	RecommendedCurveP_521:            "P_521",
	RecommendedCurveK_571:            "K_571",
	RecommendedCurveB_571:            "B_571",
	RecommendedCurveSECP112R1:        "SECP112R1",
	RecommendedCurveSECP112R2:        "SECP112R2",
	RecommendedCurveSECP128R1:        "SECP128R1",
	RecommendedCurveSECP128R2:        "SECP128R2",
	RecommendedCurveSECP160K1:        "SECP160K1",
	RecommendedCurveSECP160R1:        "SECP160R1",
	RecommendedCurveSECP160R2:        "SECP160R2",
	RecommendedCurveSECP192K1:        "SECP192K1",
	RecommendedCurveSECP224K1:        "SECP224K1",
	RecommendedCurveSECP256K1:        "SECP256K1",
	RecommendedCurveSECT113R1:        "SECT113R1",
	RecommendedCurveSECT113R2:        "SECT113R2",
	RecommendedCurveSECT131R1:        "SECT131R1",
	RecommendedCurveSECT131R2:        "SECT131R2",
	RecommendedCurveSECT163R1:        "SECT163R1",
	RecommendedCurveSECT193R1:        "SECT193R1",
	RecommendedCurveSECT193R2:        "SECT193R2",
	RecommendedCurveSECT239K1:        "SECT239K1",
	RecommendedCurveANSIX9P192V2:     "ANSIX9P192V2",
	RecommendedCurveANSIX9P192V3:     "ANSIX9P192V3",
	RecommendedCurveANSIX9P239V1:     "ANSIX9P239V1",
	RecommendedCurveANSIX9P239V2:     "ANSIX9P239V2",
	RecommendedCurveANSIX9P239V3:     "ANSIX9P239V3",
	RecommendedCurveANSIX9C2PNB163V1: "ANSIX9C2PNB163V1",
	RecommendedCurveANSIX9C2PNB163V2: "ANSIX9C2PNB163V2",
	RecommendedCurveANSIX9C2PNB163V3: "ANSIX9C2PNB163V3",
	RecommendedCurveANSIX9C2PNB176V1: "ANSIX9C2PNB176V1",
	RecommendedCurveANSIX9C2TNB191V1: "ANSIX9C2TNB191V1",
	RecommendedCurveANSIX9C2TNB191V2: "ANSIX9C2TNB191V2",
	RecommendedCurveANSIX9C2TNB191V3: "ANSIX9C2TNB191V3",
	RecommendedCurveANSIX9C2PNB208W1: "ANSIX9C2PNB208W1",
	RecommendedCurveANSIX9C2TNB239V1: "ANSIX9C2TNB239V1",
	RecommendedCurveANSIX9C2TNB239V2: "ANSIX9C2TNB239V2",
	RecommendedCurveANSIX9C2TNB239V3: "ANSIX9C2TNB239V3",
	RecommendedCurveANSIX9C2PNB272W1: "ANSIX9C2PNB272W1",
	RecommendedCurveANSIX9C2PNB304W1: "ANSIX9C2PNB304W1",
	RecommendedCurveANSIX9C2TNB359V1: "ANSIX9C2TNB359V1",
	RecommendedCurveANSIX9C2PNB368W1: "ANSIX9C2PNB368W1",
	RecommendedCurveANSIX9C2TNB431R1: "ANSIX9C2TNB431R1",
	RecommendedCurveBRAINPOOLP160R1:  "BRAINPOOLP160R1",
	RecommendedCurveBRAINPOOLP160T1:  "BRAINPOOLP160T1",
	RecommendedCurveBRAINPOOLP192R1:  "BRAINPOOLP192R1",
	RecommendedCurveBRAINPOOLP192T1:  "BRAINPOOLP192T1",
	RecommendedCurveBRAINPOOLP224R1:  "BRAINPOOLP224R1",
	RecommendedCurveBRAINPOOLP224T1:  "BRAINPOOLP224T1",
	RecommendedCurveBRAINPOOLP256R1:  "BRAINPOOLP256R1",
	RecommendedCurveBRAINPOOLP256T1:  "BRAINPOOLP256T1",
	RecommendedCurveBRAINPOOLP320R1:  "BRAINPOOLP320R1",
	RecommendedCurveBRAINPOOLP320T1:  "BRAINPOOLP320T1",
	RecommendedCurveBRAINPOOLP384R1:  "BRAINPOOLP384R1",
	RecommendedCurveBRAINPOOLP384T1:  "BRAINPOOLP384T1",
	RecommendedCurveBRAINPOOLP512R1:  "BRAINPOOLP512R1",
	RecommendedCurveBRAINPOOLP512T1:  "BRAINPOOLP512T1",
}

func (r RecommendedCurve) MarshalText() (text []byte, err error) {
	return []byte(r.String()), nil
}

func init() {
	RegisterEnum(TagRecommendedCurve, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _RecommendedCurveNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return RecommendedCurve(v).String()
		},
		Typed: func(v uint32) interface{} {
			return RecommendedCurve(v)
		},
	})
}

func (r RecommendedCurve) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(r))
	return nil
}

func RegisterRecommendedCurve(r RecommendedCurve, name string) {
	name = NormalizeName(name)
	_RecommendedCurveNameToValueMap[name] = r
	_RecommendedCurveValueToNameMap[r] = name
}

func (r RecommendedCurve) String() string {
	if s, ok := _RecommendedCurveValueToNameMap[r]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(r))
}

// Certificate Type Enumeration

// 9.1.3.2.6 Table 294
type CertificateType uint32

const (
	CertificateTypeX_509 CertificateType = 0x00000001
	CertificateTypePGP   CertificateType = 0x00000002
)

var _CertificateTypeNameToValueMap = map[string]CertificateType{
	"X_509": CertificateTypeX_509,
	"PGP":   CertificateTypePGP,
}

var _CertificateTypeValueToNameMap = map[CertificateType]string{
	CertificateTypeX_509: "X_509",
	CertificateTypePGP:   "PGP",
}

func (c CertificateType) MarshalText() (text []byte, err error) {
	return []byte(c.String()), nil
}

func init() {
	RegisterEnum(TagCertificateType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _CertificateTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return CertificateType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return CertificateType(v)
		},
	})
}

func (c CertificateType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(c))
	return nil
}

func RegisterCertificateType(c CertificateType, name string) {
	name = NormalizeName(name)
	_CertificateTypeNameToValueMap[name] = c
	_CertificateTypeValueToNameMap[c] = name
}

func (c CertificateType) String() string {
	if s, ok := _CertificateTypeValueToNameMap[c]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(c))
}

// Digital Signature Algorithm Enumeration

// 9.1.3.2.7 Table 295
type DigitalSignatureAlgorithm uint32

const (
	DigitalSignatureAlgorithmMD2WithRSAEncryption      DigitalSignatureAlgorithm = 0x00000001
	DigitalSignatureAlgorithmMD5WithRSAEncryption      DigitalSignatureAlgorithm = 0x00000002
	DigitalSignatureAlgorithmSHA_1WithRSAEncryption    DigitalSignatureAlgorithm = 0x00000003
	DigitalSignatureAlgorithmSHA_224WithRSAEncryption  DigitalSignatureAlgorithm = 0x00000004
	DigitalSignatureAlgorithmSHA_256WithRSAEncryption  DigitalSignatureAlgorithm = 0x00000005
	DigitalSignatureAlgorithmSHA_384WithRSAEncryption  DigitalSignatureAlgorithm = 0x00000006
	DigitalSignatureAlgorithmSHA_512WithRSAEncryption  DigitalSignatureAlgorithm = 0x00000007
	DigitalSignatureAlgorithmRSASSA_PSS                DigitalSignatureAlgorithm = 0x00000008
	DigitalSignatureAlgorithmDSAWithSHA_1              DigitalSignatureAlgorithm = 0x00000009
	DigitalSignatureAlgorithmDSAWithSHA224             DigitalSignatureAlgorithm = 0x0000000a
	DigitalSignatureAlgorithmDSAWithSHA256             DigitalSignatureAlgorithm = 0x0000000b
	DigitalSignatureAlgorithmECDSAWithSHA_1            DigitalSignatureAlgorithm = 0x0000000c
	DigitalSignatureAlgorithmECDSAWithSHA224           DigitalSignatureAlgorithm = 0x0000000d
	DigitalSignatureAlgorithmECDSAWithSHA256           DigitalSignatureAlgorithm = 0x0000000e
	DigitalSignatureAlgorithmECDSAWithSHA384           DigitalSignatureAlgorithm = 0x0000000f
	DigitalSignatureAlgorithmECDSAWithSHA512           DigitalSignatureAlgorithm = 0x00000010
	DigitalSignatureAlgorithmSHA3_256WithRSAEncryption DigitalSignatureAlgorithm = 0x00000011
	DigitalSignatureAlgorithmSHA3_384WithRSAEncryption DigitalSignatureAlgorithm = 0x00000012
	DigitalSignatureAlgorithmSHA3_512WithRSAEncryption DigitalSignatureAlgorithm = 0x00000013
)

var _DigitalSignatureAlgorithmNameToValueMap = map[string]DigitalSignatureAlgorithm{
	"MD2WithRSAEncryption":      DigitalSignatureAlgorithmMD2WithRSAEncryption,
	"MD5WithRSAEncryption":      DigitalSignatureAlgorithmMD5WithRSAEncryption,
	"SHA_1WithRSAEncryption":    DigitalSignatureAlgorithmSHA_1WithRSAEncryption,
	"SHA_224WithRSAEncryption":  DigitalSignatureAlgorithmSHA_224WithRSAEncryption,
	"SHA_256WithRSAEncryption":  DigitalSignatureAlgorithmSHA_256WithRSAEncryption,
	"SHA_384WithRSAEncryption":  DigitalSignatureAlgorithmSHA_384WithRSAEncryption,
	"SHA_512WithRSAEncryption":  DigitalSignatureAlgorithmSHA_512WithRSAEncryption,
	"RSASSA_PSS":                DigitalSignatureAlgorithmRSASSA_PSS,
	"DSAWithSHA_1":              DigitalSignatureAlgorithmDSAWithSHA_1,
	"DSAWithSHA224":             DigitalSignatureAlgorithmDSAWithSHA224,
	"DSAWithSHA256":             DigitalSignatureAlgorithmDSAWithSHA256,
	"ECDSAWithSHA_1":            DigitalSignatureAlgorithmECDSAWithSHA_1,
	"ECDSAWithSHA224":           DigitalSignatureAlgorithmECDSAWithSHA224,
	"ECDSAWithSHA256":           DigitalSignatureAlgorithmECDSAWithSHA256,
	"ECDSAWithSHA384":           DigitalSignatureAlgorithmECDSAWithSHA384,
	"ECDSAWithSHA512":           DigitalSignatureAlgorithmECDSAWithSHA512,
	"SHA3_256WithRSAEncryption": DigitalSignatureAlgorithmSHA3_256WithRSAEncryption,
	"SHA3_384WithRSAEncryption": DigitalSignatureAlgorithmSHA3_384WithRSAEncryption,
	"SHA3_512WithRSAEncryption": DigitalSignatureAlgorithmSHA3_512WithRSAEncryption,
}

var _DigitalSignatureAlgorithmValueToNameMap = map[DigitalSignatureAlgorithm]string{
	DigitalSignatureAlgorithmMD2WithRSAEncryption:      "MD2WithRSAEncryption",
	DigitalSignatureAlgorithmMD5WithRSAEncryption:      "MD5WithRSAEncryption",
	DigitalSignatureAlgorithmSHA_1WithRSAEncryption:    "SHA_1WithRSAEncryption",
	DigitalSignatureAlgorithmSHA_224WithRSAEncryption:  "SHA_224WithRSAEncryption",
	DigitalSignatureAlgorithmSHA_256WithRSAEncryption:  "SHA_256WithRSAEncryption",
	DigitalSignatureAlgorithmSHA_384WithRSAEncryption:  "SHA_384WithRSAEncryption",
	DigitalSignatureAlgorithmSHA_512WithRSAEncryption:  "SHA_512WithRSAEncryption",
	DigitalSignatureAlgorithmRSASSA_PSS:                "RSASSA_PSS",
	DigitalSignatureAlgorithmDSAWithSHA_1:              "DSAWithSHA_1",
	DigitalSignatureAlgorithmDSAWithSHA224:             "DSAWithSHA224",
	DigitalSignatureAlgorithmDSAWithSHA256:             "DSAWithSHA256",
	DigitalSignatureAlgorithmECDSAWithSHA_1:            "ECDSAWithSHA_1",
	DigitalSignatureAlgorithmECDSAWithSHA224:           "ECDSAWithSHA224",
	DigitalSignatureAlgorithmECDSAWithSHA256:           "ECDSAWithSHA256",
	DigitalSignatureAlgorithmECDSAWithSHA384:           "ECDSAWithSHA384",
	DigitalSignatureAlgorithmECDSAWithSHA512:           "ECDSAWithSHA512",
	DigitalSignatureAlgorithmSHA3_256WithRSAEncryption: "SHA3_256WithRSAEncryption",
	DigitalSignatureAlgorithmSHA3_384WithRSAEncryption: "SHA3_384WithRSAEncryption",
	DigitalSignatureAlgorithmSHA3_512WithRSAEncryption: "SHA3_512WithRSAEncryption",
}

func (d DigitalSignatureAlgorithm) MarshalText() (text []byte, err error) {
	return []byte(d.String()), nil
}

func init() {
	RegisterEnum(TagDigitalSignatureAlgorithm, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _DigitalSignatureAlgorithmNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return DigitalSignatureAlgorithm(v).String()
		},
		Typed: func(v uint32) interface{} {
			return DigitalSignatureAlgorithm(v)
		},
	})
}

func (d DigitalSignatureAlgorithm) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(d))
	return nil
}

func RegisterDigitalSignatureAlgorithm(d DigitalSignatureAlgorithm, name string) {
	name = NormalizeName(name)
	_DigitalSignatureAlgorithmNameToValueMap[name] = d
	_DigitalSignatureAlgorithmValueToNameMap[d] = name
}

func (d DigitalSignatureAlgorithm) String() string {
	if s, ok := _DigitalSignatureAlgorithmValueToNameMap[d]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(d))
}

// Split Key Method Enumeration

// 9.1.3.2.8 Table 296
type SplitKeyMethod uint32

const (
	SplitKeyMethodXOR                         SplitKeyMethod = 0x00000001
	SplitKeyMethodPolynomialSharingGF2_16     SplitKeyMethod = 0x00000002
	SplitKeyMethodPolynomialSharingPrimeField SplitKeyMethod = 0x00000003
	SplitKeyMethodPolynomialSharingGF2_8      SplitKeyMethod = 0x00000004
)

var _SplitKeyMethodNameToValueMap = map[string]SplitKeyMethod{
	"XOR":                         SplitKeyMethodXOR,
	"PolynomialSharingGF2_16":     SplitKeyMethodPolynomialSharingGF2_16,
	"PolynomialSharingPrimeField": SplitKeyMethodPolynomialSharingPrimeField,
	"PolynomialSharingGF2_8":      SplitKeyMethodPolynomialSharingGF2_8,
}

var _SplitKeyMethodValueToNameMap = map[SplitKeyMethod]string{
	SplitKeyMethodXOR:                         "XOR",
	SplitKeyMethodPolynomialSharingGF2_16:     "PolynomialSharingGF2_16",
	SplitKeyMethodPolynomialSharingPrimeField: "PolynomialSharingPrimeField",
	SplitKeyMethodPolynomialSharingGF2_8:      "PolynomialSharingGF2_8",
}

func (s SplitKeyMethod) MarshalText() (text []byte, err error) {
	return []byte(s.String()), nil
}

func init() {
	RegisterEnum(TagSplitKeyMethod, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _SplitKeyMethodNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return SplitKeyMethod(v).String()
		},
		Typed: func(v uint32) interface{} {
			return SplitKeyMethod(v)
		},
	})
}

func (s SplitKeyMethod) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(s))
	return nil
}

func RegisterSplitKeyMethod(s SplitKeyMethod, name string) {
	name = NormalizeName(name)
	_SplitKeyMethodNameToValueMap[name] = s
	_SplitKeyMethodValueToNameMap[s] = name
}

func (s SplitKeyMethod) String() string {
	if s, ok := _SplitKeyMethodValueToNameMap[s]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(s))
}

// Secret Data Type Enumeration

// 9.1.3.2.9 Table 9
type SecretDataType uint32

const (
	SecretDataTypePassword SecretDataType = 0x00000001
	SecretDataTypeSeed     SecretDataType = 0x00000002
)

var _SecretDataTypeNameToValueMap = map[string]SecretDataType{
	"Password": SecretDataTypePassword,
	"Seed":     SecretDataTypeSeed,
}

var _SecretDataTypeValueToNameMap = map[SecretDataType]string{
	SecretDataTypePassword: "Password",
	SecretDataTypeSeed:     "Seed",
}

func (s SecretDataType) MarshalText() (text []byte, err error) {
	return []byte(s.String()), nil
}

func init() {
	RegisterEnum(TagSecretDataType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _SecretDataTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return SecretDataType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return SecretDataType(v)
		},
	})
}

func (s SecretDataType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(s))
	return nil
}

func RegisterSecretDataType(s SecretDataType, name string) {
	name = NormalizeName(name)
	_SecretDataTypeNameToValueMap[name] = s
	_SecretDataTypeValueToNameMap[s] = name
}

func (s SecretDataType) String() string {
	if s, ok := _SecretDataTypeValueToNameMap[s]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(s))
}

// Opaque Data Type Enumeration

// 9.1.3.2.10 Table 298
type OpaqueDataType uint32

const ()

var _OpaqueDataTypeNameToValueMap = map[string]OpaqueDataType{}

var _OpaqueDataTypeValueToNameMap = map[OpaqueDataType]string{}

func (o OpaqueDataType) MarshalText() (text []byte, err error) {
	return []byte(o.String()), nil
}

func init() {
	RegisterEnum(TagOpaqueDataType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _OpaqueDataTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return OpaqueDataType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return OpaqueDataType(v)
		},
	})
}

func (o OpaqueDataType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(o))
	return nil
}

func RegisterOpaqueDataType(o OpaqueDataType, name string) {
	name = NormalizeName(name)
	_OpaqueDataTypeNameToValueMap[name] = o
	_OpaqueDataTypeValueToNameMap[o] = name
}

func (o OpaqueDataType) String() string {
	if s, ok := _OpaqueDataTypeValueToNameMap[o]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(o))
}

// Name Type Enumeration

// 9.1.3.2.11 Table 299
type NameType uint32

const (
	NameTypeUninterpretedTextString NameType = 0x00000001
	NameTypeURI                     NameType = 0x00000002
)

var _NameTypeNameToValueMap = map[string]NameType{
	"UninterpretedTextString": NameTypeUninterpretedTextString,
	"URI":                     NameTypeURI,
}

var _NameTypeValueToNameMap = map[NameType]string{
	NameTypeUninterpretedTextString: "UninterpretedTextString",
	NameTypeURI:                     "URI",
}

func (n NameType) MarshalText() (text []byte, err error) {
	return []byte(n.String()), nil
}

func init() {
	RegisterEnum(TagNameType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _NameTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return NameType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return NameType(v)
		},
	})
}

func (n NameType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(n))
	return nil
}

func RegisterNameType(n NameType, name string) {
	name = NormalizeName(name)
	_NameTypeNameToValueMap[name] = n
	_NameTypeValueToNameMap[n] = name
}

func (n NameType) String() string {
	if s, ok := _NameTypeValueToNameMap[n]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(n))
}

// Object Type Enumeration

// 9.1.3.2.12 Table 300
type ObjectType uint32

const (
	ObjectTypeCertificate  ObjectType = 0x00000001
	ObjectTypeSymmetricKey ObjectType = 0x00000002
	ObjectTypePublicKey    ObjectType = 0x00000003
	ObjectTypePrivateKey   ObjectType = 0x00000004
	ObjectTypeSplitKey     ObjectType = 0x00000005
	ObjectTypeTemplate     ObjectType = 0x00000006
	ObjectTypeSecretData   ObjectType = 0x00000007
	ObjectTypeOpaqueObject ObjectType = 0x00000008
	ObjectTypePGPKey       ObjectType = 0x00000009
)

var _ObjectTypeNameToValueMap = map[string]ObjectType{
	"Certificate":  ObjectTypeCertificate,
	"SymmetricKey": ObjectTypeSymmetricKey,
	"PublicKey":    ObjectTypePublicKey,
	"PrivateKey":   ObjectTypePrivateKey,
	"SplitKey":     ObjectTypeSplitKey,
	"Template":     ObjectTypeTemplate,
	"SecretData":   ObjectTypeSecretData,
	"OpaqueObject": ObjectTypeOpaqueObject,
	"PGPKey":       ObjectTypePGPKey,
}

var _ObjectTypeValueToNameMap = map[ObjectType]string{
	ObjectTypeCertificate:  "Certificate",
	ObjectTypeSymmetricKey: "SymmetricKey",
	ObjectTypePublicKey:    "PublicKey",
	ObjectTypePrivateKey:   "PrivateKey",
	ObjectTypeSplitKey:     "SplitKey",
	ObjectTypeTemplate:     "Template",
	ObjectTypeSecretData:   "SecretData",
	ObjectTypeOpaqueObject: "OpaqueObject",
	ObjectTypePGPKey:       "PGPKey",
}

func (o ObjectType) MarshalText() (text []byte, err error) {
	return []byte(o.String()), nil
}

func init() {
	RegisterEnum(TagObjectType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _ObjectTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return ObjectType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return ObjectType(v)
		},
	})
}

func (o ObjectType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(o))
	return nil
}

func RegisterObjectType(o ObjectType, name string) {
	name = NormalizeName(name)
	_ObjectTypeNameToValueMap[name] = o
	_ObjectTypeValueToNameMap[o] = name
}

func (o ObjectType) String() string {
	if s, ok := _ObjectTypeValueToNameMap[o]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(o))
}

// Cryptographic Algorithm Enumeration

// 9.1.3.2.13 Table 301
type CryptographicAlgorithm uint32

const (
	CryptographicAlgorithmDES              CryptographicAlgorithm = 0x00000001
	CryptographicAlgorithmDES3             CryptographicAlgorithm = 0x00000002
	CryptographicAlgorithmAES              CryptographicAlgorithm = 0x00000003
	CryptographicAlgorithmRSA              CryptographicAlgorithm = 0x00000004
	CryptographicAlgorithmDSA              CryptographicAlgorithm = 0x00000005
	CryptographicAlgorithmECDSA            CryptographicAlgorithm = 0x00000006
	CryptographicAlgorithmHMAC_SHA1        CryptographicAlgorithm = 0x00000007
	CryptographicAlgorithmHMAC_SHA224      CryptographicAlgorithm = 0x00000008
	CryptographicAlgorithmHMAC_SHA256      CryptographicAlgorithm = 0x00000009
	CryptographicAlgorithmHMAC_SHA384      CryptographicAlgorithm = 0x0000000a
	CryptographicAlgorithmHMAC_SHA512      CryptographicAlgorithm = 0x0000000b
	CryptographicAlgorithmHMAC_MD5         CryptographicAlgorithm = 0x0000000c
	CryptographicAlgorithmDH               CryptographicAlgorithm = 0x0000000d
	CryptographicAlgorithmECDH             CryptographicAlgorithm = 0x0000000e
	CryptographicAlgorithmECMQV            CryptographicAlgorithm = 0x0000000f
	CryptographicAlgorithmBlowfish         CryptographicAlgorithm = 0x00000010
	CryptographicAlgorithmCamellia         CryptographicAlgorithm = 0x00000011
	CryptographicAlgorithmCAST5            CryptographicAlgorithm = 0x00000012
	CryptographicAlgorithmIDEA             CryptographicAlgorithm = 0x00000013
	CryptographicAlgorithmMARS             CryptographicAlgorithm = 0x00000014
	CryptographicAlgorithmRC2              CryptographicAlgorithm = 0x00000015
	CryptographicAlgorithmRC4              CryptographicAlgorithm = 0x00000016
	CryptographicAlgorithmRC5              CryptographicAlgorithm = 0x00000017
	CryptographicAlgorithmSKIPJACK         CryptographicAlgorithm = 0x00000018
	CryptographicAlgorithmTwofish          CryptographicAlgorithm = 0x00000019
	CryptographicAlgorithmEC               CryptographicAlgorithm = 0x0000001a
	CryptographicAlgorithmOneTimePad       CryptographicAlgorithm = 0x0000001b
	CryptographicAlgorithmChaCha20         CryptographicAlgorithm = 0x0000001c
	CryptographicAlgorithmPoly1305         CryptographicAlgorithm = 0x0000001d
	CryptographicAlgorithmChaCha20Poly1305 CryptographicAlgorithm = 0x0000001e
	CryptographicAlgorithmSHA3_224         CryptographicAlgorithm = 0x0000001f
	CryptographicAlgorithmSHA3_256         CryptographicAlgorithm = 0x00000020
	CryptographicAlgorithmSHA3_384         CryptographicAlgorithm = 0x00000021
	CryptographicAlgorithmSHA3_512         CryptographicAlgorithm = 0x00000022
	CryptographicAlgorithmHMAC_SHA3_224    CryptographicAlgorithm = 0x00000023
	CryptographicAlgorithmHMAC_SHA3_256    CryptographicAlgorithm = 0x00000024
	CryptographicAlgorithmHMAC_SHA3_384    CryptographicAlgorithm = 0x00000025
	CryptographicAlgorithmHMAC_SHA3_512    CryptographicAlgorithm = 0x00000026
	CryptographicAlgorithmSHAKE_128        CryptographicAlgorithm = 0x00000027
	CryptographicAlgorithmSHAKE_256        CryptographicAlgorithm = 0x00000028
)

var _CryptographicAlgorithmNameToValueMap = map[string]CryptographicAlgorithm{
	"DES":              CryptographicAlgorithmDES,
	"DES3":             CryptographicAlgorithmDES3,
	"AES":              CryptographicAlgorithmAES,
	"RSA":              CryptographicAlgorithmRSA,
	"DSA":              CryptographicAlgorithmDSA,
	"ECDSA":            CryptographicAlgorithmECDSA,
	"HMAC_SHA1":        CryptographicAlgorithmHMAC_SHA1,
	"HMAC_SHA224":      CryptographicAlgorithmHMAC_SHA224,
	"HMAC_SHA256":      CryptographicAlgorithmHMAC_SHA256,
	"HMAC_SHA384":      CryptographicAlgorithmHMAC_SHA384,
	"HMAC_SHA512":      CryptographicAlgorithmHMAC_SHA512,
	"HMAC_MD5":         CryptographicAlgorithmHMAC_MD5,
	"DH":               CryptographicAlgorithmDH,
	"ECDH":             CryptographicAlgorithmECDH,
	"ECMQV":            CryptographicAlgorithmECMQV,
	"Blowfish":         CryptographicAlgorithmBlowfish,
	"Camellia":         CryptographicAlgorithmCamellia,
	"CAST5":            CryptographicAlgorithmCAST5,
	"IDEA":             CryptographicAlgorithmIDEA,
	"MARS":             CryptographicAlgorithmMARS,
	"RC2":              CryptographicAlgorithmRC2,
	"RC4":              CryptographicAlgorithmRC4,
	"RC5":              CryptographicAlgorithmRC5,
	"SKIPJACK":         CryptographicAlgorithmSKIPJACK,
	"Twofish":          CryptographicAlgorithmTwofish,
	"EC":               CryptographicAlgorithmEC,
	"OneTimePad":       CryptographicAlgorithmOneTimePad,
	"ChaCha20":         CryptographicAlgorithmChaCha20,
	"Poly1305":         CryptographicAlgorithmPoly1305,
	"ChaCha20Poly1305": CryptographicAlgorithmChaCha20Poly1305,
	"SHA3_224":         CryptographicAlgorithmSHA3_224,
	"SHA3_256":         CryptographicAlgorithmSHA3_256,
	"SHA3_384":         CryptographicAlgorithmSHA3_384,
	"SHA3_512":         CryptographicAlgorithmSHA3_512,
	"HMAC_SHA3_224":    CryptographicAlgorithmHMAC_SHA3_224,
	"HMAC_SHA3_256":    CryptographicAlgorithmHMAC_SHA3_256,
	"HMAC_SHA3_384":    CryptographicAlgorithmHMAC_SHA3_384,
	"HMAC_SHA3_512":    CryptographicAlgorithmHMAC_SHA3_512,
	"SHAKE_128":        CryptographicAlgorithmSHAKE_128,
	"SHAKE_256":        CryptographicAlgorithmSHAKE_256,
}

var _CryptographicAlgorithmValueToNameMap = map[CryptographicAlgorithm]string{
	CryptographicAlgorithmDES:              "DES",
	CryptographicAlgorithmDES3:             "DES3",
	CryptographicAlgorithmAES:              "AES",
	CryptographicAlgorithmRSA:              "RSA",
	CryptographicAlgorithmDSA:              "DSA",
	CryptographicAlgorithmECDSA:            "ECDSA",
	CryptographicAlgorithmHMAC_SHA1:        "HMAC_SHA1",
	CryptographicAlgorithmHMAC_SHA224:      "HMAC_SHA224",
	CryptographicAlgorithmHMAC_SHA256:      "HMAC_SHA256",
	CryptographicAlgorithmHMAC_SHA384:      "HMAC_SHA384",
	CryptographicAlgorithmHMAC_SHA512:      "HMAC_SHA512",
	CryptographicAlgorithmHMAC_MD5:         "HMAC_MD5",
	CryptographicAlgorithmDH:               "DH",
	CryptographicAlgorithmECDH:             "ECDH",
	CryptographicAlgorithmECMQV:            "ECMQV",
	CryptographicAlgorithmBlowfish:         "Blowfish",
	CryptographicAlgorithmCamellia:         "Camellia",
	CryptographicAlgorithmCAST5:            "CAST5",
	CryptographicAlgorithmIDEA:             "IDEA",
	CryptographicAlgorithmMARS:             "MARS",
	CryptographicAlgorithmRC2:              "RC2",
	CryptographicAlgorithmRC4:              "RC4",
	CryptographicAlgorithmRC5:              "RC5",
	CryptographicAlgorithmSKIPJACK:         "SKIPJACK",
	CryptographicAlgorithmTwofish:          "Twofish",
	CryptographicAlgorithmEC:               "EC",
	CryptographicAlgorithmOneTimePad:       "OneTimePad",
	CryptographicAlgorithmChaCha20:         "ChaCha20",
	CryptographicAlgorithmPoly1305:         "Poly1305",
	CryptographicAlgorithmChaCha20Poly1305: "ChaCha20Poly1305",
	CryptographicAlgorithmSHA3_224:         "SHA3_224",
	CryptographicAlgorithmSHA3_256:         "SHA3_256",
	CryptographicAlgorithmSHA3_384:         "SHA3_384",
	CryptographicAlgorithmSHA3_512:         "SHA3_512",
	CryptographicAlgorithmHMAC_SHA3_224:    "HMAC_SHA3_224",
	CryptographicAlgorithmHMAC_SHA3_256:    "HMAC_SHA3_256",
	CryptographicAlgorithmHMAC_SHA3_384:    "HMAC_SHA3_384",
	CryptographicAlgorithmHMAC_SHA3_512:    "HMAC_SHA3_512",
	CryptographicAlgorithmSHAKE_128:        "SHAKE_128",
	CryptographicAlgorithmSHAKE_256:        "SHAKE_256",
}

func (c CryptographicAlgorithm) MarshalText() (text []byte, err error) {
	return []byte(c.String()), nil
}

func init() {
	RegisterEnum(TagCryptographicAlgorithm, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _CryptographicAlgorithmNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return CryptographicAlgorithm(v).String()
		},
		Typed: func(v uint32) interface{} {
			return CryptographicAlgorithm(v)
		},
	})
}

func (c CryptographicAlgorithm) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(c))
	return nil
}

func RegisterCryptographicAlgorithm(c CryptographicAlgorithm, name string) {
	name = NormalizeName(name)
	_CryptographicAlgorithmNameToValueMap[name] = c
	_CryptographicAlgorithmValueToNameMap[c] = name
}

func (c CryptographicAlgorithm) String() string {
	if s, ok := _CryptographicAlgorithmValueToNameMap[c]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(c))
}

// Block Cipher Mode Enumeration

// 9.1.3.2.14 Table 302
type BlockCipherMode uint32

const (
	BlockCipherModeCBC               BlockCipherMode = 0x00000001
	BlockCipherModeECB               BlockCipherMode = 0x00000002
	BlockCipherModePCBC              BlockCipherMode = 0x00000003
	BlockCipherModeCFB               BlockCipherMode = 0x00000004
	BlockCipherModeOFB               BlockCipherMode = 0x00000005
	BlockCipherModeCTR               BlockCipherMode = 0x00000006
	BlockCipherModeCMAC              BlockCipherMode = 0x00000007
	BlockCipherModeCCM               BlockCipherMode = 0x00000008
	BlockCipherModeGCM               BlockCipherMode = 0x00000009
	BlockCipherModeCBC_MAC           BlockCipherMode = 0x0000000a
	BlockCipherModeXTS               BlockCipherMode = 0x0000000b
	BlockCipherModeAESKeyWrapPadding BlockCipherMode = 0x0000000c
	BlockCipherModeNISTKeyWrap       BlockCipherMode = 0x0000000d
	BlockCipherModeX9_102AESKW       BlockCipherMode = 0x0000000e
	BlockCipherModeX9_102TDKW        BlockCipherMode = 0x0000000f
	BlockCipherModeX9_102AKW1        BlockCipherMode = 0x00000010
	BlockCipherModeX9_102AKW2        BlockCipherMode = 0x00000011
	BlockCipherModeAEAD              BlockCipherMode = 0x00000012
)

var _BlockCipherModeNameToValueMap = map[string]BlockCipherMode{
	"CBC":               BlockCipherModeCBC,
	"ECB":               BlockCipherModeECB,
	"PCBC":              BlockCipherModePCBC,
	"CFB":               BlockCipherModeCFB,
	"OFB":               BlockCipherModeOFB,
	"CTR":               BlockCipherModeCTR,
	"CMAC":              BlockCipherModeCMAC,
	"CCM":               BlockCipherModeCCM,
	"GCM":               BlockCipherModeGCM,
	"CBC_MAC":           BlockCipherModeCBC_MAC,
	"XTS":               BlockCipherModeXTS,
	"AESKeyWrapPadding": BlockCipherModeAESKeyWrapPadding,
	"NISTKeyWrap":       BlockCipherModeNISTKeyWrap,
	"X9_102AESKW":       BlockCipherModeX9_102AESKW,
	"X9_102TDKW":        BlockCipherModeX9_102TDKW,
	"X9_102AKW1":        BlockCipherModeX9_102AKW1,
	"X9_102AKW2":        BlockCipherModeX9_102AKW2,
	"AEAD":              BlockCipherModeAEAD,
}

var _BlockCipherModeValueToNameMap = map[BlockCipherMode]string{
	BlockCipherModeCBC:               "CBC",
	BlockCipherModeECB:               "ECB",
	BlockCipherModePCBC:              "PCBC",
	BlockCipherModeCFB:               "CFB",
	BlockCipherModeOFB:               "OFB",
	BlockCipherModeCTR:               "CTR",
	BlockCipherModeCMAC:              "CMAC",
	BlockCipherModeCCM:               "CCM",
	BlockCipherModeGCM:               "GCM",
	BlockCipherModeCBC_MAC:           "CBC_MAC",
	BlockCipherModeXTS:               "XTS",
	BlockCipherModeAESKeyWrapPadding: "AESKeyWrapPadding",
	BlockCipherModeNISTKeyWrap:       "NISTKeyWrap",
	BlockCipherModeX9_102AESKW:       "X9_102AESKW",
	BlockCipherModeX9_102TDKW:        "X9_102TDKW",
	BlockCipherModeX9_102AKW1:        "X9_102AKW1",
	BlockCipherModeX9_102AKW2:        "X9_102AKW2",
	BlockCipherModeAEAD:              "AEAD",
}

func (b BlockCipherMode) MarshalText() (text []byte, err error) {
	return []byte(b.String()), nil
}

func init() {
	RegisterEnum(TagBlockCipherMode, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _BlockCipherModeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return BlockCipherMode(v).String()
		},
		Typed: func(v uint32) interface{} {
			return BlockCipherMode(v)
		},
	})
}

func (b BlockCipherMode) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(b))
	return nil
}

func RegisterBlockCipherMode(b BlockCipherMode, name string) {
	name = NormalizeName(name)
	_BlockCipherModeNameToValueMap[name] = b
	_BlockCipherModeValueToNameMap[b] = name
}

func (b BlockCipherMode) String() string {
	if s, ok := _BlockCipherModeValueToNameMap[b]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(b))
}

// Padding Method Enumeration

// 9.1.3.2.15 Table 303
type PaddingMethod uint32

const (
	PaddingMethodNone      PaddingMethod = 0x00000001
	PaddingMethodOAEP      PaddingMethod = 0x00000002
	PaddingMethodPKCS5     PaddingMethod = 0x00000003
	PaddingMethodSSL3      PaddingMethod = 0x00000004
	PaddingMethodZeros     PaddingMethod = 0x00000005
	PaddingMethodANSIX9_23 PaddingMethod = 0x00000006
	PaddingMethodISO10126  PaddingMethod = 0x00000007
	PaddingMethodPKCS1V1_5 PaddingMethod = 0x00000008
	PaddingMethodX9_31     PaddingMethod = 0x00000009
	PaddingMethodPSS       PaddingMethod = 0x0000000a
)

var _PaddingMethodNameToValueMap = map[string]PaddingMethod{
	"None":      PaddingMethodNone,
	"OAEP":      PaddingMethodOAEP,
	"PKCS5":     PaddingMethodPKCS5,
	"SSL3":      PaddingMethodSSL3,
	"Zeros":     PaddingMethodZeros,
	"ANSIX9_23": PaddingMethodANSIX9_23,
	"ISO10126":  PaddingMethodISO10126,
	"PKCS1V1_5": PaddingMethodPKCS1V1_5,
	"X9_31":     PaddingMethodX9_31,
	"PSS":       PaddingMethodPSS,
}

var _PaddingMethodValueToNameMap = map[PaddingMethod]string{
	PaddingMethodNone:      "None",
	PaddingMethodOAEP:      "OAEP",
	PaddingMethodPKCS5:     "PKCS5",
	PaddingMethodSSL3:      "SSL3",
	PaddingMethodZeros:     "Zeros",
	PaddingMethodANSIX9_23: "ANSIX9_23",
	PaddingMethodISO10126:  "ISO10126",
	PaddingMethodPKCS1V1_5: "PKCS1V1_5",
	PaddingMethodX9_31:     "X9_31",
	PaddingMethodPSS:       "PSS",
}

func (p PaddingMethod) MarshalText() (text []byte, err error) {
	return []byte(p.String()), nil
}

func init() {
	RegisterEnum(TagPaddingMethod, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _PaddingMethodNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return PaddingMethod(v).String()
		},
		Typed: func(v uint32) interface{} {
			return PaddingMethod(v)
		},
	})
}

func (p PaddingMethod) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(p))
	return nil
}

func RegisterPaddingMethod(p PaddingMethod, name string) {
	name = NormalizeName(name)
	_PaddingMethodNameToValueMap[name] = p
	_PaddingMethodValueToNameMap[p] = name
}

func (p PaddingMethod) String() string {
	if s, ok := _PaddingMethodValueToNameMap[p]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(p))
}

// Hashing Algorithm Enumeration

// 9.1.3.2.16 Table 304
type HashingAlgorithm uint32

const (
	HashingAlgorithmMD2         HashingAlgorithm = 0x00000001
	HashingAlgorithmMD4         HashingAlgorithm = 0x00000002
	HashingAlgorithmMD5         HashingAlgorithm = 0x00000003
	HashingAlgorithmSHA_1       HashingAlgorithm = 0x00000004
	HashingAlgorithmSHA_224     HashingAlgorithm = 0x00000005
	HashingAlgorithmSHA_256     HashingAlgorithm = 0x00000006
	HashingAlgorithmSHA_384     HashingAlgorithm = 0x00000007
	HashingAlgorithmSHA_512     HashingAlgorithm = 0x00000008
	HashingAlgorithmRIPEMD_160  HashingAlgorithm = 0x00000009
	HashingAlgorithmTiger       HashingAlgorithm = 0x0000000a
	HashingAlgorithmWhirlpool   HashingAlgorithm = 0x0000000b
	HashingAlgorithmSHA_512_224 HashingAlgorithm = 0x0000000c
	HashingAlgorithmSHA_512_256 HashingAlgorithm = 0x0000000d
	HashingAlgorithmSHA_3_224   HashingAlgorithm = 0x0000000e
	HashingAlgorithmSHA_3_256   HashingAlgorithm = 0x0000000f
	HashingAlgorithmSHA_3_384   HashingAlgorithm = 0x00000010
	HashingAlgorithmSHA_3_512   HashingAlgorithm = 0x00000011
)

var _HashingAlgorithmNameToValueMap = map[string]HashingAlgorithm{
	"MD2":         HashingAlgorithmMD2,
	"MD4":         HashingAlgorithmMD4,
	"MD5":         HashingAlgorithmMD5,
	"SHA_1":       HashingAlgorithmSHA_1,
	"SHA_224":     HashingAlgorithmSHA_224,
	"SHA_256":     HashingAlgorithmSHA_256,
	"SHA_384":     HashingAlgorithmSHA_384,
	"SHA_512":     HashingAlgorithmSHA_512,
	"RIPEMD_160":  HashingAlgorithmRIPEMD_160,
	"Tiger":       HashingAlgorithmTiger,
	"Whirlpool":   HashingAlgorithmWhirlpool,
	"SHA_512_224": HashingAlgorithmSHA_512_224,
	"SHA_512_256": HashingAlgorithmSHA_512_256,
	"SHA_3_224":   HashingAlgorithmSHA_3_224,
	"SHA_3_256":   HashingAlgorithmSHA_3_256,
	"SHA_3_384":   HashingAlgorithmSHA_3_384,
	"SHA_3_512":   HashingAlgorithmSHA_3_512,
}

var _HashingAlgorithmValueToNameMap = map[HashingAlgorithm]string{
	HashingAlgorithmMD2:         "MD2",
	HashingAlgorithmMD4:         "MD4",
	HashingAlgorithmMD5:         "MD5",
	HashingAlgorithmSHA_1:       "SHA_1",
	HashingAlgorithmSHA_224:     "SHA_224",
	HashingAlgorithmSHA_256:     "SHA_256",
	HashingAlgorithmSHA_384:     "SHA_384",
	HashingAlgorithmSHA_512:     "SHA_512",
	HashingAlgorithmRIPEMD_160:  "RIPEMD_160",
	HashingAlgorithmTiger:       "Tiger",
	HashingAlgorithmWhirlpool:   "Whirlpool",
	HashingAlgorithmSHA_512_224: "SHA_512_224",
	HashingAlgorithmSHA_512_256: "SHA_512_256",
	HashingAlgorithmSHA_3_224:   "SHA_3_224",
	HashingAlgorithmSHA_3_256:   "SHA_3_256",
	HashingAlgorithmSHA_3_384:   "SHA_3_384",
	HashingAlgorithmSHA_3_512:   "SHA_3_512",
}

func (h HashingAlgorithm) MarshalText() (text []byte, err error) {
	return []byte(h.String()), nil
}

func init() {
	RegisterEnum(TagHashingAlgorithm, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _HashingAlgorithmNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return HashingAlgorithm(v).String()
		},
		Typed: func(v uint32) interface{} {
			return HashingAlgorithm(v)
		},
	})
	RegisterEnum(TagMaskGeneratorHashingAlgorithm, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _HashingAlgorithmNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return HashingAlgorithm(v).String()
		},
		Typed: func(v uint32) interface{} {
			return HashingAlgorithm(v)
		},
	})
}

func (h HashingAlgorithm) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(h))
	return nil
}

func RegisterHashingAlgorithm(h HashingAlgorithm, name string) {
	name = NormalizeName(name)
	_HashingAlgorithmNameToValueMap[name] = h
	_HashingAlgorithmValueToNameMap[h] = name
}

func (h HashingAlgorithm) String() string {
	if s, ok := _HashingAlgorithmValueToNameMap[h]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(h))
}

// Key Role Type Enumeration

// 9.1.3.2.17 Table 305
type KeyRoleType uint32

const (
	KeyRoleTypeBDK      KeyRoleType = 0x00000001
	KeyRoleTypeCVK      KeyRoleType = 0x00000002
	KeyRoleTypeDEK      KeyRoleType = 0x00000003
	KeyRoleTypeMKAC     KeyRoleType = 0x00000004
	KeyRoleTypeMKSMC    KeyRoleType = 0x00000005
	KeyRoleTypeMKSMI    KeyRoleType = 0x00000006
	KeyRoleTypeMKDAC    KeyRoleType = 0x00000007
	KeyRoleTypeMKDN     KeyRoleType = 0x00000008
	KeyRoleTypeMKCP     KeyRoleType = 0x00000009
	KeyRoleTypeMKOTH    KeyRoleType = 0x0000000a
	KeyRoleTypeKEK      KeyRoleType = 0x0000000b
	KeyRoleTypeMAC16609 KeyRoleType = 0x0000000c
	KeyRoleTypeMAC97971 KeyRoleType = 0x0000000d
	KeyRoleTypeMAC97972 KeyRoleType = 0x0000000e
	KeyRoleTypeMAC97973 KeyRoleType = 0x0000000f
	KeyRoleTypeMAC97974 KeyRoleType = 0x00000010
	KeyRoleTypeMAC97975 KeyRoleType = 0x00000011
	KeyRoleTypeZPK      KeyRoleType = 0x00000012
	KeyRoleTypePVKIBM   KeyRoleType = 0x00000013
	KeyRoleTypePVKPVV   KeyRoleType = 0x00000014
	KeyRoleTypePVKOTH   KeyRoleType = 0x00000015
	KeyRoleTypeDUKPT    KeyRoleType = 0x00000016
	KeyRoleTypeIV       KeyRoleType = 0x00000017
	KeyRoleTypeTRKBK    KeyRoleType = 0x00000018
)

var _KeyRoleTypeNameToValueMap = map[string]KeyRoleType{
	"BDK":      KeyRoleTypeBDK,
	"CVK":      KeyRoleTypeCVK,
	"DEK":      KeyRoleTypeDEK,
	"MKAC":     KeyRoleTypeMKAC,
	"MKSMC":    KeyRoleTypeMKSMC,
	"MKSMI":    KeyRoleTypeMKSMI,
	"MKDAC":    KeyRoleTypeMKDAC,
	"MKDN":     KeyRoleTypeMKDN,
	"MKCP":     KeyRoleTypeMKCP,
	"MKOTH":    KeyRoleTypeMKOTH,
	"KEK":      KeyRoleTypeKEK,
	"MAC16609": KeyRoleTypeMAC16609,
	"MAC97971": KeyRoleTypeMAC97971,
	"MAC97972": KeyRoleTypeMAC97972,
	"MAC97973": KeyRoleTypeMAC97973,
	"MAC97974": KeyRoleTypeMAC97974,
	"MAC97975": KeyRoleTypeMAC97975,
	"ZPK":      KeyRoleTypeZPK,
	"PVKIBM":   KeyRoleTypePVKIBM,
	"PVKPVV":   KeyRoleTypePVKPVV,
	"PVKOTH":   KeyRoleTypePVKOTH,
	"DUKPT":    KeyRoleTypeDUKPT,
	"IV":       KeyRoleTypeIV,
	"TRKBK":    KeyRoleTypeTRKBK,
}

var _KeyRoleTypeValueToNameMap = map[KeyRoleType]string{
	KeyRoleTypeBDK:      "BDK",
	KeyRoleTypeCVK:      "CVK",
	KeyRoleTypeDEK:      "DEK",
	KeyRoleTypeMKAC:     "MKAC",
	KeyRoleTypeMKSMC:    "MKSMC",
	KeyRoleTypeMKSMI:    "MKSMI",
	KeyRoleTypeMKDAC:    "MKDAC",
	KeyRoleTypeMKDN:     "MKDN",
	KeyRoleTypeMKCP:     "MKCP",
	KeyRoleTypeMKOTH:    "MKOTH",
	KeyRoleTypeKEK:      "KEK",
	KeyRoleTypeMAC16609: "MAC16609",
	KeyRoleTypeMAC97971: "MAC97971",
	KeyRoleTypeMAC97972: "MAC97972",
	KeyRoleTypeMAC97973: "MAC97973",
	KeyRoleTypeMAC97974: "MAC97974",
	KeyRoleTypeMAC97975: "MAC97975",
	KeyRoleTypeZPK:      "ZPK",
	KeyRoleTypePVKIBM:   "PVKIBM",
	KeyRoleTypePVKPVV:   "PVKPVV",
	KeyRoleTypePVKOTH:   "PVKOTH",
	KeyRoleTypeDUKPT:    "DUKPT",
	KeyRoleTypeIV:       "IV",
	KeyRoleTypeTRKBK:    "TRKBK",
}

func (k KeyRoleType) MarshalText() (text []byte, err error) {
	return []byte(k.String()), nil
}

func init() {
	RegisterEnum(TagKeyRoleType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _KeyRoleTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return KeyRoleType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return KeyRoleType(v)
		},
	})
}

func (k KeyRoleType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(k))
	return nil
}

func RegisterKeyRoleType(k KeyRoleType, name string) {
	name = NormalizeName(name)
	_KeyRoleTypeNameToValueMap[name] = k
	_KeyRoleTypeValueToNameMap[k] = name
}

func (k KeyRoleType) String() string {
	if s, ok := _KeyRoleTypeValueToNameMap[k]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(k))
}

// State Enumeration

// 9.1.3.2.18 Table 306
type State uint32

const (
	StatePreActive            State = 0x00000001
	StateActive               State = 0x00000002
	StateDeactivated          State = 0x00000003
	StateCompromised          State = 0x00000004
	StateDestroyed            State = 0x00000005
	StateDestroyedCompromised State = 0x00000006
)

var _StateNameToValueMap = map[string]State{
	"PreActive":            StatePreActive,
	"Active":               StateActive,
	"Deactivated":          StateDeactivated,
	"Compromised":          StateCompromised,
	"Destroyed":            StateDestroyed,
	"DestroyedCompromised": StateDestroyedCompromised,
}

var _StateValueToNameMap = map[State]string{
	StatePreActive:            "PreActive",
	StateActive:               "Active",
	StateDeactivated:          "Deactivated",
	StateCompromised:          "Compromised",
	StateDestroyed:            "Destroyed",
	StateDestroyedCompromised: "DestroyedCompromised",
}

func (s State) MarshalText() (text []byte, err error) {
	return []byte(s.String()), nil
}

func init() {
	RegisterEnum(TagState, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _StateNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return State(v).String()
		},
		Typed: func(v uint32) interface{} {
			return State(v)
		},
	})
}

func (s State) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(s))
	return nil
}

func RegisterState(s State, name string) {
	name = NormalizeName(name)
	_StateNameToValueMap[name] = s
	_StateValueToNameMap[s] = name
}

func (s State) String() string {
	if s, ok := _StateValueToNameMap[s]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(s))
}

// Revocation Reason Code Enumeration

// 9.1.3.2.19 Table 307
type RevocationReasonCode uint32

const (
	RevocationReasonCodeUnspecified          RevocationReasonCode = 0x00000001
	RevocationReasonCodeKeyCompromise        RevocationReasonCode = 0x00000002
	RevocationReasonCodeCACompromise         RevocationReasonCode = 0x00000003
	RevocationReasonCodeAffiliationChanged   RevocationReasonCode = 0x00000004
	RevocationReasonCodeSuperseded           RevocationReasonCode = 0x00000005
	RevocationReasonCodeCessationOfOperation RevocationReasonCode = 0x00000006
	RevocationReasonCodePrivilegeWithdrawn   RevocationReasonCode = 0x00000007
)

var _RevocationReasonCodeNameToValueMap = map[string]RevocationReasonCode{
	"Unspecified":          RevocationReasonCodeUnspecified,
	"KeyCompromise":        RevocationReasonCodeKeyCompromise,
	"CACompromise":         RevocationReasonCodeCACompromise,
	"AffiliationChanged":   RevocationReasonCodeAffiliationChanged,
	"Superseded":           RevocationReasonCodeSuperseded,
	"CessationOfOperation": RevocationReasonCodeCessationOfOperation,
	"PrivilegeWithdrawn":   RevocationReasonCodePrivilegeWithdrawn,
}

var _RevocationReasonCodeValueToNameMap = map[RevocationReasonCode]string{
	RevocationReasonCodeUnspecified:          "Unspecified",
	RevocationReasonCodeKeyCompromise:        "KeyCompromise",
	RevocationReasonCodeCACompromise:         "CACompromise",
	RevocationReasonCodeAffiliationChanged:   "AffiliationChanged",
	RevocationReasonCodeSuperseded:           "Superseded",
	RevocationReasonCodeCessationOfOperation: "CessationOfOperation",
	RevocationReasonCodePrivilegeWithdrawn:   "PrivilegeWithdrawn",
}

func (r RevocationReasonCode) MarshalText() (text []byte, err error) {
	return []byte(r.String()), nil
}

func init() {
	RegisterEnum(TagRevocationReasonCode, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _RevocationReasonCodeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return RevocationReasonCode(v).String()
		},
		Typed: func(v uint32) interface{} {
			return RevocationReasonCode(v)
		},
	})
}

func (r RevocationReasonCode) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(r))
	return nil
}

func RegisterRevocationReasonCode(r RevocationReasonCode, name string) {
	name = NormalizeName(name)
	_RevocationReasonCodeNameToValueMap[name] = r
	_RevocationReasonCodeValueToNameMap[r] = name
}

func (r RevocationReasonCode) String() string {
	if s, ok := _RevocationReasonCodeValueToNameMap[r]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(r))
}

// Link Type Enumeration

// 9.1.3.2.20 Table 308
type LinkType uint32

const (
	LinkTypeCertificateLink          LinkType = 0x00000101
	LinkTypePublicKeyLink            LinkType = 0x00000102
	LinkTypePrivateKeyLink           LinkType = 0x00000103
	LinkTypeDerivationBaseObjectLink LinkType = 0x00000104
	LinkTypeDerivedKeyLink           LinkType = 0x00000105
	LinkTypeReplacementObjectLink    LinkType = 0x00000106
	LinkTypeReplacedObjectLink       LinkType = 0x00000107
	LinkTypeParentLink               LinkType = 0x00000108
	LinkTypeChildLink                LinkType = 0x00000109
	LinkTypePreviousLink             LinkType = 0x0000010a
	LinkTypeNextLink                 LinkType = 0x0000010b
	LinkTypePKCS_12CertificateLink   LinkType = 0x0000010c
	LinkTypePKCS_12PasswordLink      LinkType = 0x0000010d
)

var _LinkTypeNameToValueMap = map[string]LinkType{
	"CertificateLink":          LinkTypeCertificateLink,
	"PublicKeyLink":            LinkTypePublicKeyLink,
	"PrivateKeyLink":           LinkTypePrivateKeyLink,
	"DerivationBaseObjectLink": LinkTypeDerivationBaseObjectLink,
	"DerivedKeyLink":           LinkTypeDerivedKeyLink,
	"ReplacementObjectLink":    LinkTypeReplacementObjectLink,
	"ReplacedObjectLink":       LinkTypeReplacedObjectLink,
	"ParentLink":               LinkTypeParentLink,
	"ChildLink":                LinkTypeChildLink,
	"PreviousLink":             LinkTypePreviousLink,
	"NextLink":                 LinkTypeNextLink,
	"PKCS_12CertificateLink":   LinkTypePKCS_12CertificateLink,
	"PKCS_12PasswordLink":      LinkTypePKCS_12PasswordLink,
}

var _LinkTypeValueToNameMap = map[LinkType]string{
	LinkTypeCertificateLink:          "CertificateLink",
	LinkTypePublicKeyLink:            "PublicKeyLink",
	LinkTypePrivateKeyLink:           "PrivateKeyLink",
	LinkTypeDerivationBaseObjectLink: "DerivationBaseObjectLink",
	LinkTypeDerivedKeyLink:           "DerivedKeyLink",
	LinkTypeReplacementObjectLink:    "ReplacementObjectLink",
	LinkTypeReplacedObjectLink:       "ReplacedObjectLink",
	LinkTypeParentLink:               "ParentLink",
	LinkTypeChildLink:                "ChildLink",
	LinkTypePreviousLink:             "PreviousLink",
	LinkTypeNextLink:                 "NextLink",
	LinkTypePKCS_12CertificateLink:   "PKCS_12CertificateLink",
	LinkTypePKCS_12PasswordLink:      "PKCS_12PasswordLink",
}

func (l LinkType) MarshalText() (text []byte, err error) {
	return []byte(l.String()), nil
}

func init() {
	RegisterEnum(TagLinkType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _LinkTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return LinkType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return LinkType(v)
		},
	})
}

func (l LinkType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(l))
	return nil
}

func RegisterLinkType(l LinkType, name string) {
	name = NormalizeName(name)
	_LinkTypeNameToValueMap[name] = l
	_LinkTypeValueToNameMap[l] = name
}

func (l LinkType) String() string {
	if s, ok := _LinkTypeValueToNameMap[l]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(l))
}

// Derivation Method Enumeration

// 9.1.3.2.21 Table 309
type DerivationMethod uint32

const (
	DerivationMethodPBKDF2          DerivationMethod = 0x00000001
	DerivationMethodHASH            DerivationMethod = 0x00000002
	DerivationMethodHMAC            DerivationMethod = 0x00000003
	DerivationMethodENCRYPT         DerivationMethod = 0x00000004
	DerivationMethodNIST800_108_C   DerivationMethod = 0x00000005
	DerivationMethodNIST800_108_F   DerivationMethod = 0x00000006
	DerivationMethodNIST800_108_DPI DerivationMethod = 0x00000007
	DerivationMethodAsymmetricKey   DerivationMethod = 0x00000008
)

var _DerivationMethodNameToValueMap = map[string]DerivationMethod{
	"PBKDF2":          DerivationMethodPBKDF2,
	"HASH":            DerivationMethodHASH,
	"HMAC":            DerivationMethodHMAC,
	"ENCRYPT":         DerivationMethodENCRYPT,
	"NIST800_108_C":   DerivationMethodNIST800_108_C,
	"NIST800_108_F":   DerivationMethodNIST800_108_F,
	"NIST800_108_DPI": DerivationMethodNIST800_108_DPI,
	"AsymmetricKey":   DerivationMethodAsymmetricKey,
}

var _DerivationMethodValueToNameMap = map[DerivationMethod]string{
	DerivationMethodPBKDF2:          "PBKDF2",
	DerivationMethodHASH:            "HASH",
	DerivationMethodHMAC:            "HMAC",
	DerivationMethodENCRYPT:         "ENCRYPT",
	DerivationMethodNIST800_108_C:   "NIST800_108_C",
	DerivationMethodNIST800_108_F:   "NIST800_108_F",
	DerivationMethodNIST800_108_DPI: "NIST800_108_DPI",
	DerivationMethodAsymmetricKey:   "AsymmetricKey",
}

func (d DerivationMethod) MarshalText() (text []byte, err error) {
	return []byte(d.String()), nil
}

func init() {
	RegisterEnum(TagDerivationMethod, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _DerivationMethodNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return DerivationMethod(v).String()
		},
		Typed: func(v uint32) interface{} {
			return DerivationMethod(v)
		},
	})
}

func (d DerivationMethod) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(d))
	return nil
}

func RegisterDerivationMethod(d DerivationMethod, name string) {
	name = NormalizeName(name)
	_DerivationMethodNameToValueMap[name] = d
	_DerivationMethodValueToNameMap[d] = name
}

func (d DerivationMethod) String() string {
	if s, ok := _DerivationMethodValueToNameMap[d]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(d))
}

// Certificate Request Type Enumeration

// 9.1.3.2.22 Table 310
type CertificateRequestType uint32

const (
	CertificateRequestTypeCRMF    CertificateRequestType = 0x00000001
	CertificateRequestTypePKCS_10 CertificateRequestType = 0x00000002
	CertificateRequestTypePEM     CertificateRequestType = 0x00000003
	CertificateRequestTypePGP     CertificateRequestType = 0x00000004
)

var _CertificateRequestTypeNameToValueMap = map[string]CertificateRequestType{
	"CRMF":    CertificateRequestTypeCRMF,
	"PKCS_10": CertificateRequestTypePKCS_10,
	"PEM":     CertificateRequestTypePEM,
	"PGP":     CertificateRequestTypePGP,
}

var _CertificateRequestTypeValueToNameMap = map[CertificateRequestType]string{
	CertificateRequestTypeCRMF:    "CRMF",
	CertificateRequestTypePKCS_10: "PKCS_10",
	CertificateRequestTypePEM:     "PEM",
	CertificateRequestTypePGP:     "PGP",
}

func (c CertificateRequestType) MarshalText() (text []byte, err error) {
	return []byte(c.String()), nil
}

func init() {
	RegisterEnum(TagCertificateRequestType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _CertificateRequestTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return CertificateRequestType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return CertificateRequestType(v)
		},
	})
}

func (c CertificateRequestType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(c))
	return nil
}

func RegisterCertificateRequestType(c CertificateRequestType, name string) {
	name = NormalizeName(name)
	_CertificateRequestTypeNameToValueMap[name] = c
	_CertificateRequestTypeValueToNameMap[c] = name
}

func (c CertificateRequestType) String() string {
	if s, ok := _CertificateRequestTypeValueToNameMap[c]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(c))
}

// Validity Indicator Enumeration

// 9.1.3.2.23 Table 311
type ValidityIndicator uint32

const (
	ValidityIndicatorValid   ValidityIndicator = 0x00000001
	ValidityIndicatorInvalid ValidityIndicator = 0x00000002
	ValidityIndicatorUnknown ValidityIndicator = 0x00000003
)

var _ValidityIndicatorNameToValueMap = map[string]ValidityIndicator{
	"Valid":   ValidityIndicatorValid,
	"Invalid": ValidityIndicatorInvalid,
	"Unknown": ValidityIndicatorUnknown,
}

var _ValidityIndicatorValueToNameMap = map[ValidityIndicator]string{
	ValidityIndicatorValid:   "Valid",
	ValidityIndicatorInvalid: "Invalid",
	ValidityIndicatorUnknown: "Unknown",
}

func (v ValidityIndicator) MarshalText() (text []byte, err error) {
	return []byte(v.String()), nil
}

func init() {
	RegisterEnum(TagValidityIndicator, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _ValidityIndicatorNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return ValidityIndicator(v).String()
		},
		Typed: func(v uint32) interface{} {
			return ValidityIndicator(v)
		},
	})
}

func (v ValidityIndicator) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(v))
	return nil
}

func RegisterValidityIndicator(v ValidityIndicator, name string) {
	name = NormalizeName(name)
	_ValidityIndicatorNameToValueMap[name] = v
	_ValidityIndicatorValueToNameMap[v] = name
}

func (v ValidityIndicator) String() string {
	if s, ok := _ValidityIndicatorValueToNameMap[v]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(v))
}

// Query Function Enumeration

// 9.1.3.2.24 Table 312
type QueryFunction uint32

const (
	QueryFunctionQueryOperations                QueryFunction = 0x00000001
	QueryFunctionQueryObjects                   QueryFunction = 0x00000002
	QueryFunctionQueryServerInformation         QueryFunction = 0x00000003
	QueryFunctionQueryApplicationNamespaces     QueryFunction = 0x00000004
	QueryFunctionQueryExtensionList             QueryFunction = 0x00000005
	QueryFunctionQueryExtensionMap              QueryFunction = 0x00000006
	QueryFunctionQueryAttestationTypes          QueryFunction = 0x00000007
	QueryFunctionQueryRNGs                      QueryFunction = 0x00000008
	QueryFunctionQueryValidations               QueryFunction = 0x00000009
	QueryFunctionQueryProfiles                  QueryFunction = 0x0000000a
	QueryFunctionQueryCapabilities              QueryFunction = 0x0000000b
	QueryFunctionQueryClientRegistrationMethods QueryFunction = 0x0000000c
)

var _QueryFunctionNameToValueMap = map[string]QueryFunction{
	"QueryOperations":                QueryFunctionQueryOperations,
	"QueryObjects":                   QueryFunctionQueryObjects,
	"QueryServerInformation":         QueryFunctionQueryServerInformation,
	"QueryApplicationNamespaces":     QueryFunctionQueryApplicationNamespaces,
	"QueryExtensionList":             QueryFunctionQueryExtensionList,
	"QueryExtensionMap":              QueryFunctionQueryExtensionMap,
	"QueryAttestationTypes":          QueryFunctionQueryAttestationTypes,
	"QueryRNGs":                      QueryFunctionQueryRNGs,
	"QueryValidations":               QueryFunctionQueryValidations,
	"QueryProfiles":                  QueryFunctionQueryProfiles,
	"QueryCapabilities":              QueryFunctionQueryCapabilities,
	"QueryClientRegistrationMethods": QueryFunctionQueryClientRegistrationMethods,
}

var _QueryFunctionValueToNameMap = map[QueryFunction]string{
	QueryFunctionQueryOperations:                "QueryOperations",
	QueryFunctionQueryObjects:                   "QueryObjects",
	QueryFunctionQueryServerInformation:         "QueryServerInformation",
	QueryFunctionQueryApplicationNamespaces:     "QueryApplicationNamespaces",
	QueryFunctionQueryExtensionList:             "QueryExtensionList",
	QueryFunctionQueryExtensionMap:              "QueryExtensionMap",
	QueryFunctionQueryAttestationTypes:          "QueryAttestationTypes",
	QueryFunctionQueryRNGs:                      "QueryRNGs",
	QueryFunctionQueryValidations:               "QueryValidations",
	QueryFunctionQueryProfiles:                  "QueryProfiles",
	QueryFunctionQueryCapabilities:              "QueryCapabilities",
	QueryFunctionQueryClientRegistrationMethods: "QueryClientRegistrationMethods",
}

func (q QueryFunction) MarshalText() (text []byte, err error) {
	return []byte(q.String()), nil
}

func init() {
	RegisterEnum(TagQueryFunction, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _QueryFunctionNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return QueryFunction(v).String()
		},
		Typed: func(v uint32) interface{} {
			return QueryFunction(v)
		},
	})
}

func (q QueryFunction) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(q))
	return nil
}

func RegisterQueryFunction(q QueryFunction, name string) {
	name = NormalizeName(name)
	_QueryFunctionNameToValueMap[name] = q
	_QueryFunctionValueToNameMap[q] = name
}

func (q QueryFunction) String() string {
	if s, ok := _QueryFunctionValueToNameMap[q]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(q))
}

// Cancellation Result Enumeration

// 9.1.3.2.25 Table 313
type CancellationResult uint32

const (
	CancellationResultCanceled       CancellationResult = 0x00000001
	CancellationResultUnableToCancel CancellationResult = 0x00000002
	CancellationResultCompleted      CancellationResult = 0x00000003
	CancellationResultFailed         CancellationResult = 0x00000004
	CancellationResultUnavailable    CancellationResult = 0x00000005
)

var _CancellationResultNameToValueMap = map[string]CancellationResult{
	"Canceled":       CancellationResultCanceled,
	"UnableToCancel": CancellationResultUnableToCancel,
	"Completed":      CancellationResultCompleted,
	"Failed":         CancellationResultFailed,
	"Unavailable":    CancellationResultUnavailable,
}

var _CancellationResultValueToNameMap = map[CancellationResult]string{
	CancellationResultCanceled:       "Canceled",
	CancellationResultUnableToCancel: "UnableToCancel",
	CancellationResultCompleted:      "Completed",
	CancellationResultFailed:         "Failed",
	CancellationResultUnavailable:    "Unavailable",
}

func (c CancellationResult) MarshalText() (text []byte, err error) {
	return []byte(c.String()), nil
}

func init() {
	RegisterEnum(TagCancellationResult, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _CancellationResultNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return CancellationResult(v).String()
		},
		Typed: func(v uint32) interface{} {
			return CancellationResult(v)
		},
	})
}

func (c CancellationResult) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(c))
	return nil
}

func RegisterCancellationResult(c CancellationResult, name string) {
	name = NormalizeName(name)
	_CancellationResultNameToValueMap[name] = c
	_CancellationResultValueToNameMap[c] = name
}

func (c CancellationResult) String() string {
	if s, ok := _CancellationResultValueToNameMap[c]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(c))
}

// Put Function Enumeration

// 9.1.3.2.26 Table 314
type PutFunction uint32

const (
	PutFunctionNew     PutFunction = 0x00000001
	PutFunctionReplace PutFunction = 0x00000002
)

var _PutFunctionNameToValueMap = map[string]PutFunction{
	"New":     PutFunctionNew,
	"Replace": PutFunctionReplace,
}

var _PutFunctionValueToNameMap = map[PutFunction]string{
	PutFunctionNew:     "New",
	PutFunctionReplace: "Replace",
}

func (p PutFunction) MarshalText() (text []byte, err error) {
	return []byte(p.String()), nil
}

func init() {
	RegisterEnum(TagPutFunction, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _PutFunctionNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return PutFunction(v).String()
		},
		Typed: func(v uint32) interface{} {
			return PutFunction(v)
		},
	})
}

func (p PutFunction) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(p))
	return nil
}

func RegisterPutFunction(p PutFunction, name string) {
	name = NormalizeName(name)
	_PutFunctionNameToValueMap[name] = p
	_PutFunctionValueToNameMap[p] = name
}

func (p PutFunction) String() string {
	if s, ok := _PutFunctionValueToNameMap[p]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(p))
}

// Operation Enumeration

// 9.1.3.2.27 Table 315
type Operation uint32

const (
	OperationCreate             Operation = 0x00000001
	OperationCreateKeyPair      Operation = 0x00000002
	OperationRegister           Operation = 0x00000003
	OperationReKey              Operation = 0x00000004
	OperationDeriveKey          Operation = 0x00000005
	OperationCertify            Operation = 0x00000006
	OperationReCertify          Operation = 0x00000007
	OperationLocate             Operation = 0x00000008
	OperationCheck              Operation = 0x00000009
	OperationGet                Operation = 0x0000000a
	OperationGetAttributes      Operation = 0x0000000b
	OperationGetAttributeList   Operation = 0x0000000c
	OperationAddAttribute       Operation = 0x0000000d
	OperationModifyAttribute    Operation = 0x0000000e
	OperationDeleteAttribute    Operation = 0x0000000f
	OperationObtainLease        Operation = 0x00000010
	OperationGetUsageAllocation Operation = 0x00000011
	OperationActivate           Operation = 0x00000012
	OperationRevoke             Operation = 0x00000013
	OperationDestroy            Operation = 0x00000014
	OperationArchive            Operation = 0x00000015
	OperationRecover            Operation = 0x00000016
	OperationValidate           Operation = 0x00000017
	OperationQuery              Operation = 0x00000018
	OperationCancel             Operation = 0x00000019
	OperationPoll               Operation = 0x0000001a
	OperationNotify             Operation = 0x0000001b
	OperationPut                Operation = 0x0000001c
	OperationReKeyKeyPair       Operation = 0x0000001d
	OperationDiscoverVersions   Operation = 0x0000001e
	OperationEncrypt            Operation = 0x0000001f
	OperationDecrypt            Operation = 0x00000020
	OperationSign               Operation = 0x00000021
	OperationSignatureVerify    Operation = 0x00000022
	OperationMAC                Operation = 0x00000023
	OperationMACVerify          Operation = 0x00000024
	OperationRNGRetrieve        Operation = 0x00000025
	OperationRNGSeed            Operation = 0x00000026
	OperationHash               Operation = 0x00000027
	OperationCreateSplitKey     Operation = 0x00000028
	OperationJoinSplitKey       Operation = 0x00000029
	OperationImport             Operation = 0x0000002a
	OperationExport             Operation = 0x0000002b
)

var _OperationNameToValueMap = map[string]Operation{
	"Create":             OperationCreate,
	"CreateKeyPair":      OperationCreateKeyPair,
	"Register":           OperationRegister,
	"ReKey":              OperationReKey,
	"DeriveKey":          OperationDeriveKey,
	"Certify":            OperationCertify,
	"ReCertify":          OperationReCertify,
	"Locate":             OperationLocate,
	"Check":              OperationCheck,
	"Get":                OperationGet,
	"GetAttributes":      OperationGetAttributes,
	"GetAttributeList":   OperationGetAttributeList,
	"AddAttribute":       OperationAddAttribute,
	"ModifyAttribute":    OperationModifyAttribute,
	"DeleteAttribute":    OperationDeleteAttribute,
	"ObtainLease":        OperationObtainLease,
	"GetUsageAllocation": OperationGetUsageAllocation,
	"Activate":           OperationActivate,
	"Revoke":             OperationRevoke,
	"Destroy":            OperationDestroy,
	"Archive":            OperationArchive,
	"Recover":            OperationRecover,
	"Validate":           OperationValidate,
	"Query":              OperationQuery,
	"Cancel":             OperationCancel,
	"Poll":               OperationPoll,
	"Notify":             OperationNotify,
	"Put":                OperationPut,
	"ReKeyKeyPair":       OperationReKeyKeyPair,
	"DiscoverVersions":   OperationDiscoverVersions,
	"Encrypt":            OperationEncrypt,
	"Decrypt":            OperationDecrypt,
	"Sign":               OperationSign,
	"SignatureVerify":    OperationSignatureVerify,
	"MAC":                OperationMAC,
	"MACVerify":          OperationMACVerify,
	"RNGRetrieve":        OperationRNGRetrieve,
	"RNGSeed":            OperationRNGSeed,
	"Hash":               OperationHash,
	"CreateSplitKey":     OperationCreateSplitKey,
	"JoinSplitKey":       OperationJoinSplitKey,
	"Import":             OperationImport,
	"Export":             OperationExport,
}

var _OperationValueToNameMap = map[Operation]string{
	OperationCreate:             "Create",
	OperationCreateKeyPair:      "CreateKeyPair",
	OperationRegister:           "Register",
	OperationReKey:              "ReKey",
	OperationDeriveKey:          "DeriveKey",
	OperationCertify:            "Certify",
	OperationReCertify:          "ReCertify",
	OperationLocate:             "Locate",
	OperationCheck:              "Check",
	OperationGet:                "Get",
	OperationGetAttributes:      "GetAttributes",
	OperationGetAttributeList:   "GetAttributeList",
	OperationAddAttribute:       "AddAttribute",
	OperationModifyAttribute:    "ModifyAttribute",
	OperationDeleteAttribute:    "DeleteAttribute",
	OperationObtainLease:        "ObtainLease",
	OperationGetUsageAllocation: "GetUsageAllocation",
	OperationActivate:           "Activate",
	OperationRevoke:             "Revoke",
	OperationDestroy:            "Destroy",
	OperationArchive:            "Archive",
	OperationRecover:            "Recover",
	OperationValidate:           "Validate",
	OperationQuery:              "Query",
	OperationCancel:             "Cancel",
	OperationPoll:               "Poll",
	OperationNotify:             "Notify",
	OperationPut:                "Put",
	OperationReKeyKeyPair:       "ReKeyKeyPair",
	OperationDiscoverVersions:   "DiscoverVersions",
	OperationEncrypt:            "Encrypt",
	OperationDecrypt:            "Decrypt",
	OperationSign:               "Sign",
	OperationSignatureVerify:    "SignatureVerify",
	OperationMAC:                "MAC",
	OperationMACVerify:          "MACVerify",
	OperationRNGRetrieve:        "RNGRetrieve",
	OperationRNGSeed:            "RNGSeed",
	OperationHash:               "Hash",
	OperationCreateSplitKey:     "CreateSplitKey",
	OperationJoinSplitKey:       "JoinSplitKey",
	OperationImport:             "Import",
	OperationExport:             "Export",
}

func (o Operation) MarshalText() (text []byte, err error) {
	return []byte(o.String()), nil
}

func init() {
	RegisterEnum(TagOperation, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _OperationNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return Operation(v).String()
		},
		Typed: func(v uint32) interface{} {
			return Operation(v)
		},
	})
}

func (o Operation) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(o))
	return nil
}

func RegisterOperation(o Operation, name string) {
	name = NormalizeName(name)
	_OperationNameToValueMap[name] = o
	_OperationValueToNameMap[o] = name
}

func (o Operation) String() string {
	if s, ok := _OperationValueToNameMap[o]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(o))
}

// Result Status Enumeration

// 9.1.3.2.28 Table 316
type ResultStatus uint32

const (
	ResultStatusSuccess          ResultStatus = 0x00000000
	ResultStatusOperationFailed  ResultStatus = 0x00000001
	ResultStatusOperationPending ResultStatus = 0x00000002
	ResultStatusOperationUndone  ResultStatus = 0x00000003
)

var _ResultStatusNameToValueMap = map[string]ResultStatus{
	"Success":          ResultStatusSuccess,
	"OperationFailed":  ResultStatusOperationFailed,
	"OperationPending": ResultStatusOperationPending,
	"OperationUndone":  ResultStatusOperationUndone,
}

var _ResultStatusValueToNameMap = map[ResultStatus]string{
	ResultStatusSuccess:          "Success",
	ResultStatusOperationFailed:  "OperationFailed",
	ResultStatusOperationPending: "OperationPending",
	ResultStatusOperationUndone:  "OperationUndone",
}

func (r ResultStatus) MarshalText() (text []byte, err error) {
	return []byte(r.String()), nil
}

func init() {
	RegisterEnum(TagResultStatus, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _ResultStatusNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return ResultStatus(v).String()
		},
		Typed: func(v uint32) interface{} {
			return ResultStatus(v)
		},
	})
}

func (r ResultStatus) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(r))
	return nil
}

func RegisterResultStatus(r ResultStatus, name string) {
	name = NormalizeName(name)
	_ResultStatusNameToValueMap[name] = r
	_ResultStatusValueToNameMap[r] = name
}

func (r ResultStatus) String() string {
	if s, ok := _ResultStatusValueToNameMap[r]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(r))
}

// Result Reason Enumeration

// 9.1.3.2.29 Table 317
type ResultReason uint32

const (
	ResultReasonItemNotFound                     ResultReason = 0x00000001
	ResultReasonResponseTooLarge                 ResultReason = 0x00000002
	ResultReasonAuthenticationNotSuccessful      ResultReason = 0x00000003
	ResultReasonInvalidMessage                   ResultReason = 0x00000004
	ResultReasonOperationNotSupported            ResultReason = 0x00000005
	ResultReasonMissingData                      ResultReason = 0x00000006
	ResultReasonInvalidField                     ResultReason = 0x00000007
	ResultReasonFeatureNotSupported              ResultReason = 0x00000008
	ResultReasonOperationCanceledByRequester     ResultReason = 0x00000009
	ResultReasonCryptographicFailure             ResultReason = 0x0000000a
	ResultReasonIllegalOperation                 ResultReason = 0x0000000b
	ResultReasonPermissionDenied                 ResultReason = 0x0000000c
	ResultReasonObjectArchived                   ResultReason = 0x0000000d
	ResultReasonIndexOutOfBounds                 ResultReason = 0x0000000e
	ResultReasonApplicationNamespaceNotSupported ResultReason = 0x0000000f
	ResultReasonKeyFormatTypeNotSupported        ResultReason = 0x00000010
	ResultReasonKeyCompressionTypeNotSupported   ResultReason = 0x00000011
	ResultReasonEncodingOptionError              ResultReason = 0x00000012
	ResultReasonKeyValueNotPresent               ResultReason = 0x00000013
	ResultReasonAttestationRequired              ResultReason = 0x00000014
	ResultReasonAttestationFailed                ResultReason = 0x00000015
	ResultReasonSensitive                        ResultReason = 0x00000016
	ResultReasonNotExtractable                   ResultReason = 0x00000017
	ResultReasonObjectAlreadyExists              ResultReason = 0x00000018
	ResultReasonGeneralFailure                   ResultReason = 0x00000100
)

var _ResultReasonNameToValueMap = map[string]ResultReason{
	"ItemNotFound":                     ResultReasonItemNotFound,
	"ResponseTooLarge":                 ResultReasonResponseTooLarge,
	"AuthenticationNotSuccessful":      ResultReasonAuthenticationNotSuccessful,
	"InvalidMessage":                   ResultReasonInvalidMessage,
	"OperationNotSupported":            ResultReasonOperationNotSupported,
	"MissingData":                      ResultReasonMissingData,
	"InvalidField":                     ResultReasonInvalidField,
	"FeatureNotSupported":              ResultReasonFeatureNotSupported,
	"OperationCanceledByRequester":     ResultReasonOperationCanceledByRequester,
	"CryptographicFailure":             ResultReasonCryptographicFailure,
	"IllegalOperation":                 ResultReasonIllegalOperation,
	"PermissionDenied":                 ResultReasonPermissionDenied,
	"ObjectArchived":                   ResultReasonObjectArchived,
	"IndexOutOfBounds":                 ResultReasonIndexOutOfBounds,
	"ApplicationNamespaceNotSupported": ResultReasonApplicationNamespaceNotSupported,
	"KeyFormatTypeNotSupported":        ResultReasonKeyFormatTypeNotSupported,
	"KeyCompressionTypeNotSupported":   ResultReasonKeyCompressionTypeNotSupported,
	"EncodingOptionError":              ResultReasonEncodingOptionError,
	"KeyValueNotPresent":               ResultReasonKeyValueNotPresent,
	"AttestationRequired":              ResultReasonAttestationRequired,
	"AttestationFailed":                ResultReasonAttestationFailed,
	"Sensitive":                        ResultReasonSensitive,
	"NotExtractable":                   ResultReasonNotExtractable,
	"ObjectAlreadyExists":              ResultReasonObjectAlreadyExists,
	"GeneralFailure":                   ResultReasonGeneralFailure,
}

var _ResultReasonValueToNameMap = map[ResultReason]string{
	ResultReasonItemNotFound:                     "ItemNotFound",
	ResultReasonResponseTooLarge:                 "ResponseTooLarge",
	ResultReasonAuthenticationNotSuccessful:      "AuthenticationNotSuccessful",
	ResultReasonInvalidMessage:                   "InvalidMessage",
	ResultReasonOperationNotSupported:            "OperationNotSupported",
	ResultReasonMissingData:                      "MissingData",
	ResultReasonInvalidField:                     "InvalidField",
	ResultReasonFeatureNotSupported:              "FeatureNotSupported",
	ResultReasonOperationCanceledByRequester:     "OperationCanceledByRequester",
	ResultReasonCryptographicFailure:             "CryptographicFailure",
	ResultReasonIllegalOperation:                 "IllegalOperation",
	ResultReasonPermissionDenied:                 "PermissionDenied",
	ResultReasonObjectArchived:                   "ObjectArchived",
	ResultReasonIndexOutOfBounds:                 "IndexOutOfBounds",
	ResultReasonApplicationNamespaceNotSupported: "ApplicationNamespaceNotSupported",
	ResultReasonKeyFormatTypeNotSupported:        "KeyFormatTypeNotSupported",
	ResultReasonKeyCompressionTypeNotSupported:   "KeyCompressionTypeNotSupported",
	ResultReasonEncodingOptionError:              "EncodingOptionError",
	ResultReasonKeyValueNotPresent:               "KeyValueNotPresent",
	ResultReasonAttestationRequired:              "AttestationRequired",
	ResultReasonAttestationFailed:                "AttestationFailed",
	ResultReasonSensitive:                        "Sensitive",
	ResultReasonNotExtractable:                   "NotExtractable",
	ResultReasonObjectAlreadyExists:              "ObjectAlreadyExists",
	ResultReasonGeneralFailure:                   "GeneralFailure",
}

func (r ResultReason) MarshalText() (text []byte, err error) {
	return []byte(r.String()), nil
}

func init() {
	RegisterEnum(TagResultReason, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _ResultReasonNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return ResultReason(v).String()
		},
		Typed: func(v uint32) interface{} {
			return ResultReason(v)
		},
	})
}

func (r ResultReason) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(r))
	return nil
}

func RegisterResultReason(r ResultReason, name string) {
	name = NormalizeName(name)
	_ResultReasonNameToValueMap[name] = r
	_ResultReasonValueToNameMap[r] = name
}

func (r ResultReason) String() string {
	if s, ok := _ResultReasonValueToNameMap[r]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(r))
}

// Batch Error Continuation Option Enumeration

// 9.1.3.2.30 Table 318
type BatchErrorContinuationOption uint32

const (
	BatchErrorContinuationOptionContinue BatchErrorContinuationOption = 0x00000001
	BatchErrorContinuationOptionStop     BatchErrorContinuationOption = 0x00000002
	BatchErrorContinuationOptionUndo     BatchErrorContinuationOption = 0x00000003
)

var _BatchErrorContinuationOptionNameToValueMap = map[string]BatchErrorContinuationOption{
	"Continue": BatchErrorContinuationOptionContinue,
	"Stop":     BatchErrorContinuationOptionStop,
	"Undo":     BatchErrorContinuationOptionUndo,
}

var _BatchErrorContinuationOptionValueToNameMap = map[BatchErrorContinuationOption]string{
	BatchErrorContinuationOptionContinue: "Continue",
	BatchErrorContinuationOptionStop:     "Stop",
	BatchErrorContinuationOptionUndo:     "Undo",
}

func (b BatchErrorContinuationOption) MarshalText() (text []byte, err error) {
	return []byte(b.String()), nil
}

func init() {
	RegisterEnum(TagBatchErrorContinuationOption, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _BatchErrorContinuationOptionNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return BatchErrorContinuationOption(v).String()
		},
		Typed: func(v uint32) interface{} {
			return BatchErrorContinuationOption(v)
		},
	})
}

func (b BatchErrorContinuationOption) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(b))
	return nil
}

func RegisterBatchErrorContinuationOption(b BatchErrorContinuationOption, name string) {
	name = NormalizeName(name)
	_BatchErrorContinuationOptionNameToValueMap[name] = b
	_BatchErrorContinuationOptionValueToNameMap[b] = name
}

func (b BatchErrorContinuationOption) String() string {
	if s, ok := _BatchErrorContinuationOptionValueToNameMap[b]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(b))
}

// Usage Limits Unit Enumeration

// 9.1.3.2.31 Table 319
type UsageLimitsUnit uint32

const (
	UsageLimitsUnitByte   UsageLimitsUnit = 0x00000001
	UsageLimitsUnitObject UsageLimitsUnit = 0x00000002
)

var _UsageLimitsUnitNameToValueMap = map[string]UsageLimitsUnit{
	"Byte":   UsageLimitsUnitByte,
	"Object": UsageLimitsUnitObject,
}

var _UsageLimitsUnitValueToNameMap = map[UsageLimitsUnit]string{
	UsageLimitsUnitByte:   "Byte",
	UsageLimitsUnitObject: "Object",
}

func (u UsageLimitsUnit) MarshalText() (text []byte, err error) {
	return []byte(u.String()), nil
}

func init() {
	RegisterEnum(TagUsageLimitsUnit, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _UsageLimitsUnitNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return UsageLimitsUnit(v).String()
		},
		Typed: func(v uint32) interface{} {
			return UsageLimitsUnit(v)
		},
	})
}

func (u UsageLimitsUnit) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(u))
	return nil
}

func RegisterUsageLimitsUnit(u UsageLimitsUnit, name string) {
	name = NormalizeName(name)
	_UsageLimitsUnitNameToValueMap[name] = u
	_UsageLimitsUnitValueToNameMap[u] = name
}

func (u UsageLimitsUnit) String() string {
	if s, ok := _UsageLimitsUnitValueToNameMap[u]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(u))
}

// Encoding Option Enumeration

// 9.1.3.2.32 Table 320
type EncodingOption uint32

const (
	EncodingOptionNoEncoding   EncodingOption = 0x00000001
	EncodingOptionTTLVEncoding EncodingOption = 0x00000002
)

var _EncodingOptionNameToValueMap = map[string]EncodingOption{
	"NoEncoding":   EncodingOptionNoEncoding,
	"TTLVEncoding": EncodingOptionTTLVEncoding,
}

var _EncodingOptionValueToNameMap = map[EncodingOption]string{
	EncodingOptionNoEncoding:   "NoEncoding",
	EncodingOptionTTLVEncoding: "TTLVEncoding",
}

func (e EncodingOption) MarshalText() (text []byte, err error) {
	return []byte(e.String()), nil
}

func init() {
	RegisterEnum(TagEncodingOption, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _EncodingOptionNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return EncodingOption(v).String()
		},
		Typed: func(v uint32) interface{} {
			return EncodingOption(v)
		},
	})
}

func (e EncodingOption) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(e))
	return nil
}

func RegisterEncodingOption(e EncodingOption, name string) {
	name = NormalizeName(name)
	_EncodingOptionNameToValueMap[name] = e
	_EncodingOptionValueToNameMap[e] = name
}

func (e EncodingOption) String() string {
	if s, ok := _EncodingOptionValueToNameMap[e]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(e))
}

// Object Group Member Enumeration

// 9.1.3.2.33 Table 321
type ObjectGroupMember uint32

const (
	ObjectGroupMemberGroupMemberFresh   ObjectGroupMember = 0x00000001
	ObjectGroupMemberGroupMemberDefault ObjectGroupMember = 0x00000002
)

var _ObjectGroupMemberNameToValueMap = map[string]ObjectGroupMember{
	"GroupMemberFresh":   ObjectGroupMemberGroupMemberFresh,
	"GroupMemberDefault": ObjectGroupMemberGroupMemberDefault,
}

var _ObjectGroupMemberValueToNameMap = map[ObjectGroupMember]string{
	ObjectGroupMemberGroupMemberFresh:   "GroupMemberFresh",
	ObjectGroupMemberGroupMemberDefault: "GroupMemberDefault",
}

func (o ObjectGroupMember) MarshalText() (text []byte, err error) {
	return []byte(o.String()), nil
}

func init() {
	RegisterEnum(TagObjectGroupMember, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _ObjectGroupMemberNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return ObjectGroupMember(v).String()
		},
		Typed: func(v uint32) interface{} {
			return ObjectGroupMember(v)
		},
	})
}

func (o ObjectGroupMember) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(o))
	return nil
}

func RegisterObjectGroupMember(o ObjectGroupMember, name string) {
	name = NormalizeName(name)
	_ObjectGroupMemberNameToValueMap[name] = o
	_ObjectGroupMemberValueToNameMap[o] = name
}

func (o ObjectGroupMember) String() string {
	if s, ok := _ObjectGroupMemberValueToNameMap[o]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(o))
}

// Alternative Name Type Enumeration

// 9.1.3.2.34 Table 322
type AlternativeNameType uint32

const (
	AlternativeNameTypeUninterpretedTextString AlternativeNameType = 0x00000001
	AlternativeNameTypeURI                     AlternativeNameType = 0x00000002
	AlternativeNameTypeObjectSerialNumber      AlternativeNameType = 0x00000003
	AlternativeNameTypeEmailAddress            AlternativeNameType = 0x00000004
	AlternativeNameTypeDNSName                 AlternativeNameType = 0x00000005
	AlternativeNameTypeX_500DistinguishedName  AlternativeNameType = 0x00000006
	AlternativeNameTypeIPAddress               AlternativeNameType = 0x00000007
)

var _AlternativeNameTypeNameToValueMap = map[string]AlternativeNameType{
	"UninterpretedTextString": AlternativeNameTypeUninterpretedTextString,
	"URI":                     AlternativeNameTypeURI,
	"ObjectSerialNumber":      AlternativeNameTypeObjectSerialNumber,
	"EmailAddress":            AlternativeNameTypeEmailAddress,
	"DNSName":                 AlternativeNameTypeDNSName,
	"X_500DistinguishedName":  AlternativeNameTypeX_500DistinguishedName,
	"IPAddress":               AlternativeNameTypeIPAddress,
}

var _AlternativeNameTypeValueToNameMap = map[AlternativeNameType]string{
	AlternativeNameTypeUninterpretedTextString: "UninterpretedTextString",
	AlternativeNameTypeURI:                     "URI",
	AlternativeNameTypeObjectSerialNumber:      "ObjectSerialNumber",
	AlternativeNameTypeEmailAddress:            "EmailAddress",
	AlternativeNameTypeDNSName:                 "DNSName",
	AlternativeNameTypeX_500DistinguishedName:  "X_500DistinguishedName",
	AlternativeNameTypeIPAddress:               "IPAddress",
}

func (a AlternativeNameType) MarshalText() (text []byte, err error) {
	return []byte(a.String()), nil
}

func init() {
	RegisterEnum(TagAlternativeNameType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _AlternativeNameTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return AlternativeNameType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return AlternativeNameType(v)
		},
	})
}

func (a AlternativeNameType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(a))
	return nil
}

func RegisterAlternativeNameType(a AlternativeNameType, name string) {
	name = NormalizeName(name)
	_AlternativeNameTypeNameToValueMap[name] = a
	_AlternativeNameTypeValueToNameMap[a] = name
}

func (a AlternativeNameType) String() string {
	if s, ok := _AlternativeNameTypeValueToNameMap[a]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(a))
}

// Key Value Location Type Enumeration

// 9.1.3.2.35 Table 323
type KeyValueLocationType uint32

const (
	KeyValueLocationTypeUninterpretedTextString KeyValueLocationType = 0x00000001
	KeyValueLocationTypeURI                     KeyValueLocationType = 0x00000002
)

var _KeyValueLocationTypeNameToValueMap = map[string]KeyValueLocationType{
	"UninterpretedTextString": KeyValueLocationTypeUninterpretedTextString,
	"URI":                     KeyValueLocationTypeURI,
}

var _KeyValueLocationTypeValueToNameMap = map[KeyValueLocationType]string{
	KeyValueLocationTypeUninterpretedTextString: "UninterpretedTextString",
	KeyValueLocationTypeURI:                     "URI",
}

func (k KeyValueLocationType) MarshalText() (text []byte, err error) {
	return []byte(k.String()), nil
}

func init() {
	RegisterEnum(TagKeyValueLocationType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _KeyValueLocationTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return KeyValueLocationType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return KeyValueLocationType(v)
		},
	})
}

func (k KeyValueLocationType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(k))
	return nil
}

func RegisterKeyValueLocationType(k KeyValueLocationType, name string) {
	name = NormalizeName(name)
	_KeyValueLocationTypeNameToValueMap[name] = k
	_KeyValueLocationTypeValueToNameMap[k] = name
}

func (k KeyValueLocationType) String() string {
	if s, ok := _KeyValueLocationTypeValueToNameMap[k]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(k))
}

// Attestation Type Enumeration

// 9.1.3.2.36 Table 324
type AttestationType uint32

const (
	AttestationTypeTPMQuote           AttestationType = 0x00000001
	AttestationTypeTCGIntegrityReport AttestationType = 0x00000002
	AttestationTypeSAMLAssertion      AttestationType = 0x00000003
)

var _AttestationTypeNameToValueMap = map[string]AttestationType{
	"TPMQuote":           AttestationTypeTPMQuote,
	"TCGIntegrityReport": AttestationTypeTCGIntegrityReport,
	"SAMLAssertion":      AttestationTypeSAMLAssertion,
}

var _AttestationTypeValueToNameMap = map[AttestationType]string{
	AttestationTypeTPMQuote:           "TPMQuote",
	AttestationTypeTCGIntegrityReport: "TCGIntegrityReport",
	AttestationTypeSAMLAssertion:      "SAMLAssertion",
}

func (a AttestationType) MarshalText() (text []byte, err error) {
	return []byte(a.String()), nil
}

func init() {
	RegisterEnum(TagAttestationType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _AttestationTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return AttestationType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return AttestationType(v)
		},
	})
}

func (a AttestationType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(a))
	return nil
}

func RegisterAttestationType(a AttestationType, name string) {
	name = NormalizeName(name)
	_AttestationTypeNameToValueMap[name] = a
	_AttestationTypeValueToNameMap[a] = name
}

func (a AttestationType) String() string {
	if s, ok := _AttestationTypeValueToNameMap[a]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(a))
}

// RNG Algorithm Enumeration

// 9.1.3.2.37 Table
type RNGAlgorithm uint32

const (
	RNGAlgorithmUnspecified RNGAlgorithm = 0x00000001
	RNGAlgorithmFIPS186_2   RNGAlgorithm = 0x00000002
	RNGAlgorithmDRBG        RNGAlgorithm = 0x00000003
	RNGAlgorithmNRBG        RNGAlgorithm = 0x00000004
	RNGAlgorithmANSIX9_31   RNGAlgorithm = 0x00000005
	RNGAlgorithmANSIX9_62   RNGAlgorithm = 0x00000006
)

var _RNGAlgorithmNameToValueMap = map[string]RNGAlgorithm{
	"Unspecified": RNGAlgorithmUnspecified,
	"FIPS186_2":   RNGAlgorithmFIPS186_2,
	"DRBG":        RNGAlgorithmDRBG,
	"NRBG":        RNGAlgorithmNRBG,
	"ANSIX9_31":   RNGAlgorithmANSIX9_31,
	"ANSIX9_62":   RNGAlgorithmANSIX9_62,
}

var _RNGAlgorithmValueToNameMap = map[RNGAlgorithm]string{
	RNGAlgorithmUnspecified: "Unspecified",
	RNGAlgorithmFIPS186_2:   "FIPS186_2",
	RNGAlgorithmDRBG:        "DRBG",
	RNGAlgorithmNRBG:        "NRBG",
	RNGAlgorithmANSIX9_31:   "ANSIX9_31",
	RNGAlgorithmANSIX9_62:   "ANSIX9_62",
}

func (r RNGAlgorithm) MarshalText() (text []byte, err error) {
	return []byte(r.String()), nil
}

func init() {
	RegisterEnum(TagRNGAlgorithm, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _RNGAlgorithmNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return RNGAlgorithm(v).String()
		},
		Typed: func(v uint32) interface{} {
			return RNGAlgorithm(v)
		},
	})
}

func (r RNGAlgorithm) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(r))
	return nil
}

func RegisterRNGAlgorithm(r RNGAlgorithm, name string) {
	name = NormalizeName(name)
	_RNGAlgorithmNameToValueMap[name] = r
	_RNGAlgorithmValueToNameMap[r] = name
}

func (r RNGAlgorithm) String() string {
	if s, ok := _RNGAlgorithmValueToNameMap[r]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(r))
}

// DRBG Algorithm Enumeration

// 9.1.3.2.38
type DRBGAlgorithm uint32

const (
	DRBGAlgorithmUnspecified DRBGAlgorithm = 0x00000001
	DRBGAlgorithmDual_EC     DRBGAlgorithm = 0x00000002
	DRBGAlgorithmHash        DRBGAlgorithm = 0x00000003
	DRBGAlgorithmHMAC        DRBGAlgorithm = 0x00000004
	DRBGAlgorithmCTR         DRBGAlgorithm = 0x00000005
)

var _DRBGAlgorithmNameToValueMap = map[string]DRBGAlgorithm{
	"Unspecified": DRBGAlgorithmUnspecified,
	"Dual_EC":     DRBGAlgorithmDual_EC,
	"Hash":        DRBGAlgorithmHash,
	"HMAC":        DRBGAlgorithmHMAC,
	"CTR":         DRBGAlgorithmCTR,
}

var _DRBGAlgorithmValueToNameMap = map[DRBGAlgorithm]string{
	DRBGAlgorithmUnspecified: "Unspecified",
	DRBGAlgorithmDual_EC:     "Dual_EC",
	DRBGAlgorithmHash:        "Hash",
	DRBGAlgorithmHMAC:        "HMAC",
	DRBGAlgorithmCTR:         "CTR",
}

func (d DRBGAlgorithm) MarshalText() (text []byte, err error) {
	return []byte(d.String()), nil
}

func init() {
	RegisterEnum(TagDRBGAlgorithm, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _DRBGAlgorithmNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return DRBGAlgorithm(v).String()
		},
		Typed: func(v uint32) interface{} {
			return DRBGAlgorithm(v)
		},
	})
}

func (d DRBGAlgorithm) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(d))
	return nil
}

func RegisterDRBGAlgorithm(d DRBGAlgorithm, name string) {
	name = NormalizeName(name)
	_DRBGAlgorithmNameToValueMap[name] = d
	_DRBGAlgorithmValueToNameMap[d] = name
}

func (d DRBGAlgorithm) String() string {
	if s, ok := _DRBGAlgorithmValueToNameMap[d]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(d))
}

// FIPS186 Variation Enumeration

// 9.1.3.2.39
type FIPS186Variation uint32

const (
	FIPS186VariationUnspecified     FIPS186Variation = 0x00000001
	FIPS186VariationGPXOriginal     FIPS186Variation = 0x00000002
	FIPS186VariationGPXChangeNotice FIPS186Variation = 0x00000003
	FIPS186VariationXOriginal       FIPS186Variation = 0x00000004
	FIPS186VariationXChangeNotice   FIPS186Variation = 0x00000005
	FIPS186VariationKOriginal       FIPS186Variation = 0x00000006
	FIPS186VariationKChangeNotice   FIPS186Variation = 0x00000007
)

var _FIPS186VariationNameToValueMap = map[string]FIPS186Variation{
	"Unspecified":     FIPS186VariationUnspecified,
	"GPXOriginal":     FIPS186VariationGPXOriginal,
	"GPXChangeNotice": FIPS186VariationGPXChangeNotice,
	"XOriginal":       FIPS186VariationXOriginal,
	"XChangeNotice":   FIPS186VariationXChangeNotice,
	"KOriginal":       FIPS186VariationKOriginal,
	"KChangeNotice":   FIPS186VariationKChangeNotice,
}

var _FIPS186VariationValueToNameMap = map[FIPS186Variation]string{
	FIPS186VariationUnspecified:     "Unspecified",
	FIPS186VariationGPXOriginal:     "GPXOriginal",
	FIPS186VariationGPXChangeNotice: "GPXChangeNotice",
	FIPS186VariationXOriginal:       "XOriginal",
	FIPS186VariationXChangeNotice:   "XChangeNotice",
	FIPS186VariationKOriginal:       "KOriginal",
	FIPS186VariationKChangeNotice:   "KChangeNotice",
}

func (f FIPS186Variation) MarshalText() (text []byte, err error) {
	return []byte(f.String()), nil
}

func init() {
	RegisterEnum(TagFIPS186Variation, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _FIPS186VariationNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return FIPS186Variation(v).String()
		},
		Typed: func(v uint32) interface{} {
			return FIPS186Variation(v)
		},
	})
}

func (f FIPS186Variation) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(f))
	return nil
}

func RegisterFIPS186Variation(f FIPS186Variation, name string) {
	name = NormalizeName(name)
	_FIPS186VariationNameToValueMap[name] = f
	_FIPS186VariationValueToNameMap[f] = name
}

func (f FIPS186Variation) String() string {
	if s, ok := _FIPS186VariationValueToNameMap[f]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(f))
}

// Validation Authority Type Enumeration

// 9.1.3.2.40
type ValidationAuthorityType uint32

const (
	ValidationAuthorityTypeUnspecified    ValidationAuthorityType = 0x00000001
	ValidationAuthorityTypeNISTCMVP       ValidationAuthorityType = 0x00000002
	ValidationAuthorityTypeCommonCriteria ValidationAuthorityType = 0x00000003
)

var _ValidationAuthorityTypeNameToValueMap = map[string]ValidationAuthorityType{
	"Unspecified":    ValidationAuthorityTypeUnspecified,
	"NISTCMVP":       ValidationAuthorityTypeNISTCMVP,
	"CommonCriteria": ValidationAuthorityTypeCommonCriteria,
}

var _ValidationAuthorityTypeValueToNameMap = map[ValidationAuthorityType]string{
	ValidationAuthorityTypeUnspecified:    "Unspecified",
	ValidationAuthorityTypeNISTCMVP:       "NISTCMVP",
	ValidationAuthorityTypeCommonCriteria: "CommonCriteria",
}

func (v ValidationAuthorityType) MarshalText() (text []byte, err error) {
	return []byte(v.String()), nil
}

func init() {
	RegisterEnum(TagValidationAuthorityType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _ValidationAuthorityTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return ValidationAuthorityType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return ValidationAuthorityType(v)
		},
	})
}

func (v ValidationAuthorityType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(v))
	return nil
}

func RegisterValidationAuthorityType(v ValidationAuthorityType, name string) {
	name = NormalizeName(name)
	_ValidationAuthorityTypeNameToValueMap[name] = v
	_ValidationAuthorityTypeValueToNameMap[v] = name
}

func (v ValidationAuthorityType) String() string {
	if s, ok := _ValidationAuthorityTypeValueToNameMap[v]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(v))
}

// Validation Type Enumeration

// 9.1.3.2.41
type ValidationType uint32

const (
	ValidationTypeUnspecified ValidationType = 0x00000001
	ValidationTypeHardware    ValidationType = 0x00000002
	ValidationTypeSoftware    ValidationType = 0x00000003
	ValidationTypeFirmware    ValidationType = 0x00000004
	ValidationTypeHybrid      ValidationType = 0x00000005
)

var _ValidationTypeNameToValueMap = map[string]ValidationType{
	"Unspecified": ValidationTypeUnspecified,
	"Hardware":    ValidationTypeHardware,
	"Software":    ValidationTypeSoftware,
	"Firmware":    ValidationTypeFirmware,
	"Hybrid":      ValidationTypeHybrid,
}

var _ValidationTypeValueToNameMap = map[ValidationType]string{
	ValidationTypeUnspecified: "Unspecified",
	ValidationTypeHardware:    "Hardware",
	ValidationTypeSoftware:    "Software",
	ValidationTypeFirmware:    "Firmware",
	ValidationTypeHybrid:      "Hybrid",
}

func (v ValidationType) MarshalText() (text []byte, err error) {
	return []byte(v.String()), nil
}

func init() {
	RegisterEnum(TagValidationType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _ValidationTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return ValidationType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return ValidationType(v)
		},
	})
}

func (v ValidationType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(v))
	return nil
}

func RegisterValidationType(v ValidationType, name string) {
	name = NormalizeName(name)
	_ValidationTypeNameToValueMap[name] = v
	_ValidationTypeValueToNameMap[v] = name
}

func (v ValidationType) String() string {
	if s, ok := _ValidationTypeValueToNameMap[v]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(v))
}

// Profile Name Enumeration

// 9.1.3.2.42
type ProfileName uint32

const (
	ProfileNameBaselineServerBasicKMIPV1_2                       ProfileName = 0x00000001
	ProfileNameBaselineServerTLSV1_2KMIPV1_2                     ProfileName = 0x00000002
	ProfileNameBaselineClientBasicKMIPV1_2                       ProfileName = 0x00000003
	ProfileNameBaselineClientTLSV1_2KMIPV1_2                     ProfileName = 0x00000004
	ProfileNameCompleteServerBasicKMIPV1_2                       ProfileName = 0x00000005
	ProfileNameCompleteServerTLSV1_2KMIPV1_2                     ProfileName = 0x00000006
	ProfileNameTapeLibraryClientKMIPV1_0                         ProfileName = 0x00000007
	ProfileNameTapeLibraryClientKMIPV1_1                         ProfileName = 0x00000008
	ProfileNameTapeLibraryClientKMIPV1_2                         ProfileName = 0x00000009
	ProfileNameTapeLibraryServerKMIPV1_0                         ProfileName = 0x0000000a
	ProfileNameTapeLibraryServerKMIPV1_1                         ProfileName = 0x0000000b
	ProfileNameTapeLibraryServerKMIPV1_2                         ProfileName = 0x0000000c
	ProfileNameSymmetricKeyLifecycleClientKMIPV1_0               ProfileName = 0x0000000d
	ProfileNameSymmetricKeyLifecycleClientKMIPV1_1               ProfileName = 0x0000000e
	ProfileNameSymmetricKeyLifecycleClientKMIPV1_2               ProfileName = 0x0000000f
	ProfileNameSymmetricKeyLifecycleServerKMIPV1_0               ProfileName = 0x00000010
	ProfileNameSymmetricKeyLifecycleServerKMIPV1_1               ProfileName = 0x00000011
	ProfileNameSymmetricKeyLifecycleServerKMIPV1_2               ProfileName = 0x00000012
	ProfileNameAsymmetricKeyLifecycleClientKMIPV1_0              ProfileName = 0x00000013
	ProfileNameAsymmetricKeyLifecycleClientKMIPV1_1              ProfileName = 0x00000014
	ProfileNameAsymmetricKeyLifecycleClientKMIPV1_2              ProfileName = 0x00000015
	ProfileNameAsymmetricKeyLifecycleServerKMIPV1_0              ProfileName = 0x00000016
	ProfileNameAsymmetricKeyLifecycleServerKMIPV1_1              ProfileName = 0x00000017
	ProfileNameAsymmetricKeyLifecycleServerKMIPV1_2              ProfileName = 0x00000018
	ProfileNameBasicCryptographicClientKMIPV1_2                  ProfileName = 0x00000019
	ProfileNameBasicCryptographicServerKMIPV1_2                  ProfileName = 0x0000001a
	ProfileNameAdvancedCryptographicClientKMIPV1_2               ProfileName = 0x0000001b
	ProfileNameAdvancedCryptographicServerKMIPV1_2               ProfileName = 0x0000001c
	ProfileNameRNGCryptographicClientKMIPV1_2                    ProfileName = 0x0000001d
	ProfileNameRNGCryptographicServerKMIPV1_2                    ProfileName = 0x0000001e
	ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_0            ProfileName = 0x0000001f
	ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_0     ProfileName = 0x00000020
	ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_0         ProfileName = 0x00000021
	ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_1            ProfileName = 0x00000022
	ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_1     ProfileName = 0x00000023
	ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_1         ProfileName = 0x00000024
	ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_2            ProfileName = 0x00000025
	ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_2     ProfileName = 0x00000026
	ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_2         ProfileName = 0x00000027
	ProfileNameSymmetricKeyFoundryServerKMIPV1_0                 ProfileName = 0x00000028
	ProfileNameSymmetricKeyFoundryServerKMIPV1_1                 ProfileName = 0x00000029
	ProfileNameSymmetricKeyFoundryServerKMIPV1_2                 ProfileName = 0x0000002a
	ProfileNameOpaqueManagedObjectStoreClientKMIPV1_0            ProfileName = 0x0000002b
	ProfileNameOpaqueManagedObjectStoreClientKMIPV1_1            ProfileName = 0x0000002c
	ProfileNameOpaqueManagedObjectStoreClientKMIPV1_2            ProfileName = 0x0000002d
	ProfileNameOpaqueManagedObjectStoreServerKMIPV1_0            ProfileName = 0x0000002e
	ProfileNameOpaqueManagedObjectStoreServerKMIPV1_1            ProfileName = 0x0000002f
	ProfileNameOpaqueManagedObjectStoreServerKMIPV1_2            ProfileName = 0x00000030
	ProfileNameSuiteBMinLOS_128ClientKMIPV1_0                    ProfileName = 0x00000031
	ProfileNameSuiteBMinLOS_128ClientKMIPV1_1                    ProfileName = 0x00000032
	ProfileNameSuiteBMinLOS_128ClientKMIPV1_2                    ProfileName = 0x00000033
	ProfileNameSuiteBMinLOS_128ServerKMIPV1_0                    ProfileName = 0x00000034
	ProfileNameSuiteBMinLOS_128ServerKMIPV1_1                    ProfileName = 0x00000035
	ProfileNameSuiteBMinLOS_128ServerKMIPV1_2                    ProfileName = 0x00000036
	ProfileNameSuiteBMinLOS_192ClientKMIPV1_0                    ProfileName = 0x00000037
	ProfileNameSuiteBMinLOS_192ClientKMIPV1_1                    ProfileName = 0x00000038
	ProfileNameSuiteBMinLOS_192ClientKMIPV1_2                    ProfileName = 0x00000039
	ProfileNameSuiteBMinLOS_192ServerKMIPV1_0                    ProfileName = 0x0000003a
	ProfileNameSuiteBMinLOS_192ServerKMIPV1_1                    ProfileName = 0x0000003b
	ProfileNameSuiteBMinLOS_192ServerKMIPV1_2                    ProfileName = 0x0000003c
	ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_0 ProfileName = 0x0000003d
	ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_1 ProfileName = 0x0000003e
	ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_2 ProfileName = 0x0000003f
	ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_0 ProfileName = 0x00000040
	ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_1 ProfileName = 0x00000041
	ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_2 ProfileName = 0x00000042
	ProfileNameHTTPSClientKMIPV1_0                               ProfileName = 0x00000043
	ProfileNameHTTPSClientKMIPV1_1                               ProfileName = 0x00000044
	ProfileNameHTTPSClientKMIPV1_2                               ProfileName = 0x00000045
	ProfileNameHTTPSServerKMIPV1_0                               ProfileName = 0x00000046
	ProfileNameHTTPSServerKMIPV1_1                               ProfileName = 0x00000047
	ProfileNameHTTPSServerKMIPV1_2                               ProfileName = 0x00000048
	ProfileNameJSONClientKMIPV1_0                                ProfileName = 0x00000049
	ProfileNameJSONClientKMIPV1_1                                ProfileName = 0x0000004a
	ProfileNameJSONClientKMIPV1_2                                ProfileName = 0x0000004b
	ProfileNameJSONServerKMIPV1_0                                ProfileName = 0x0000004c
	ProfileNameJSONServerKMIPV1_1                                ProfileName = 0x0000004d
	ProfileNameJSONServerKMIPV1_2                                ProfileName = 0x0000004e
	ProfileNameXMLClientKMIPV1_0                                 ProfileName = 0x0000004f
	ProfileNameXMLClientKMIPV1_1                                 ProfileName = 0x00000050
	ProfileNameXMLClientKMIPV1_2                                 ProfileName = 0x00000051
	ProfileNameXMLServerKMIPV1_0                                 ProfileName = 0x00000052
	ProfileNameXMLServerKMIPV1_1                                 ProfileName = 0x00000053
	ProfileNameXMLServerKMIPV1_2                                 ProfileName = 0x00000054
	ProfileNameBaselineServerBasicKMIPV1_3                       ProfileName = 0x00000055
	ProfileNameBaselineServerTLSV1_2KMIPV1_3                     ProfileName = 0x00000056
	ProfileNameBaselineClientBasicKMIPV1_3                       ProfileName = 0x00000057
	ProfileNameBaselineClientTLSV1_2KMIPV1_3                     ProfileName = 0x00000058
	ProfileNameCompleteServerBasicKMIPV1_3                       ProfileName = 0x00000059
	ProfileNameCompleteServerTLSV1_2KMIPV1_3                     ProfileName = 0x0000005a
	ProfileNameTapeLibraryClientKMIPV1_3                         ProfileName = 0x0000005b
	ProfileNameTapeLibraryServerKMIPV1_3                         ProfileName = 0x0000005c
	ProfileNameSymmetricKeyLifecycleClientKMIPV1_3               ProfileName = 0x0000005d
	ProfileNameSymmetricKeyLifecycleServerKMIPV1_3               ProfileName = 0x0000005e
	ProfileNameAsymmetricKeyLifecycleClientKMIPV1_3              ProfileName = 0x0000005f
	ProfileNameAsymmetricKeyLifecycleServerKMIPV1_3              ProfileName = 0x00000060
	ProfileNameBasicCryptographicClientKMIPV1_3                  ProfileName = 0x00000061
	ProfileNameBasicCryptographicServerKMIPV1_3                  ProfileName = 0x00000062
	ProfileNameAdvancedCryptographicClientKMIPV1_3               ProfileName = 0x00000063
	ProfileNameAdvancedCryptographicServerKMIPV1_3               ProfileName = 0x00000064
	ProfileNameRNGCryptographicClientKMIPV1_3                    ProfileName = 0x00000065
	ProfileNameRNGCryptographicServerKMIPV1_3                    ProfileName = 0x00000066
	ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_3            ProfileName = 0x00000067
	ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_3     ProfileName = 0x00000068
	ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_3         ProfileName = 0x00000069
	ProfileNameSymmetricKeyFoundryServerKMIPV1_3                 ProfileName = 0x0000006a
	ProfileNameOpaqueManagedObjectStoreClientKMIPV1_3            ProfileName = 0x0000006b
	ProfileNameOpaqueManagedObjectStoreServerKMIPV1_3            ProfileName = 0x0000006c
	ProfileNameSuiteBMinLOS_128ClientKMIPV1_3                    ProfileName = 0x0000006d
	ProfileNameSuiteBMinLOS_128ServerKMIPV1_3                    ProfileName = 0x0000006e
	ProfileNameSuiteBMinLOS_192ClientKMIPV1_3                    ProfileName = 0x0000006f
	ProfileNameSuiteBMinLOS_192ServerKMIPV1_3                    ProfileName = 0x00000070
	ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_3 ProfileName = 0x00000071
	ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_3 ProfileName = 0x00000072
	ProfileNameHTTPSClientKMIPV1_3                               ProfileName = 0x00000073
	ProfileNameHTTPSServerKMIPV1_3                               ProfileName = 0x00000074
	ProfileNameJSONClientKMIPV1_3                                ProfileName = 0x00000075
	ProfileNameJSONServerKMIPV1_3                                ProfileName = 0x00000076
	ProfileNameXMLClientKMIPV1_3                                 ProfileName = 0x00000077
	ProfileNameXMLServerKMIPV1_3                                 ProfileName = 0x00000078
	ProfileNameBaselineServerBasicKMIPV1_4                       ProfileName = 0x00000079
	ProfileNameBaselineServerTLSV1_2KMIPV1_4                     ProfileName = 0x0000007a
	ProfileNameBaselineClientBasicKMIPV1_4                       ProfileName = 0x0000007b
	ProfileNameBaselineClientTLSV1_2KMIPV1_4                     ProfileName = 0x0000007c
	ProfileNameCompleteServerBasicKMIPV1_4                       ProfileName = 0x0000007d
	ProfileNameCompleteServerTLSV1_2KMIPV1_4                     ProfileName = 0x0000007e
	ProfileNameTapeLibraryClientKMIPV1_4                         ProfileName = 0x0000007f
	ProfileNameTapeLibraryServerKMIPV1_4                         ProfileName = 0x00000080
	ProfileNameSymmetricKeyLifecycleClientKMIPV1_4               ProfileName = 0x00000081
	ProfileNameSymmetricKeyLifecycleServerKMIPV1_4               ProfileName = 0x00000082
	ProfileNameAsymmetricKeyLifecycleClientKMIPV1_4              ProfileName = 0x00000083
	ProfileNameAsymmetricKeyLifecycleServerKMIPV1_4              ProfileName = 0x00000084
	ProfileNameBasicCryptographicClientKMIPV1_4                  ProfileName = 0x00000085
	ProfileNameBasicCryptographicServerKMIPV1_4                  ProfileName = 0x00000086
	ProfileNameAdvancedCryptographicClientKMIPV1_4               ProfileName = 0x00000087
	ProfileNameAdvancedCryptographicServerKMIPV1_4               ProfileName = 0x00000088
	ProfileNameRNGCryptographicClientKMIPV1_4                    ProfileName = 0x00000089
	ProfileNameRNGCryptographicServerKMIPV1_4                    ProfileName = 0x0000008a
	ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_4            ProfileName = 0x0000008b
	ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_4     ProfileName = 0x0000008c
	ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_4         ProfileName = 0x0000008d
	ProfileNameSymmetricKeyFoundryServerKMIPV1_4                 ProfileName = 0x0000008e
	ProfileNameOpaqueManagedObjectStoreClientKMIPV1_4            ProfileName = 0x0000008f
	ProfileNameOpaqueManagedObjectStoreServerKMIPV1_4            ProfileName = 0x00000090
	ProfileNameSuiteBMinLOS_128ClientKMIPV1_4                    ProfileName = 0x00000091
	ProfileNameSuiteBMinLOS_128ServerKMIPV1_4                    ProfileName = 0x00000092
	ProfileNameSuiteBMinLOS_192ClientKMIPV1_4                    ProfileName = 0x00000093
	ProfileNameSuiteBMinLOS_192ServerKMIPV1_4                    ProfileName = 0x00000094
	ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_4 ProfileName = 0x00000095
	ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_4 ProfileName = 0x00000096
	ProfileNameHTTPSClientKMIPV1_4                               ProfileName = 0x00000097
	ProfileNameHTTPSServerKMIPV1_4                               ProfileName = 0x00000098
	ProfileNameJSONClientKMIPV1_4                                ProfileName = 0x00000099
	ProfileNameJSONServerKMIPV1_4                                ProfileName = 0x0000009a
	ProfileNameXMLClientKMIPV1_4                                 ProfileName = 0x0000009b
	ProfileNameXMLServerKMIPV1_4                                 ProfileName = 0x0000009c
)

var _ProfileNameNameToValueMap = map[string]ProfileName{
	"BaselineServerBasicKMIPV1_2":                       ProfileNameBaselineServerBasicKMIPV1_2,
	"BaselineServerTLSV1_2KMIPV1_2":                     ProfileNameBaselineServerTLSV1_2KMIPV1_2,
	"BaselineClientBasicKMIPV1_2":                       ProfileNameBaselineClientBasicKMIPV1_2,
	"BaselineClientTLSV1_2KMIPV1_2":                     ProfileNameBaselineClientTLSV1_2KMIPV1_2,
	"CompleteServerBasicKMIPV1_2":                       ProfileNameCompleteServerBasicKMIPV1_2,
	"CompleteServerTLSV1_2KMIPV1_2":                     ProfileNameCompleteServerTLSV1_2KMIPV1_2,
	"TapeLibraryClientKMIPV1_0":                         ProfileNameTapeLibraryClientKMIPV1_0,
	"TapeLibraryClientKMIPV1_1":                         ProfileNameTapeLibraryClientKMIPV1_1,
	"TapeLibraryClientKMIPV1_2":                         ProfileNameTapeLibraryClientKMIPV1_2,
	"TapeLibraryServerKMIPV1_0":                         ProfileNameTapeLibraryServerKMIPV1_0,
	"TapeLibraryServerKMIPV1_1":                         ProfileNameTapeLibraryServerKMIPV1_1,
	"TapeLibraryServerKMIPV1_2":                         ProfileNameTapeLibraryServerKMIPV1_2,
	"SymmetricKeyLifecycleClientKMIPV1_0":               ProfileNameSymmetricKeyLifecycleClientKMIPV1_0,
	"SymmetricKeyLifecycleClientKMIPV1_1":               ProfileNameSymmetricKeyLifecycleClientKMIPV1_1,
	"SymmetricKeyLifecycleClientKMIPV1_2":               ProfileNameSymmetricKeyLifecycleClientKMIPV1_2,
	"SymmetricKeyLifecycleServerKMIPV1_0":               ProfileNameSymmetricKeyLifecycleServerKMIPV1_0,
	"SymmetricKeyLifecycleServerKMIPV1_1":               ProfileNameSymmetricKeyLifecycleServerKMIPV1_1,
	"SymmetricKeyLifecycleServerKMIPV1_2":               ProfileNameSymmetricKeyLifecycleServerKMIPV1_2,
	"AsymmetricKeyLifecycleClientKMIPV1_0":              ProfileNameAsymmetricKeyLifecycleClientKMIPV1_0,
	"AsymmetricKeyLifecycleClientKMIPV1_1":              ProfileNameAsymmetricKeyLifecycleClientKMIPV1_1,
	"AsymmetricKeyLifecycleClientKMIPV1_2":              ProfileNameAsymmetricKeyLifecycleClientKMIPV1_2,
	"AsymmetricKeyLifecycleServerKMIPV1_0":              ProfileNameAsymmetricKeyLifecycleServerKMIPV1_0,
	"AsymmetricKeyLifecycleServerKMIPV1_1":              ProfileNameAsymmetricKeyLifecycleServerKMIPV1_1,
	"AsymmetricKeyLifecycleServerKMIPV1_2":              ProfileNameAsymmetricKeyLifecycleServerKMIPV1_2,
	"BasicCryptographicClientKMIPV1_2":                  ProfileNameBasicCryptographicClientKMIPV1_2,
	"BasicCryptographicServerKMIPV1_2":                  ProfileNameBasicCryptographicServerKMIPV1_2,
	"AdvancedCryptographicClientKMIPV1_2":               ProfileNameAdvancedCryptographicClientKMIPV1_2,
	"AdvancedCryptographicServerKMIPV1_2":               ProfileNameAdvancedCryptographicServerKMIPV1_2,
	"RNGCryptographicClientKMIPV1_2":                    ProfileNameRNGCryptographicClientKMIPV1_2,
	"RNGCryptographicServerKMIPV1_2":                    ProfileNameRNGCryptographicServerKMIPV1_2,
	"BasicSymmetricKeyFoundryClientKMIPV1_0":            ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_0,
	"IntermediateSymmetricKeyFoundryClientKMIPV1_0":     ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_0,
	"AdvancedSymmetricKeyFoundryClientKMIPV1_0":         ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_0,
	"BasicSymmetricKeyFoundryClientKMIPV1_1":            ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_1,
	"IntermediateSymmetricKeyFoundryClientKMIPV1_1":     ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_1,
	"AdvancedSymmetricKeyFoundryClientKMIPV1_1":         ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_1,
	"BasicSymmetricKeyFoundryClientKMIPV1_2":            ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_2,
	"IntermediateSymmetricKeyFoundryClientKMIPV1_2":     ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_2,
	"AdvancedSymmetricKeyFoundryClientKMIPV1_2":         ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_2,
	"SymmetricKeyFoundryServerKMIPV1_0":                 ProfileNameSymmetricKeyFoundryServerKMIPV1_0,
	"SymmetricKeyFoundryServerKMIPV1_1":                 ProfileNameSymmetricKeyFoundryServerKMIPV1_1,
	"SymmetricKeyFoundryServerKMIPV1_2":                 ProfileNameSymmetricKeyFoundryServerKMIPV1_2,
	"OpaqueManagedObjectStoreClientKMIPV1_0":            ProfileNameOpaqueManagedObjectStoreClientKMIPV1_0,
	"OpaqueManagedObjectStoreClientKMIPV1_1":            ProfileNameOpaqueManagedObjectStoreClientKMIPV1_1,
	"OpaqueManagedObjectStoreClientKMIPV1_2":            ProfileNameOpaqueManagedObjectStoreClientKMIPV1_2,
	"OpaqueManagedObjectStoreServerKMIPV1_0":            ProfileNameOpaqueManagedObjectStoreServerKMIPV1_0,
	"OpaqueManagedObjectStoreServerKMIPV1_1":            ProfileNameOpaqueManagedObjectStoreServerKMIPV1_1,
	"OpaqueManagedObjectStoreServerKMIPV1_2":            ProfileNameOpaqueManagedObjectStoreServerKMIPV1_2,
	"SuiteBMinLOS_128ClientKMIPV1_0":                    ProfileNameSuiteBMinLOS_128ClientKMIPV1_0,
	"SuiteBMinLOS_128ClientKMIPV1_1":                    ProfileNameSuiteBMinLOS_128ClientKMIPV1_1,
	"SuiteBMinLOS_128ClientKMIPV1_2":                    ProfileNameSuiteBMinLOS_128ClientKMIPV1_2,
	"SuiteBMinLOS_128ServerKMIPV1_0":                    ProfileNameSuiteBMinLOS_128ServerKMIPV1_0,
	"SuiteBMinLOS_128ServerKMIPV1_1":                    ProfileNameSuiteBMinLOS_128ServerKMIPV1_1,
	"SuiteBMinLOS_128ServerKMIPV1_2":                    ProfileNameSuiteBMinLOS_128ServerKMIPV1_2,
	"SuiteBMinLOS_192ClientKMIPV1_0":                    ProfileNameSuiteBMinLOS_192ClientKMIPV1_0,
	"SuiteBMinLOS_192ClientKMIPV1_1":                    ProfileNameSuiteBMinLOS_192ClientKMIPV1_1,
	"SuiteBMinLOS_192ClientKMIPV1_2":                    ProfileNameSuiteBMinLOS_192ClientKMIPV1_2,
	"SuiteBMinLOS_192ServerKMIPV1_0":                    ProfileNameSuiteBMinLOS_192ServerKMIPV1_0,
	"SuiteBMinLOS_192ServerKMIPV1_1":                    ProfileNameSuiteBMinLOS_192ServerKMIPV1_1,
	"SuiteBMinLOS_192ServerKMIPV1_2":                    ProfileNameSuiteBMinLOS_192ServerKMIPV1_2,
	"StorageArrayWithSelfEncryptingDriveClientKMIPV1_0": ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_0,
	"StorageArrayWithSelfEncryptingDriveClientKMIPV1_1": ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_1,
	"StorageArrayWithSelfEncryptingDriveClientKMIPV1_2": ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_2,
	"StorageArrayWithSelfEncryptingDriveServerKMIPV1_0": ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_0,
	"StorageArrayWithSelfEncryptingDriveServerKMIPV1_1": ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_1,
	"StorageArrayWithSelfEncryptingDriveServerKMIPV1_2": ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_2,
	"HTTPSClientKMIPV1_0":                               ProfileNameHTTPSClientKMIPV1_0,
	"HTTPSClientKMIPV1_1":                               ProfileNameHTTPSClientKMIPV1_1,
	"HTTPSClientKMIPV1_2":                               ProfileNameHTTPSClientKMIPV1_2,
	"HTTPSServerKMIPV1_0":                               ProfileNameHTTPSServerKMIPV1_0,
	"HTTPSServerKMIPV1_1":                               ProfileNameHTTPSServerKMIPV1_1,
	"HTTPSServerKMIPV1_2":                               ProfileNameHTTPSServerKMIPV1_2,
	"JSONClientKMIPV1_0":                                ProfileNameJSONClientKMIPV1_0,
	"JSONClientKMIPV1_1":                                ProfileNameJSONClientKMIPV1_1,
	"JSONClientKMIPV1_2":                                ProfileNameJSONClientKMIPV1_2,
	"JSONServerKMIPV1_0":                                ProfileNameJSONServerKMIPV1_0,
	"JSONServerKMIPV1_1":                                ProfileNameJSONServerKMIPV1_1,
	"JSONServerKMIPV1_2":                                ProfileNameJSONServerKMIPV1_2,
	"XMLClientKMIPV1_0":                                 ProfileNameXMLClientKMIPV1_0,
	"XMLClientKMIPV1_1":                                 ProfileNameXMLClientKMIPV1_1,
	"XMLClientKMIPV1_2":                                 ProfileNameXMLClientKMIPV1_2,
	"XMLServerKMIPV1_0":                                 ProfileNameXMLServerKMIPV1_0,
	"XMLServerKMIPV1_1":                                 ProfileNameXMLServerKMIPV1_1,
	"XMLServerKMIPV1_2":                                 ProfileNameXMLServerKMIPV1_2,
	"BaselineServerBasicKMIPV1_3":                       ProfileNameBaselineServerBasicKMIPV1_3,
	"BaselineServerTLSV1_2KMIPV1_3":                     ProfileNameBaselineServerTLSV1_2KMIPV1_3,
	"BaselineClientBasicKMIPV1_3":                       ProfileNameBaselineClientBasicKMIPV1_3,
	"BaselineClientTLSV1_2KMIPV1_3":                     ProfileNameBaselineClientTLSV1_2KMIPV1_3,
	"CompleteServerBasicKMIPV1_3":                       ProfileNameCompleteServerBasicKMIPV1_3,
	"CompleteServerTLSV1_2KMIPV1_3":                     ProfileNameCompleteServerTLSV1_2KMIPV1_3,
	"TapeLibraryClientKMIPV1_3":                         ProfileNameTapeLibraryClientKMIPV1_3,
	"TapeLibraryServerKMIPV1_3":                         ProfileNameTapeLibraryServerKMIPV1_3,
	"SymmetricKeyLifecycleClientKMIPV1_3":               ProfileNameSymmetricKeyLifecycleClientKMIPV1_3,
	"SymmetricKeyLifecycleServerKMIPV1_3":               ProfileNameSymmetricKeyLifecycleServerKMIPV1_3,
	"AsymmetricKeyLifecycleClientKMIPV1_3":              ProfileNameAsymmetricKeyLifecycleClientKMIPV1_3,
	"AsymmetricKeyLifecycleServerKMIPV1_3":              ProfileNameAsymmetricKeyLifecycleServerKMIPV1_3,
	"BasicCryptographicClientKMIPV1_3":                  ProfileNameBasicCryptographicClientKMIPV1_3,
	"BasicCryptographicServerKMIPV1_3":                  ProfileNameBasicCryptographicServerKMIPV1_3,
	"AdvancedCryptographicClientKMIPV1_3":               ProfileNameAdvancedCryptographicClientKMIPV1_3,
	"AdvancedCryptographicServerKMIPV1_3":               ProfileNameAdvancedCryptographicServerKMIPV1_3,
	"RNGCryptographicClientKMIPV1_3":                    ProfileNameRNGCryptographicClientKMIPV1_3,
	"RNGCryptographicServerKMIPV1_3":                    ProfileNameRNGCryptographicServerKMIPV1_3,
	"BasicSymmetricKeyFoundryClientKMIPV1_3":            ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_3,
	"IntermediateSymmetricKeyFoundryClientKMIPV1_3":     ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_3,
	"AdvancedSymmetricKeyFoundryClientKMIPV1_3":         ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_3,
	"SymmetricKeyFoundryServerKMIPV1_3":                 ProfileNameSymmetricKeyFoundryServerKMIPV1_3,
	"OpaqueManagedObjectStoreClientKMIPV1_3":            ProfileNameOpaqueManagedObjectStoreClientKMIPV1_3,
	"OpaqueManagedObjectStoreServerKMIPV1_3":            ProfileNameOpaqueManagedObjectStoreServerKMIPV1_3,
	"SuiteBMinLOS_128ClientKMIPV1_3":                    ProfileNameSuiteBMinLOS_128ClientKMIPV1_3,
	"SuiteBMinLOS_128ServerKMIPV1_3":                    ProfileNameSuiteBMinLOS_128ServerKMIPV1_3,
	"SuiteBMinLOS_192ClientKMIPV1_3":                    ProfileNameSuiteBMinLOS_192ClientKMIPV1_3,
	"SuiteBMinLOS_192ServerKMIPV1_3":                    ProfileNameSuiteBMinLOS_192ServerKMIPV1_3,
	"StorageArrayWithSelfEncryptingDriveClientKMIPV1_3": ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_3,
	"StorageArrayWithSelfEncryptingDriveServerKMIPV1_3": ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_3,
	"HTTPSClientKMIPV1_3":                               ProfileNameHTTPSClientKMIPV1_3,
	"HTTPSServerKMIPV1_3":                               ProfileNameHTTPSServerKMIPV1_3,
	"JSONClientKMIPV1_3":                                ProfileNameJSONClientKMIPV1_3,
	"JSONServerKMIPV1_3":                                ProfileNameJSONServerKMIPV1_3,
	"XMLClientKMIPV1_3":                                 ProfileNameXMLClientKMIPV1_3,
	"XMLServerKMIPV1_3":                                 ProfileNameXMLServerKMIPV1_3,
	"BaselineServerBasicKMIPV1_4":                       ProfileNameBaselineServerBasicKMIPV1_4,
	"BaselineServerTLSV1_2KMIPV1_4":                     ProfileNameBaselineServerTLSV1_2KMIPV1_4,
	"BaselineClientBasicKMIPV1_4":                       ProfileNameBaselineClientBasicKMIPV1_4,
	"BaselineClientTLSV1_2KMIPV1_4":                     ProfileNameBaselineClientTLSV1_2KMIPV1_4,
	"CompleteServerBasicKMIPV1_4":                       ProfileNameCompleteServerBasicKMIPV1_4,
	"CompleteServerTLSV1_2KMIPV1_4":                     ProfileNameCompleteServerTLSV1_2KMIPV1_4,
	"TapeLibraryClientKMIPV1_4":                         ProfileNameTapeLibraryClientKMIPV1_4,
	"TapeLibraryServerKMIPV1_4":                         ProfileNameTapeLibraryServerKMIPV1_4,
	"SymmetricKeyLifecycleClientKMIPV1_4":               ProfileNameSymmetricKeyLifecycleClientKMIPV1_4,
	"SymmetricKeyLifecycleServerKMIPV1_4":               ProfileNameSymmetricKeyLifecycleServerKMIPV1_4,
	"AsymmetricKeyLifecycleClientKMIPV1_4":              ProfileNameAsymmetricKeyLifecycleClientKMIPV1_4,
	"AsymmetricKeyLifecycleServerKMIPV1_4":              ProfileNameAsymmetricKeyLifecycleServerKMIPV1_4,
	"BasicCryptographicClientKMIPV1_4":                  ProfileNameBasicCryptographicClientKMIPV1_4,
	"BasicCryptographicServerKMIPV1_4":                  ProfileNameBasicCryptographicServerKMIPV1_4,
	"AdvancedCryptographicClientKMIPV1_4":               ProfileNameAdvancedCryptographicClientKMIPV1_4,
	"AdvancedCryptographicServerKMIPV1_4":               ProfileNameAdvancedCryptographicServerKMIPV1_4,
	"RNGCryptographicClientKMIPV1_4":                    ProfileNameRNGCryptographicClientKMIPV1_4,
	"RNGCryptographicServerKMIPV1_4":                    ProfileNameRNGCryptographicServerKMIPV1_4,
	"BasicSymmetricKeyFoundryClientKMIPV1_4":            ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_4,
	"IntermediateSymmetricKeyFoundryClientKMIPV1_4":     ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_4,
	"AdvancedSymmetricKeyFoundryClientKMIPV1_4":         ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_4,
	"SymmetricKeyFoundryServerKMIPV1_4":                 ProfileNameSymmetricKeyFoundryServerKMIPV1_4,
	"OpaqueManagedObjectStoreClientKMIPV1_4":            ProfileNameOpaqueManagedObjectStoreClientKMIPV1_4,
	"OpaqueManagedObjectStoreServerKMIPV1_4":            ProfileNameOpaqueManagedObjectStoreServerKMIPV1_4,
	"SuiteBMinLOS_128ClientKMIPV1_4":                    ProfileNameSuiteBMinLOS_128ClientKMIPV1_4,
	"SuiteBMinLOS_128ServerKMIPV1_4":                    ProfileNameSuiteBMinLOS_128ServerKMIPV1_4,
	"SuiteBMinLOS_192ClientKMIPV1_4":                    ProfileNameSuiteBMinLOS_192ClientKMIPV1_4,
	"SuiteBMinLOS_192ServerKMIPV1_4":                    ProfileNameSuiteBMinLOS_192ServerKMIPV1_4,
	"StorageArrayWithSelfEncryptingDriveClientKMIPV1_4": ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_4,
	"StorageArrayWithSelfEncryptingDriveServerKMIPV1_4": ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_4,
	"HTTPSClientKMIPV1_4":                               ProfileNameHTTPSClientKMIPV1_4,
	"HTTPSServerKMIPV1_4":                               ProfileNameHTTPSServerKMIPV1_4,
	"JSONClientKMIPV1_4":                                ProfileNameJSONClientKMIPV1_4,
	"JSONServerKMIPV1_4":                                ProfileNameJSONServerKMIPV1_4,
	"XMLClientKMIPV1_4":                                 ProfileNameXMLClientKMIPV1_4,
	"XMLServerKMIPV1_4":                                 ProfileNameXMLServerKMIPV1_4,
}

var _ProfileNameValueToNameMap = map[ProfileName]string{
	ProfileNameBaselineServerBasicKMIPV1_2:                       "BaselineServerBasicKMIPV1_2",
	ProfileNameBaselineServerTLSV1_2KMIPV1_2:                     "BaselineServerTLSV1_2KMIPV1_2",
	ProfileNameBaselineClientBasicKMIPV1_2:                       "BaselineClientBasicKMIPV1_2",
	ProfileNameBaselineClientTLSV1_2KMIPV1_2:                     "BaselineClientTLSV1_2KMIPV1_2",
	ProfileNameCompleteServerBasicKMIPV1_2:                       "CompleteServerBasicKMIPV1_2",
	ProfileNameCompleteServerTLSV1_2KMIPV1_2:                     "CompleteServerTLSV1_2KMIPV1_2",
	ProfileNameTapeLibraryClientKMIPV1_0:                         "TapeLibraryClientKMIPV1_0",
	ProfileNameTapeLibraryClientKMIPV1_1:                         "TapeLibraryClientKMIPV1_1",
	ProfileNameTapeLibraryClientKMIPV1_2:                         "TapeLibraryClientKMIPV1_2",
	ProfileNameTapeLibraryServerKMIPV1_0:                         "TapeLibraryServerKMIPV1_0",
	ProfileNameTapeLibraryServerKMIPV1_1:                         "TapeLibraryServerKMIPV1_1",
	ProfileNameTapeLibraryServerKMIPV1_2:                         "TapeLibraryServerKMIPV1_2",
	ProfileNameSymmetricKeyLifecycleClientKMIPV1_0:               "SymmetricKeyLifecycleClientKMIPV1_0",
	ProfileNameSymmetricKeyLifecycleClientKMIPV1_1:               "SymmetricKeyLifecycleClientKMIPV1_1",
	ProfileNameSymmetricKeyLifecycleClientKMIPV1_2:               "SymmetricKeyLifecycleClientKMIPV1_2",
	ProfileNameSymmetricKeyLifecycleServerKMIPV1_0:               "SymmetricKeyLifecycleServerKMIPV1_0",
	ProfileNameSymmetricKeyLifecycleServerKMIPV1_1:               "SymmetricKeyLifecycleServerKMIPV1_1",
	ProfileNameSymmetricKeyLifecycleServerKMIPV1_2:               "SymmetricKeyLifecycleServerKMIPV1_2",
	ProfileNameAsymmetricKeyLifecycleClientKMIPV1_0:              "AsymmetricKeyLifecycleClientKMIPV1_0",
	ProfileNameAsymmetricKeyLifecycleClientKMIPV1_1:              "AsymmetricKeyLifecycleClientKMIPV1_1",
	ProfileNameAsymmetricKeyLifecycleClientKMIPV1_2:              "AsymmetricKeyLifecycleClientKMIPV1_2",
	ProfileNameAsymmetricKeyLifecycleServerKMIPV1_0:              "AsymmetricKeyLifecycleServerKMIPV1_0",
	ProfileNameAsymmetricKeyLifecycleServerKMIPV1_1:              "AsymmetricKeyLifecycleServerKMIPV1_1",
	ProfileNameAsymmetricKeyLifecycleServerKMIPV1_2:              "AsymmetricKeyLifecycleServerKMIPV1_2",
	ProfileNameBasicCryptographicClientKMIPV1_2:                  "BasicCryptographicClientKMIPV1_2",
	ProfileNameBasicCryptographicServerKMIPV1_2:                  "BasicCryptographicServerKMIPV1_2",
	ProfileNameAdvancedCryptographicClientKMIPV1_2:               "AdvancedCryptographicClientKMIPV1_2",
	ProfileNameAdvancedCryptographicServerKMIPV1_2:               "AdvancedCryptographicServerKMIPV1_2",
	ProfileNameRNGCryptographicClientKMIPV1_2:                    "RNGCryptographicClientKMIPV1_2",
	ProfileNameRNGCryptographicServerKMIPV1_2:                    "RNGCryptographicServerKMIPV1_2",
	ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_0:            "BasicSymmetricKeyFoundryClientKMIPV1_0",
	ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_0:     "IntermediateSymmetricKeyFoundryClientKMIPV1_0",
	ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_0:         "AdvancedSymmetricKeyFoundryClientKMIPV1_0",
	ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_1:            "BasicSymmetricKeyFoundryClientKMIPV1_1",
	ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_1:     "IntermediateSymmetricKeyFoundryClientKMIPV1_1",
	ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_1:         "AdvancedSymmetricKeyFoundryClientKMIPV1_1",
	ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_2:            "BasicSymmetricKeyFoundryClientKMIPV1_2",
	ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_2:     "IntermediateSymmetricKeyFoundryClientKMIPV1_2",
	ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_2:         "AdvancedSymmetricKeyFoundryClientKMIPV1_2",
	ProfileNameSymmetricKeyFoundryServerKMIPV1_0:                 "SymmetricKeyFoundryServerKMIPV1_0",
	ProfileNameSymmetricKeyFoundryServerKMIPV1_1:                 "SymmetricKeyFoundryServerKMIPV1_1",
	ProfileNameSymmetricKeyFoundryServerKMIPV1_2:                 "SymmetricKeyFoundryServerKMIPV1_2",
	ProfileNameOpaqueManagedObjectStoreClientKMIPV1_0:            "OpaqueManagedObjectStoreClientKMIPV1_0",
	ProfileNameOpaqueManagedObjectStoreClientKMIPV1_1:            "OpaqueManagedObjectStoreClientKMIPV1_1",
	ProfileNameOpaqueManagedObjectStoreClientKMIPV1_2:            "OpaqueManagedObjectStoreClientKMIPV1_2",
	ProfileNameOpaqueManagedObjectStoreServerKMIPV1_0:            "OpaqueManagedObjectStoreServerKMIPV1_0",
	ProfileNameOpaqueManagedObjectStoreServerKMIPV1_1:            "OpaqueManagedObjectStoreServerKMIPV1_1",
	ProfileNameOpaqueManagedObjectStoreServerKMIPV1_2:            "OpaqueManagedObjectStoreServerKMIPV1_2",
	ProfileNameSuiteBMinLOS_128ClientKMIPV1_0:                    "SuiteBMinLOS_128ClientKMIPV1_0",
	ProfileNameSuiteBMinLOS_128ClientKMIPV1_1:                    "SuiteBMinLOS_128ClientKMIPV1_1",
	ProfileNameSuiteBMinLOS_128ClientKMIPV1_2:                    "SuiteBMinLOS_128ClientKMIPV1_2",
	ProfileNameSuiteBMinLOS_128ServerKMIPV1_0:                    "SuiteBMinLOS_128ServerKMIPV1_0",
	ProfileNameSuiteBMinLOS_128ServerKMIPV1_1:                    "SuiteBMinLOS_128ServerKMIPV1_1",
	ProfileNameSuiteBMinLOS_128ServerKMIPV1_2:                    "SuiteBMinLOS_128ServerKMIPV1_2",
	ProfileNameSuiteBMinLOS_192ClientKMIPV1_0:                    "SuiteBMinLOS_192ClientKMIPV1_0",
	ProfileNameSuiteBMinLOS_192ClientKMIPV1_1:                    "SuiteBMinLOS_192ClientKMIPV1_1",
	ProfileNameSuiteBMinLOS_192ClientKMIPV1_2:                    "SuiteBMinLOS_192ClientKMIPV1_2",
	ProfileNameSuiteBMinLOS_192ServerKMIPV1_0:                    "SuiteBMinLOS_192ServerKMIPV1_0",
	ProfileNameSuiteBMinLOS_192ServerKMIPV1_1:                    "SuiteBMinLOS_192ServerKMIPV1_1",
	ProfileNameSuiteBMinLOS_192ServerKMIPV1_2:                    "SuiteBMinLOS_192ServerKMIPV1_2",
	ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_0: "StorageArrayWithSelfEncryptingDriveClientKMIPV1_0",
	ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_1: "StorageArrayWithSelfEncryptingDriveClientKMIPV1_1",
	ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_2: "StorageArrayWithSelfEncryptingDriveClientKMIPV1_2",
	ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_0: "StorageArrayWithSelfEncryptingDriveServerKMIPV1_0",
	ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_1: "StorageArrayWithSelfEncryptingDriveServerKMIPV1_1",
	ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_2: "StorageArrayWithSelfEncryptingDriveServerKMIPV1_2",
	ProfileNameHTTPSClientKMIPV1_0:                               "HTTPSClientKMIPV1_0",
	ProfileNameHTTPSClientKMIPV1_1:                               "HTTPSClientKMIPV1_1",
	ProfileNameHTTPSClientKMIPV1_2:                               "HTTPSClientKMIPV1_2",
	ProfileNameHTTPSServerKMIPV1_0:                               "HTTPSServerKMIPV1_0",
	ProfileNameHTTPSServerKMIPV1_1:                               "HTTPSServerKMIPV1_1",
	ProfileNameHTTPSServerKMIPV1_2:                               "HTTPSServerKMIPV1_2",
	ProfileNameJSONClientKMIPV1_0:                                "JSONClientKMIPV1_0",
	ProfileNameJSONClientKMIPV1_1:                                "JSONClientKMIPV1_1",
	ProfileNameJSONClientKMIPV1_2:                                "JSONClientKMIPV1_2",
	ProfileNameJSONServerKMIPV1_0:                                "JSONServerKMIPV1_0",
	ProfileNameJSONServerKMIPV1_1:                                "JSONServerKMIPV1_1",
	ProfileNameJSONServerKMIPV1_2:                                "JSONServerKMIPV1_2",
	ProfileNameXMLClientKMIPV1_0:                                 "XMLClientKMIPV1_0",
	ProfileNameXMLClientKMIPV1_1:                                 "XMLClientKMIPV1_1",
	ProfileNameXMLClientKMIPV1_2:                                 "XMLClientKMIPV1_2",
	ProfileNameXMLServerKMIPV1_0:                                 "XMLServerKMIPV1_0",
	ProfileNameXMLServerKMIPV1_1:                                 "XMLServerKMIPV1_1",
	ProfileNameXMLServerKMIPV1_2:                                 "XMLServerKMIPV1_2",
	ProfileNameBaselineServerBasicKMIPV1_3:                       "BaselineServerBasicKMIPV1_3",
	ProfileNameBaselineServerTLSV1_2KMIPV1_3:                     "BaselineServerTLSV1_2KMIPV1_3",
	ProfileNameBaselineClientBasicKMIPV1_3:                       "BaselineClientBasicKMIPV1_3",
	ProfileNameBaselineClientTLSV1_2KMIPV1_3:                     "BaselineClientTLSV1_2KMIPV1_3",
	ProfileNameCompleteServerBasicKMIPV1_3:                       "CompleteServerBasicKMIPV1_3",
	ProfileNameCompleteServerTLSV1_2KMIPV1_3:                     "CompleteServerTLSV1_2KMIPV1_3",
	ProfileNameTapeLibraryClientKMIPV1_3:                         "TapeLibraryClientKMIPV1_3",
	ProfileNameTapeLibraryServerKMIPV1_3:                         "TapeLibraryServerKMIPV1_3",
	ProfileNameSymmetricKeyLifecycleClientKMIPV1_3:               "SymmetricKeyLifecycleClientKMIPV1_3",
	ProfileNameSymmetricKeyLifecycleServerKMIPV1_3:               "SymmetricKeyLifecycleServerKMIPV1_3",
	ProfileNameAsymmetricKeyLifecycleClientKMIPV1_3:              "AsymmetricKeyLifecycleClientKMIPV1_3",
	ProfileNameAsymmetricKeyLifecycleServerKMIPV1_3:              "AsymmetricKeyLifecycleServerKMIPV1_3",
	ProfileNameBasicCryptographicClientKMIPV1_3:                  "BasicCryptographicClientKMIPV1_3",
	ProfileNameBasicCryptographicServerKMIPV1_3:                  "BasicCryptographicServerKMIPV1_3",
	ProfileNameAdvancedCryptographicClientKMIPV1_3:               "AdvancedCryptographicClientKMIPV1_3",
	ProfileNameAdvancedCryptographicServerKMIPV1_3:               "AdvancedCryptographicServerKMIPV1_3",
	ProfileNameRNGCryptographicClientKMIPV1_3:                    "RNGCryptographicClientKMIPV1_3",
	ProfileNameRNGCryptographicServerKMIPV1_3:                    "RNGCryptographicServerKMIPV1_3",
	ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_3:            "BasicSymmetricKeyFoundryClientKMIPV1_3",
	ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_3:     "IntermediateSymmetricKeyFoundryClientKMIPV1_3",
	ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_3:         "AdvancedSymmetricKeyFoundryClientKMIPV1_3",
	ProfileNameSymmetricKeyFoundryServerKMIPV1_3:                 "SymmetricKeyFoundryServerKMIPV1_3",
	ProfileNameOpaqueManagedObjectStoreClientKMIPV1_3:            "OpaqueManagedObjectStoreClientKMIPV1_3",
	ProfileNameOpaqueManagedObjectStoreServerKMIPV1_3:            "OpaqueManagedObjectStoreServerKMIPV1_3",
	ProfileNameSuiteBMinLOS_128ClientKMIPV1_3:                    "SuiteBMinLOS_128ClientKMIPV1_3",
	ProfileNameSuiteBMinLOS_128ServerKMIPV1_3:                    "SuiteBMinLOS_128ServerKMIPV1_3",
	ProfileNameSuiteBMinLOS_192ClientKMIPV1_3:                    "SuiteBMinLOS_192ClientKMIPV1_3",
	ProfileNameSuiteBMinLOS_192ServerKMIPV1_3:                    "SuiteBMinLOS_192ServerKMIPV1_3",
	ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_3: "StorageArrayWithSelfEncryptingDriveClientKMIPV1_3",
	ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_3: "StorageArrayWithSelfEncryptingDriveServerKMIPV1_3",
	ProfileNameHTTPSClientKMIPV1_3:                               "HTTPSClientKMIPV1_3",
	ProfileNameHTTPSServerKMIPV1_3:                               "HTTPSServerKMIPV1_3",
	ProfileNameJSONClientKMIPV1_3:                                "JSONClientKMIPV1_3",
	ProfileNameJSONServerKMIPV1_3:                                "JSONServerKMIPV1_3",
	ProfileNameXMLClientKMIPV1_3:                                 "XMLClientKMIPV1_3",
	ProfileNameXMLServerKMIPV1_3:                                 "XMLServerKMIPV1_3",
	ProfileNameBaselineServerBasicKMIPV1_4:                       "BaselineServerBasicKMIPV1_4",
	ProfileNameBaselineServerTLSV1_2KMIPV1_4:                     "BaselineServerTLSV1_2KMIPV1_4",
	ProfileNameBaselineClientBasicKMIPV1_4:                       "BaselineClientBasicKMIPV1_4",
	ProfileNameBaselineClientTLSV1_2KMIPV1_4:                     "BaselineClientTLSV1_2KMIPV1_4",
	ProfileNameCompleteServerBasicKMIPV1_4:                       "CompleteServerBasicKMIPV1_4",
	ProfileNameCompleteServerTLSV1_2KMIPV1_4:                     "CompleteServerTLSV1_2KMIPV1_4",
	ProfileNameTapeLibraryClientKMIPV1_4:                         "TapeLibraryClientKMIPV1_4",
	ProfileNameTapeLibraryServerKMIPV1_4:                         "TapeLibraryServerKMIPV1_4",
	ProfileNameSymmetricKeyLifecycleClientKMIPV1_4:               "SymmetricKeyLifecycleClientKMIPV1_4",
	ProfileNameSymmetricKeyLifecycleServerKMIPV1_4:               "SymmetricKeyLifecycleServerKMIPV1_4",
	ProfileNameAsymmetricKeyLifecycleClientKMIPV1_4:              "AsymmetricKeyLifecycleClientKMIPV1_4",
	ProfileNameAsymmetricKeyLifecycleServerKMIPV1_4:              "AsymmetricKeyLifecycleServerKMIPV1_4",
	ProfileNameBasicCryptographicClientKMIPV1_4:                  "BasicCryptographicClientKMIPV1_4",
	ProfileNameBasicCryptographicServerKMIPV1_4:                  "BasicCryptographicServerKMIPV1_4",
	ProfileNameAdvancedCryptographicClientKMIPV1_4:               "AdvancedCryptographicClientKMIPV1_4",
	ProfileNameAdvancedCryptographicServerKMIPV1_4:               "AdvancedCryptographicServerKMIPV1_4",
	ProfileNameRNGCryptographicClientKMIPV1_4:                    "RNGCryptographicClientKMIPV1_4",
	ProfileNameRNGCryptographicServerKMIPV1_4:                    "RNGCryptographicServerKMIPV1_4",
	ProfileNameBasicSymmetricKeyFoundryClientKMIPV1_4:            "BasicSymmetricKeyFoundryClientKMIPV1_4",
	ProfileNameIntermediateSymmetricKeyFoundryClientKMIPV1_4:     "IntermediateSymmetricKeyFoundryClientKMIPV1_4",
	ProfileNameAdvancedSymmetricKeyFoundryClientKMIPV1_4:         "AdvancedSymmetricKeyFoundryClientKMIPV1_4",
	ProfileNameSymmetricKeyFoundryServerKMIPV1_4:                 "SymmetricKeyFoundryServerKMIPV1_4",
	ProfileNameOpaqueManagedObjectStoreClientKMIPV1_4:            "OpaqueManagedObjectStoreClientKMIPV1_4",
	ProfileNameOpaqueManagedObjectStoreServerKMIPV1_4:            "OpaqueManagedObjectStoreServerKMIPV1_4",
	ProfileNameSuiteBMinLOS_128ClientKMIPV1_4:                    "SuiteBMinLOS_128ClientKMIPV1_4",
	ProfileNameSuiteBMinLOS_128ServerKMIPV1_4:                    "SuiteBMinLOS_128ServerKMIPV1_4",
	ProfileNameSuiteBMinLOS_192ClientKMIPV1_4:                    "SuiteBMinLOS_192ClientKMIPV1_4",
	ProfileNameSuiteBMinLOS_192ServerKMIPV1_4:                    "SuiteBMinLOS_192ServerKMIPV1_4",
	ProfileNameStorageArrayWithSelfEncryptingDriveClientKMIPV1_4: "StorageArrayWithSelfEncryptingDriveClientKMIPV1_4",
	ProfileNameStorageArrayWithSelfEncryptingDriveServerKMIPV1_4: "StorageArrayWithSelfEncryptingDriveServerKMIPV1_4",
	ProfileNameHTTPSClientKMIPV1_4:                               "HTTPSClientKMIPV1_4",
	ProfileNameHTTPSServerKMIPV1_4:                               "HTTPSServerKMIPV1_4",
	ProfileNameJSONClientKMIPV1_4:                                "JSONClientKMIPV1_4",
	ProfileNameJSONServerKMIPV1_4:                                "JSONServerKMIPV1_4",
	ProfileNameXMLClientKMIPV1_4:                                 "XMLClientKMIPV1_4",
	ProfileNameXMLServerKMIPV1_4:                                 "XMLServerKMIPV1_4",
}

func (p ProfileName) MarshalText() (text []byte, err error) {
	return []byte(p.String()), nil
}

func init() {
	RegisterEnum(TagProfileName, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _ProfileNameNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return ProfileName(v).String()
		},
		Typed: func(v uint32) interface{} {
			return ProfileName(v)
		},
	})
}

func (p ProfileName) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(p))
	return nil
}

func RegisterProfileName(p ProfileName, name string) {
	name = NormalizeName(name)
	_ProfileNameNameToValueMap[name] = p
	_ProfileNameValueToNameMap[p] = name
}

func (p ProfileName) String() string {
	if s, ok := _ProfileNameValueToNameMap[p]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(p))
}

// Unwrap Mode Enumeration

// 9.1.3.2.43
type UnwrapMode uint32

const (
	UnwrapModeUnspecified  UnwrapMode = 0x00000001
	UnwrapModeProcessed    UnwrapMode = 0x00000002
	UnwrapModeNotProcessed UnwrapMode = 0x00000003
)

var _UnwrapModeNameToValueMap = map[string]UnwrapMode{
	"Unspecified":  UnwrapModeUnspecified,
	"Processed":    UnwrapModeProcessed,
	"NotProcessed": UnwrapModeNotProcessed,
}

var _UnwrapModeValueToNameMap = map[UnwrapMode]string{
	UnwrapModeUnspecified:  "Unspecified",
	UnwrapModeProcessed:    "Processed",
	UnwrapModeNotProcessed: "NotProcessed",
}

func (u UnwrapMode) MarshalText() (text []byte, err error) {
	return []byte(u.String()), nil
}

func init() {
	RegisterEnum(TagUnwrapMode, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _UnwrapModeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return UnwrapMode(v).String()
		},
		Typed: func(v uint32) interface{} {
			return UnwrapMode(v)
		},
	})
}

func (u UnwrapMode) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(u))
	return nil
}

func RegisterUnwrapMode(u UnwrapMode, name string) {
	name = NormalizeName(name)
	_UnwrapModeNameToValueMap[name] = u
	_UnwrapModeValueToNameMap[u] = name
}

func (u UnwrapMode) String() string {
	if s, ok := _UnwrapModeValueToNameMap[u]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(u))
}

// Destroy Action Enumeration

// 9.1.3.2.44
type DestroyAction uint32

const (
	DestroyActionUnspecified         DestroyAction = 0x00000001
	DestroyActionKeyMaterialDeleted  DestroyAction = 0x00000002
	DestroyActionKeyMaterialShredded DestroyAction = 0x00000003
	DestroyActionMetaDataDeleted     DestroyAction = 0x00000004
	DestroyActionMetaDataShredded    DestroyAction = 0x00000005
	DestroyActionDeleted             DestroyAction = 0x00000006
	DestroyActionShredded            DestroyAction = 0x00000007
)

var _DestroyActionNameToValueMap = map[string]DestroyAction{
	"Unspecified":         DestroyActionUnspecified,
	"KeyMaterialDeleted":  DestroyActionKeyMaterialDeleted,
	"KeyMaterialShredded": DestroyActionKeyMaterialShredded,
	"MetaDataDeleted":     DestroyActionMetaDataDeleted,
	"MetaDataShredded":    DestroyActionMetaDataShredded,
	"Deleted":             DestroyActionDeleted,
	"Shredded":            DestroyActionShredded,
}

var _DestroyActionValueToNameMap = map[DestroyAction]string{
	DestroyActionUnspecified:         "Unspecified",
	DestroyActionKeyMaterialDeleted:  "KeyMaterialDeleted",
	DestroyActionKeyMaterialShredded: "KeyMaterialShredded",
	DestroyActionMetaDataDeleted:     "MetaDataDeleted",
	DestroyActionMetaDataShredded:    "MetaDataShredded",
	DestroyActionDeleted:             "Deleted",
	DestroyActionShredded:            "Shredded",
}

func (d DestroyAction) MarshalText() (text []byte, err error) {
	return []byte(d.String()), nil
}

func init() {
	RegisterEnum(TagDestroyAction, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _DestroyActionNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return DestroyAction(v).String()
		},
		Typed: func(v uint32) interface{} {
			return DestroyAction(v)
		},
	})
}

func (d DestroyAction) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(d))
	return nil
}

func RegisterDestroyAction(d DestroyAction, name string) {
	name = NormalizeName(name)
	_DestroyActionNameToValueMap[name] = d
	_DestroyActionValueToNameMap[d] = name
}

func (d DestroyAction) String() string {
	if s, ok := _DestroyActionValueToNameMap[d]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(d))
}

// Shredding Algorithm Enumeration

// 9.1.3.2.45
type ShreddingAlgorithm uint32

const (
	ShreddingAlgorithmUnspecified   ShreddingAlgorithm = 0x00000001
	ShreddingAlgorithmCryptographic ShreddingAlgorithm = 0x00000002
	ShreddingAlgorithmUnsupported   ShreddingAlgorithm = 0x00000003
)

var _ShreddingAlgorithmNameToValueMap = map[string]ShreddingAlgorithm{
	"Unspecified":   ShreddingAlgorithmUnspecified,
	"Cryptographic": ShreddingAlgorithmCryptographic,
	"Unsupported":   ShreddingAlgorithmUnsupported,
}

var _ShreddingAlgorithmValueToNameMap = map[ShreddingAlgorithm]string{
	ShreddingAlgorithmUnspecified:   "Unspecified",
	ShreddingAlgorithmCryptographic: "Cryptographic",
	ShreddingAlgorithmUnsupported:   "Unsupported",
}

func (s ShreddingAlgorithm) MarshalText() (text []byte, err error) {
	return []byte(s.String()), nil
}

func init() {
	RegisterEnum(TagShreddingAlgorithm, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _ShreddingAlgorithmNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return ShreddingAlgorithm(v).String()
		},
		Typed: func(v uint32) interface{} {
			return ShreddingAlgorithm(v)
		},
	})
}

func (s ShreddingAlgorithm) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(s))
	return nil
}

func RegisterShreddingAlgorithm(s ShreddingAlgorithm, name string) {
	name = NormalizeName(name)
	_ShreddingAlgorithmNameToValueMap[name] = s
	_ShreddingAlgorithmValueToNameMap[s] = name
}

func (s ShreddingAlgorithm) String() string {
	if s, ok := _ShreddingAlgorithmValueToNameMap[s]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(s))
}

// RNG Mode Enumeration

// 9.1.3.2.46
type RNGMode uint32

const (
	RNGModeUnspecified            RNGMode = 0x00000001
	RNGModeSharedInstantiation    RNGMode = 0x00000002
	RNGModeNonSharedInstantiation RNGMode = 0x00000003
)

var _RNGModeNameToValueMap = map[string]RNGMode{
	"Unspecified":            RNGModeUnspecified,
	"SharedInstantiation":    RNGModeSharedInstantiation,
	"NonSharedInstantiation": RNGModeNonSharedInstantiation,
}

var _RNGModeValueToNameMap = map[RNGMode]string{
	RNGModeUnspecified:            "Unspecified",
	RNGModeSharedInstantiation:    "SharedInstantiation",
	RNGModeNonSharedInstantiation: "NonSharedInstantiation",
}

func (r RNGMode) MarshalText() (text []byte, err error) {
	return []byte(r.String()), nil
}

func init() {
	RegisterEnum(TagRNGMode, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _RNGModeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return RNGMode(v).String()
		},
		Typed: func(v uint32) interface{} {
			return RNGMode(v)
		},
	})
}

func (r RNGMode) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(r))
	return nil
}

func RegisterRNGMode(r RNGMode, name string) {
	name = NormalizeName(name)
	_RNGModeNameToValueMap[name] = r
	_RNGModeValueToNameMap[r] = name
}

func (r RNGMode) String() string {
	if s, ok := _RNGModeValueToNameMap[r]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(r))
}

// Client Registration Method Enumeration

// 9.1.3.2.47
type ClientRegistrationMethod uint32

const (
	ClientRegistrationMethodUnspecified        ClientRegistrationMethod = 0x00000001
	ClientRegistrationMethodServerPreGenerated ClientRegistrationMethod = 0x00000002
	ClientRegistrationMethodServerOnDemand     ClientRegistrationMethod = 0x00000003
	ClientRegistrationMethodClientGenerated    ClientRegistrationMethod = 0x00000004
	ClientRegistrationMethodClientRegistered   ClientRegistrationMethod = 0x00000005
)

var _ClientRegistrationMethodNameToValueMap = map[string]ClientRegistrationMethod{
	"Unspecified":        ClientRegistrationMethodUnspecified,
	"ServerPreGenerated": ClientRegistrationMethodServerPreGenerated,
	"ServerOnDemand":     ClientRegistrationMethodServerOnDemand,
	"ClientGenerated":    ClientRegistrationMethodClientGenerated,
	"ClientRegistered":   ClientRegistrationMethodClientRegistered,
}

var _ClientRegistrationMethodValueToNameMap = map[ClientRegistrationMethod]string{
	ClientRegistrationMethodUnspecified:        "Unspecified",
	ClientRegistrationMethodServerPreGenerated: "ServerPreGenerated",
	ClientRegistrationMethodServerOnDemand:     "ServerOnDemand",
	ClientRegistrationMethodClientGenerated:    "ClientGenerated",
	ClientRegistrationMethodClientRegistered:   "ClientRegistered",
}

func (c ClientRegistrationMethod) MarshalText() (text []byte, err error) {
	return []byte(c.String()), nil
}

func init() {
	RegisterEnum(TagClientRegistrationMethod, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _ClientRegistrationMethodNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return ClientRegistrationMethod(v).String()
		},
		Typed: func(v uint32) interface{} {
			return ClientRegistrationMethod(v)
		},
	})
}

func (c ClientRegistrationMethod) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(c))
	return nil
}

func RegisterClientRegistrationMethod(c ClientRegistrationMethod, name string) {
	name = NormalizeName(name)
	_ClientRegistrationMethodNameToValueMap[name] = c
	_ClientRegistrationMethodValueToNameMap[c] = name
}

func (c ClientRegistrationMethod) String() string {
	if s, ok := _ClientRegistrationMethodValueToNameMap[c]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(c))
}

// Key Wrap Type Enumeration

// 9.1.3.2.48
type KeyWrapType uint32

const (
	KeyWrapTypeNotWrapped   KeyWrapType = 0x00000001
	KeyWrapTypeAsRegistered KeyWrapType = 0x00000002
)

var _KeyWrapTypeNameToValueMap = map[string]KeyWrapType{
	"NotWrapped":   KeyWrapTypeNotWrapped,
	"AsRegistered": KeyWrapTypeAsRegistered,
}

var _KeyWrapTypeValueToNameMap = map[KeyWrapType]string{
	KeyWrapTypeNotWrapped:   "NotWrapped",
	KeyWrapTypeAsRegistered: "AsRegistered",
}

func (k KeyWrapType) MarshalText() (text []byte, err error) {
	return []byte(k.String()), nil
}

func init() {
	RegisterEnum(TagKeyWrapType, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _KeyWrapTypeNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return KeyWrapType(v).String()
		},
		Typed: func(v uint32) interface{} {
			return KeyWrapType(v)
		},
	})
}

func (k KeyWrapType) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(k))
	return nil
}

func RegisterKeyWrapType(k KeyWrapType, name string) {
	name = NormalizeName(name)
	_KeyWrapTypeNameToValueMap[name] = k
	_KeyWrapTypeValueToNameMap[k] = name
}

func (k KeyWrapType) String() string {
	if s, ok := _KeyWrapTypeValueToNameMap[k]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(k))
}

// Mask Generator Enumeration

// 9.1.3.2.49
type MaskGenerator uint32

const (
	MaskGeneratorMGF1 MaskGenerator = 0x00000001
)

var _MaskGeneratorNameToValueMap = map[string]MaskGenerator{
	"MGF1": MaskGeneratorMGF1,
}

var _MaskGeneratorValueToNameMap = map[MaskGenerator]string{
	MaskGeneratorMGF1: "MGF1",
}

func (m MaskGenerator) MarshalText() (text []byte, err error) {
	return []byte(m.String()), nil
}

func init() {
	RegisterEnum(TagMaskGenerator, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _MaskGeneratorNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return MaskGenerator(v).String()
		},
		Typed: func(v uint32) interface{} {
			return MaskGenerator(v)
		},
	})
}

func (m MaskGenerator) MarshalTTLV(enc *Encoder, tag Tag) error {
	enc.EncodeEnumeration(tag, uint32(m))
	return nil
}

func RegisterMaskGenerator(m MaskGenerator, name string) {
	name = NormalizeName(name)
	_MaskGeneratorNameToValueMap[name] = m
	_MaskGeneratorValueToNameMap[m] = name
}

func (m MaskGenerator) String() string {
	if s, ok := _MaskGeneratorValueToNameMap[m]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", uint32(m))
}

// Cryptographic Usage Mask Bit Mask

// 9.1.3.3.1
type CryptographicUsageMask uint32

const (
	CryptographicUsageMaskSign               CryptographicUsageMask = 0x00000001
	CryptographicUsageMaskVerify             CryptographicUsageMask = 0x00000002
	CryptographicUsageMaskEncrypt            CryptographicUsageMask = 0x00000004
	CryptographicUsageMaskDecrypt            CryptographicUsageMask = 0x00000008
	CryptographicUsageMaskWrapKey            CryptographicUsageMask = 0x00000010
	CryptographicUsageMaskUnwrapKey          CryptographicUsageMask = 0x00000020
	CryptographicUsageMaskExport             CryptographicUsageMask = 0x00000040
	CryptographicUsageMaskMACGenerate        CryptographicUsageMask = 0x00000080
	CryptographicUsageMaskMACVerify          CryptographicUsageMask = 0x00000100
	CryptographicUsageMaskDeriveKey          CryptographicUsageMask = 0x00000200
	CryptographicUsageMaskContentCommitment  CryptographicUsageMask = 0x00000400
	CryptographicUsageMaskKeyAgreement       CryptographicUsageMask = 0x00000800
	CryptographicUsageMaskCertificateSign    CryptographicUsageMask = 0x00001000
	CryptographicUsageMaskCRLSign            CryptographicUsageMask = 0x00002000
	CryptographicUsageMaskGenerateCryptogram CryptographicUsageMask = 0x00004000
	CryptographicUsageMaskValidateCryptogram CryptographicUsageMask = 0x00008000
	CryptographicUsageMaskTranslateEncrypt   CryptographicUsageMask = 0x00010000
	CryptographicUsageMaskTranslateDecrypt   CryptographicUsageMask = 0x00020000
	CryptographicUsageMaskTranslateWrap      CryptographicUsageMask = 0x00040000
	CryptographicUsageMaskTranslateUnwrap    CryptographicUsageMask = 0x00080000
)

var _CryptographicUsageMaskNameToValueMap = map[string]CryptographicUsageMask{
	"Sign":               CryptographicUsageMaskSign,
	"Verify":             CryptographicUsageMaskVerify,
	"Encrypt":            CryptographicUsageMaskEncrypt,
	"Decrypt":            CryptographicUsageMaskDecrypt,
	"WrapKey":            CryptographicUsageMaskWrapKey,
	"UnwrapKey":          CryptographicUsageMaskUnwrapKey,
	"Export":             CryptographicUsageMaskExport,
	"MACGenerate":        CryptographicUsageMaskMACGenerate,
	"MACVerify":          CryptographicUsageMaskMACVerify,
	"DeriveKey":          CryptographicUsageMaskDeriveKey,
	"ContentCommitment":  CryptographicUsageMaskContentCommitment,
	"KeyAgreement":       CryptographicUsageMaskKeyAgreement,
	"CertificateSign":    CryptographicUsageMaskCertificateSign,
	"CRLSign":            CryptographicUsageMaskCRLSign,
	"GenerateCryptogram": CryptographicUsageMaskGenerateCryptogram,
	"ValidateCryptogram": CryptographicUsageMaskValidateCryptogram,
	"TranslateEncrypt":   CryptographicUsageMaskTranslateEncrypt,
	"TranslateDecrypt":   CryptographicUsageMaskTranslateDecrypt,
	"TranslateWrap":      CryptographicUsageMaskTranslateWrap,
	"TranslateUnwrap":    CryptographicUsageMaskTranslateUnwrap,
}

var _CryptographicUsageMaskValueToNameMap = map[CryptographicUsageMask]string{
	CryptographicUsageMaskSign:               "Sign",
	CryptographicUsageMaskVerify:             "Verify",
	CryptographicUsageMaskEncrypt:            "Encrypt",
	CryptographicUsageMaskDecrypt:            "Decrypt",
	CryptographicUsageMaskWrapKey:            "WrapKey",
	CryptographicUsageMaskUnwrapKey:          "UnwrapKey",
	CryptographicUsageMaskExport:             "Export",
	CryptographicUsageMaskMACGenerate:        "MACGenerate",
	CryptographicUsageMaskMACVerify:          "MACVerify",
	CryptographicUsageMaskDeriveKey:          "DeriveKey",
	CryptographicUsageMaskContentCommitment:  "ContentCommitment",
	CryptographicUsageMaskKeyAgreement:       "KeyAgreement",
	CryptographicUsageMaskCertificateSign:    "CertificateSign",
	CryptographicUsageMaskCRLSign:            "CRLSign",
	CryptographicUsageMaskGenerateCryptogram: "GenerateCryptogram",
	CryptographicUsageMaskValidateCryptogram: "ValidateCryptogram",
	CryptographicUsageMaskTranslateEncrypt:   "TranslateEncrypt",
	CryptographicUsageMaskTranslateDecrypt:   "TranslateDecrypt",
	CryptographicUsageMaskTranslateWrap:      "TranslateWrap",
	CryptographicUsageMaskTranslateUnwrap:    "TranslateUnwrap",
}

func (c CryptographicUsageMask) MarshalText() (text []byte, err error) {
	return []byte(c.String()), nil
}

func init() {
	RegisterBitMask(TagCryptographicUsageMask, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _CryptographicUsageMaskNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return CryptographicUsageMask(v).String()
		},
		Typed: func(v uint32) interface{} {
			return CryptographicUsageMask(v)
		},
	})
}

func RegisterCryptographicUsageMask(c CryptographicUsageMask, name string) {
	name = NormalizeName(name)
	_CryptographicUsageMaskNameToValueMap[name] = c
	_CryptographicUsageMaskValueToNameMap[c] = name
	_CryptographicUsageMaskSortedValues = append(_CryptographicUsageMaskSortedValues, int(c))
	sort.Ints(_CryptographicUsageMaskSortedValues)
}

var _CryptographicUsageMaskSortedValues []int

func init() {
	for c := range _CryptographicUsageMaskValueToNameMap {
		_CryptographicUsageMaskSortedValues = append(_CryptographicUsageMaskSortedValues, int(c))
		sort.Ints(_CryptographicUsageMaskSortedValues)
	}
}

func (c CryptographicUsageMask) String() string {
	r := int(c)

	var sb strings.Builder
	var appending bool
	for _, v := range _CryptographicUsageMaskSortedValues {
		if v&r == v {
			if name := _CryptographicUsageMaskValueToNameMap[CryptographicUsageMask(v)]; name != "" {
				if appending {
					sb.WriteString("|")
				} else {
					appending = true
				}
				sb.WriteString(name)
				r ^= v
			}

		}
		if r == 0 {
			break
		}
	}
	if r != 0 {
		if appending {
			sb.WriteString("|")
		}
		fmt.Fprintf(&sb, "%#08x", uint32(r))
	}
	return sb.String()
}

// Storage Status Mask Bit Mask

// 9.1.3.3.2
type StorageStatusMask uint32

const (
	StorageStatusMaskOnLineStorage   StorageStatusMask = 0x00000001
	StorageStatusMaskArchivalStorage StorageStatusMask = 0x00000002
)

var _StorageStatusMaskNameToValueMap = map[string]StorageStatusMask{
	"OnLineStorage":   StorageStatusMaskOnLineStorage,
	"ArchivalStorage": StorageStatusMaskArchivalStorage,
}

var _StorageStatusMaskValueToNameMap = map[StorageStatusMask]string{
	StorageStatusMaskOnLineStorage:   "OnLineStorage",
	StorageStatusMaskArchivalStorage: "ArchivalStorage",
}

func (s StorageStatusMask) MarshalText() (text []byte, err error) {
	return []byte(s.String()), nil
}

func init() {
	RegisterBitMask(TagStorageStatusMask, EnumTypeDef{
		Parse: func(s string) (uint32, bool) {
			v, ok := _StorageStatusMaskNameToValueMap[s]
			return uint32(v), ok
		},
		String: func(v uint32) string {
			return StorageStatusMask(v).String()
		},
		Typed: func(v uint32) interface{} {
			return StorageStatusMask(v)
		},
	})
}

func RegisterStorageStatusMask(s StorageStatusMask, name string) {
	name = NormalizeName(name)
	_StorageStatusMaskNameToValueMap[name] = s
	_StorageStatusMaskValueToNameMap[s] = name
	_StorageStatusMaskSortedValues = append(_StorageStatusMaskSortedValues, int(s))
	sort.Ints(_StorageStatusMaskSortedValues)
}

var _StorageStatusMaskSortedValues []int

func init() {
	for s := range _StorageStatusMaskValueToNameMap {
		_StorageStatusMaskSortedValues = append(_StorageStatusMaskSortedValues, int(s))
		sort.Ints(_StorageStatusMaskSortedValues)
	}
}

func (s StorageStatusMask) String() string {
	r := int(s)

	var sb strings.Builder
	var appending bool
	for _, v := range _StorageStatusMaskSortedValues {
		if v&r == v {
			if name := _StorageStatusMaskValueToNameMap[StorageStatusMask(v)]; name != "" {
				if appending {
					sb.WriteString("|")
				} else {
					appending = true
				}
				sb.WriteString(name)
				r ^= v
			}

		}
		if r == 0 {
			break
		}
	}
	if r != 0 {
		if appending {
			sb.WriteString("|")
		}
		fmt.Fprintf(&sb, "%#08x", uint32(r))
	}
	return sb.String()
}

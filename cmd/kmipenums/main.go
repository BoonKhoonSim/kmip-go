package main

import (
	"bytes"
		"go/format"
	"log"
	"text/template"
	"strings"
	"os"
	"fmt"
	"path/filepath"
	"gitlab.protectv.local/regan/kmip.git"
)

type EnumDef struct {
	Comment string
	Name   string
	Type   string
	Values map[string]uint32
	SpecialRanges map[string]string
}

func main() {
	fp, err := filepath.Abs("enum_" + strings.ToLower(CredentialType.Name)+ ".go")
	if err != nil {
		panic(err)
	}

	fmt.Println("writing to", fp)

	f, err := os.Create(fp)
	if err != nil {
		panic(err)
	}
	defer f.Close()

	s := gen(CredentialType)
	f.WriteString(s)

	fmt.Println("wrote to " + f.Name())

	fptags, err := filepath.Abs("enum_tag.go")
	if err != nil {
		panic(err)
	}

	fmt.Println("writing to", fptags)

	ftags, err := os.Create(fptags)
	if err != nil {
		panic(err)
	}

	defer ftags.Close()

	s = genTag(Tags)
	ftags.WriteString(s)

	fmt.Println("wrote to " + ftags.Name())
}

func gen(d EnumDef) string {
	buf := bytes.NewBuffer(nil)

	tmpl, err := template.New("boilerplate").Parse(enumTmpl)
	if err != nil {
		panic(err)
	}

	input := struct {
		EnumDef
		Var  string
		Cmd string
	}{
		EnumDef: d,
		Var:     strings.ToLower(string([]rune(d.Name)[:1])),
		Cmd:     strings.Join(os.Args[1:], " "),
	}

	// normalize all the value names
	newValues := make(map[string]uint32, len(d.Values))
	for key, value := range d.Values {
		newValues[kmip.NormalizeName(key)] = value
	}
	input.EnumDef.Values = newValues

	err = tmpl.Execute(buf, input)

	if err != nil {
		panic(err)
	}

	//fmt.Fprintf(buf, stringerMeth, d.name)

	// format returns the gofmt-ed contents of the Generator's buffer.

	src, err := format.Source(buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return buf.String()
	}
	return string(src)
}

func genTag(d map[string]uint32) string {
	buf := bytes.NewBuffer(nil)

	tmpl, err := template.New("boilerplate").Parse(tagTmpl)
	if err != nil {
		panic(err)
	}

	input := make(map[string]uint32, len(d))

	// normalize all the value names
	for key, value := range d {
		input[kmip.NormalizeName(key)] = value
	}

	inputs := struct {
		Values map[string]uint32
		Cmd string
	}{
		Values:input,
		Cmd:     strings.Join(os.Args[1:], " "),
	}


	err = tmpl.Execute(buf, inputs)

	if err != nil {
		panic(err)
	}

	//fmt.Fprintf(buf, stringerMeth, d.name)

	// format returns the gofmt-ed contents of the Generator's buffer.

	src, err := format.Source(buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return buf.String()
	}
	return string(src)
}

const tagTmpl = `// Code generated by "kmipenums {{.Cmd}}"; DO NOT EDIT.

package kmip

import (
	"fmt"
	"strings"
	"encoding/binary"
	"encoding/hex"
	"github.com/ansel1/merry"
)

// Tag
// 9.1.3.1
type Tag uint32

const ({{range $key, $val := .Values}}
	Tag{{$key}} Tag = {{$val | printf "%#06x"}}{{end}}
)

var _TagNameToValueMap = map[string]Tag { {{range $key, $val := .Values}}
	"{{$key}}": Tag{{$key}},{{end}}
}

var _TagValueToNameMap = map[Tag]string { {{range $key, $val := .Values}}
	Tag{{$key}}: "{{$key}}",{{end}}
}

func (t Tag) String() string {
	if s, ok := _TagValueToNameMap[t]; ok {
		return s
	}
	return fmt.Sprintf("%#06x", uint32(t))
}

func ParseTag(s string) (Tag, error) {
	if strings.HasPrefix(s, "0x") {
		b, err := hex.DecodeString(s[2:])
		if err != nil {
			return TagNone, merry.Prepend(err, "invalid hex string, should be 0x[a-fA-F0-9][a-fA-F0-9]")
		}
		switch len(b) {
		case 3:
			b = append([]byte{0}, b...)
		case 4:
		default:
			return TagNone, merry.Errorf("invalid byte length for tag, should be 3 bytes: %s", s)
		}
		
		return Tag(binary.BigEndian.Uint32(b)), nil
	}
	if v, ok := _TagNameToValueMap[s]; ok {
		return v, nil
	} else {
		return TagNone, merry.Here(ErrTagNotRegistered).Append(s)
	}
}

func (t Tag) MarshalText() (text []byte, err error) {
	return []byte(t.String()), nil
}

func (t *Tag) UnmarshalText(text []byte) (err error) {
	*t, err = ParseTag(string(text))
	return
}
`

const enumTmpl = `// Code generated by "kmipenums {{.Cmd}}"; DO NOT EDIT.
{{ $enumType := .Name }}
package kmip

import (
	"fmt"
	"strings"
	"encoding/binary"
	"encoding/hex"
)

// {{.Name}}
// {{.Comment}}
type {{.Name}} uint32

const ({{range $key, $val := .Values}}
	{{$enumType}}{{$key}} {{$enumType}} = {{$val | printf "%#08x"}}{{end}}
)

var _{{.Name}}NameToValueMap = map[string]{{.Name}} { {{range $key, $val := .Values}}
	"{{$key}}": {{$enumType}}{{$key}},{{end}}
}

var _{{.Name}}ValueToNameMap = map[{{.Name}}]string { {{range $key, $val := .Values}}
	{{$enumType}}{{$key}}: "{{$key}}",{{end}}
}

func ({{.Var}} {{.Name}}) String() string {
	if s, ok := _{{.Name}}ValueToNameMap[{{.Var}}]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", {{.Var}})
}

func Parse{{.Name}}(s string) ({{.Name}}, error) {
	if strings.HasPrefix(s, "0x") && len(s) == 10 {
		b, err := hex.DecodeString(s[2:])
		if err != nil {
			return 0, err
		}
		return {{.Name}}(binary.BigEndian.Uint32(b)), nil
	}
	if v, ok := _{{.Name}}NameToValueMap[s]; ok {
		return v, nil
	} else {
		var v {{.Name}}
		return v, fmt.Errorf("%s is not a valid {{.Name}}", s)
	}
}

func ({{.Var}} {{.Name}}) MarshalText() (text []byte, err error) {
	return []byte({{.Var}}.String()), nil
}

func ({{.Var}} *{{.Name}}) UnmarshalText(text []byte) (err error) {
	*{{.Var}}, err = Parse{{.Name}}(string(text))
	return
}

func ({{.Var}} {{.Name}}) EnumValue() uint32 {
	return uint32({{.Var}})
}`

var Tags = map[string]uint32{
	"None": 0x000000,
	"Activation Date":                          0x420001,
	"Application Data":                         0x420002,
	"Application Namespace":                    0x420003,
	"Application Specific Information":         0x420004,
	"Archive Date":                             0x420005,
	"Asynchronous Correlation Value":           0x420006,
	"Asynchronous Indicator":                   0x420007,
	"Attribute":                                0x420008,
	"Attribute Index":                          0x420009,
	"Attribute Name":                           0x42000A,
	"Attribute Value":                          0x42000B,
	"Authentication":                           0x42000C,
	"Batch Count":                              0x42000D,
	"Batch Error Continuation Option":          0x42000E,
	"Batch Item":                               0x42000F,
	"Batch Order Option":                       0x420010,
	"Block Cipher Mode":                        0x420011,
	"Cancellation Result":                      0x420012,
	"Certificate":                              0x420013,
	"Certificate Identifier":                   0x420014,
	"Certificate Issuer":                       0x420015,
	"Certificate Issuer Alternative Name":      0x420016,
	"Certificate Issuer Distinguished Name":    0x420017,
	"Certificate Request":                      0x420018,
	"Certificate Request Type":                 0x420019,
	"Certificate Subject":                      0x42001A,
	"Certificate Subject Alternative Name":     0x42001B,
	"Certificate Subject Distinguished Name":   0x42001C,
	"Certificate Type":                         0x42001D,
	"Certificate Value":                        0x42001E,
	"Common Template-Attribute":                0x42001F,
	"Compromise  Date":                         0x420020,
	"Compromise Occurrence Date":               0x420021,
	"Contact Information":                      0x420022,
	"Credential":                               0x420023,
	"Credential Type":                          0x420024,
	"Credential Value":                         0x420025,
	"Criticality Indicator":                    0x420026,
	"CRT Coefficient":                          0x420027,
	"Cryptographic Algorithm":                  0x420028,
	"Cryptographic Domain Parameters":          0x420029,
	"Cryptographic Length":                     0x42002A,
	"Cryptographic Parameters":                 0x42002B,
	"Cryptographic Usage Mask":                 0x42002C,
	"Custom Attribute":                         0x42002D,
	"D":                                        0x42002E,
	"Deactivation Date":                        0x42002F,
	"Derivation Data":                          0x420030,
	"Derivation Method":                        0x420031,
	"Derivation Parameters":                    0x420032,
	"Destroy Date":                             0x420033,
	"Digest":                                   0x420034,
	"Digest Value":                             0x420035,
	"Encryption Key Information":               0x420036,
	"G":                                        0x420037,
	"Hashing Algorithm":                        0x420038,
	"Initial Date":                             0x420039,
	"Initialization Vector":                    0x42003A,
	"Issuer":                                   0x42003B,
	"Iteration Count":                          0x42003C,
	"IV/Counter/Nonce":                         0x42003D,
	"J":                                        0x42003E,
	"Key":                                      0x42003F,
	"Key Block":                                0x420040,
	"Key Compression Type":                     0x420041,
	"Key Format Type":                          0x420042,
	"Key Material":                             0x420043,
	"Key Part Identifier":                      0x420044,
	"Key Value":                                0x420045,
	"Key Wrapping Data":                        0x420046,
	"Key Wrapping Specification":               0x420047,
	"Last Change Date":                         0x420048,
	"Lease Time":                               0x420049,
	"Link":                                     0x42004A,
	"Link Type":                                0x42004B,
	"Linked Object Identifier":                 0x42004C,
	"MAC/Signature":                            0x42004D,
	"MAC/Signature Key Information":            0x42004E,
	"Maximum Items":                            0x42004F,
	"Maximum Response Size":                    0x420050,
	"Message Extension":                        0x420051,
	"Modulus":                                  0x420052,
	"Name":                                     0x420053,
	"Name Type":                                0x420054,
	"Name Value":                               0x420055,
	"Object Group":                             0x420056,
	"Object Type":                              0x420057,
	"Offset":                                   0x420058,
	"Opaque Data Type":                         0x420059,
	"Opaque Data Value":                        0x42005A,
	"Opaque Object":                            0x42005B,
	"Operation":                                0x42005C,
	"Operation Policy Name":                    0x42005D,
	"P":                                        0x42005E,
	"Padding Method":                           0x42005F,
	"Prime Exponent P":                         0x420060,
	"Prime Exponent Q":                         0x420061,
	"Prime Field Size":                         0x420062,
	"Private Exponent":                         0x420063,
	"Private Key":                              0x420064,
	"Private Key Template-Attribute":           0x420065,
	"Private Key Unique Identifier":            0x420066,
	"Process Start Date":                       0x420067,
	"Protect Stop Date":                        0x420068,
	"Protocol Version":                         0x420069,
	"Protocol Version Major":                   0x42006A,
	"Protocol Version Minor":                   0x42006B,
	"Public Exponent":                          0x42006C,
	"Public Key":                               0x42006D,
	"Public Key Template-Attribute":            0x42006E,
	"Public Key Unique Identifier":             0x42006F,
	"Put Function":                             0x420070,
	"Q":                                        0x420071,
	"Q String":                                 0x420072,
	"Qlength":                                  0x420073,
	"Query Function":                           0x420074,
	"Recommended Curve":                        0x420075,
	"Replaced Unique Identifier":               0x420076,
	"Request Header":                           0x420077,
	"Request Message":                          0x420078,
	"Request Payload":                          0x420079,
	"Response Header":                          0x42007A,
	"Response Message":                         0x42007B,
	"Response Payload":                         0x42007C,
	"Result Message":                           0x42007D,
	"Result Reason":                            0x42007E,
	"Result Status":                            0x42007F,
	"Revocation Message":                       0x420080,
	"Revocation Reason":                        0x420081,
	"Revocation Reason Code":                   0x420082,
	"Key Role Type":                            0x420083,
	"Salt":                                     0x420084,
	"Secret Data":                              0x420085,
	"Secret Data Type":                         0x420086,
	"Serial Number":                            0x420087,
	"Server Information":                       0x420088,
	"Split Key":                                0x420089,
	"Split Key Method":                         0x42008A,
	"Split Key Parts":                          0x42008B,
	"Split Key Threshold":                      0x42008C,
	"State":                                    0x42008D,
	"Storage Status Mask":                      0x42008E,
	"Symmetric Key":                            0x42008F,
	"Template":                                 0x420090,
	"Template-Attribute":                       0x420091,
	"Time Stamp":                               0x420092,
	"Unique Batch Item ID":                     0x420093,
	"Unique Identifier":                        0x420094,
	"Usage Limits":                             0x420095,
	"Usage Limits Count":                       0x420096,
	"Usage Limits Total":                       0x420097,
	"Usage Limits Unit":                        0x420098,
	"Username":                                 0x420099,
	"Validity Date":                            0x42009A,
	"Validity Indicator":                       0x42009B,
	"Vendor Extension":                         0x42009C,
	"Vendor Identification":                    0x42009D,
	"Wrapping Method":                          0x42009E,
	"X":                                        0x42009F,
	"Y":                                        0x4200A0,
	"Password":                                 0x4200A1,
	"Device Identifier":                        0x4200A2,
	"Encoding Option":                          0x4200A3,
	"Extension Information":                    0x4200A4,
	"Extension Name":                           0x4200A5,
	"Extension Tag":                            0x4200A6,
	"Extension Type":                           0x4200A7,
	"Fresh":                                    0x4200A8,
	"Machine Identifier":                       0x4200A9,
	"Media Identifier":                         0x4200AA,
	"Network Identifier":                       0x4200AB,
	"Object Group Member":                      0x4200AC,
	"Certificate Length":                       0x4200AD,
	"Digital Signature Algorithm":              0x4200AE,
	"Certificate Serial Number":                0x4200AF,
	"Device Serial Number":                     0x4200B0,
	"Issuer Alternative Name":                  0x4200B1,
	"Issuer Distinguished Name":                0x4200B2,
	"Subject Alternative Name":                 0x4200B3,
	"Subject Distinguished Name":               0x4200B4,
	"X.509 Certificate Identifier":             0x4200B5,
	"X.509 Certificate Issuer":                 0x4200B6,
	"X.509 Certificate Subject":                0x4200B7,
	"Key Value Location":                       0x4200B8,
	"Key Value Location Value":                 0x4200B9,
	"Key Value Location Type":                  0x4200BA,
	"Key Value Present":                        0x4200BB,
	"Original Creation Date":                   0x4200BC,
	"PGP Key":                                  0x4200BD,
	"PGP Key Version":                          0x4200BE,
	"Alternative Name":                         0x4200BF,
	"Alternative Name Value":                   0x4200C0,
	"Alternative Name Type":                    0x4200C1,
	"Data":                                     0x4200C2,
	"Signature Data":                           0x4200C3,
	"Data Length":                              0x4200C4,
	"Random IV":                                0x4200C5,
	"MAC Data":                                 0x4200C6,
	"Attestation Type":                         0x4200C7,
	"Nonce":                                    0x4200C8,
	"Nonce ID":                                 0x4200C9,
	"Nonce Value":                              0x4200CA,
	"Attestation Measurement":                  0x4200CB,
	"Attestation Assertion":                    0x4200CC,
	"IV Length":                                0x4200CD,
	"Tag Length":                               0x4200CE,
	"Fixed Field Length":                       0x4200CF,
	"Counter Length":                           0x4200D0,
	"Initial Counter Value":                    0x4200D1,
	"Invocation Field Length":                  0x4200D2,
	"Attestation Capable Indicator":            0x4200D3,
	"Offset Items":                             0x4200D4,
	"Located Items":                            0x4200D5,
	"Correlation Value":                        0x4200D6,
	"Init Indicator":                           0x4200D7,
	"Final Indicator":                          0x4200D8,
	"RNG Parameters":                           0x4200D9,
	"RNG Algorithm":                            0x4200DA,
	"DRBG Algorithm":                           0x4200DB,
	"FIPS186 Variation":                        0x4200DC,
	"Prediction Resistance":                    0x4200DD,
	"Random Number Generator":                  0x4200DE,
	"Validation Information":                   0x4200DF,
	"Validation Authority Type":                0x4200E0,
	"Validation Authority Country":             0x4200E1,
	"Validation Authority URI":                 0x4200E2,
	"Validation Version Major":                 0x4200E3,
	"Validation Version Minor":                 0x4200E4,
	"Validation Type":                          0x4200E5,
	"Validation Level":                         0x4200E6,
	"Validation Certificate Identifier":        0x4200E7,
	"Validation Certificate URI":               0x4200E8,
	"Validation Vendor URI":                    0x4200E9,
	"Validation Profile":                       0x4200EA,
	"Profile Information":                      0x4200EB,
	"Profile Name":                             0x4200EC,
	"Server URI":                               0x4200ED,
	"Server Port":                              0x4200EE,
	"Streaming Capability":                     0x4200EF,
	"Asynchronous Capability":                  0x4200F0,
	"Attestation Capability":                   0x4200F1,
	"Unwrap Mode":                              0x4200F2,
	"Destroy Action":                           0x4200F3,
	"Shredding Algorithm":                      0x4200F4,
	"RNG Mode":                                 0x4200F5,
	"Client Registration Method":               0x4200F6,
	"Capability Information":                   0x4200F7,
	"Key Wrap Type":                            0x4200F8,
	"Batch Undo Capability":                    0x4200F9,
	"Batch Continue Capability":                0x4200FA,
	"PKCS#12 Friendly Name":                    0x4200FB,
	"Description":                              0x4200FC,
	"Comment":                                  0x4200FD,
	"Authenticated Encryption Additional Data": 0x4200FE,
	"Authenticated Encryption Tag":             0x4200FF,
	"Salt Length":                              0x420100,
	"Mask Generator":                           0x420101,
	"Mask Generator Hashing Algorithm":         0x420102,
	"P Source":                                 0x420103,
	"Trailer Field":                            0x420104,
	"Client Correlation Value":                 0x420105,
	"Server Correlation Value":                 0x420106,
	"Digested Data":                            0x420107,
	"Certificate Subject CN":                   0x420108,
	"Certificate Subject O":                    0x420109,
	"Certificate Subject OU":                   0x42010A,
	"Certificate Subject Email":                0x42010B,
	"Certificate Subject C":                    0x42010C,
	"Certificate Subject ST":                   0x42010D,
	"Certificate Subject L":                    0x42010E,
	"Certificate Subject UID":                  0x42010F,
	"Certificate Subject Serial Number":        0x420110,
	"Certificate Subject Title":                0x420111,
	"Certificate Subject DC":                   0x420112,
	"Certificate Subject DN Qualifier":         0x420113,
	"Certificate Issuer CN":                    0x420114,
	"Certificate Issuer O":                     0x420115,
	"Certificate Issuer OU":                    0x420116,
	"Certificate Issuer Email":                 0x420117,
	"Certificate Issuer C":                     0x420118,
	"Certificate Issuer ST":                    0x420119,
	"Certificate Issuer L":                     0x42011A,
	"Certificate Issuer UID":                   0x42011B,
	"Certificate Issuer Serial Number":         0x42011C,
	"Certificate Issuer Title":                 0x42011D,
	"Certificate Issuer DC":                    0x42011E,
	"Certificate Issuer DN Qualifier":          0x42011F,
	"Sensitive":                                0x420120,
	"Always Sensitive":                         0x420121,
	"Extractable":                              0x420122,
	"Never Extractable":                        0x420123,
	"Replace Existing":                         0x420124,
}

var CredentialType = EnumDef{
	Comment: "9.1.3.2.1 Credential Type Enumeration",
	Name: "CredentialType",
	Values: map[string]uint32{
		"Username and Password": 0x00000001,
		"Device":                0x00000002,
		"Attestation":           0x00000003,
	},
}

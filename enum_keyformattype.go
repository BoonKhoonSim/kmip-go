// Code generated by "kmipenums "; DO NOT EDIT.

package kmip

import (
	"encoding/binary"
	"encoding/hex"
	"fmt"
	"strings"
)

// Key Format Type Enumeration
// 9.1.3.2.3
type KeyFormatType uint32

const (
	KeyFormatTypeECPrivateKey               KeyFormatType = 0x00000006
	KeyFormatTypeOpaque                     KeyFormatType = 0x00000002
	KeyFormatTypePKCS_1                     KeyFormatType = 0x00000003
	KeyFormatTypePKCS_12                    KeyFormatType = 0x00000016
	KeyFormatTypePKCS_8                     KeyFormatType = 0x00000004
	KeyFormatTypeRaw                        KeyFormatType = 0x00000001
	KeyFormatTypeTransparentDHPrivateKey    KeyFormatType = 0x0000000c
	KeyFormatTypeTransparentDHPublicKey     KeyFormatType = 0x0000000d
	KeyFormatTypeTransparentDSAPrivateKey   KeyFormatType = 0x00000008
	KeyFormatTypeTransparentDSAPublicKey    KeyFormatType = 0x00000009
	KeyFormatTypeTransparentECDHPrivateKey  KeyFormatType = 0x00000010
	KeyFormatTypeTransparentECDHPublicKey   KeyFormatType = 0x00000011
	KeyFormatTypeTransparentECDSAPrivateKey KeyFormatType = 0x0000000e
	KeyFormatTypeTransparentECDSAPublicKey  KeyFormatType = 0x0000000f
	KeyFormatTypeTransparentECMQVPrivateKey KeyFormatType = 0x00000012
	KeyFormatTypeTransparentECMQVPublicKey  KeyFormatType = 0x00000013
	KeyFormatTypeTransparentECPrivateKey    KeyFormatType = 0x00000014
	KeyFormatTypeTransparentECPublicKey     KeyFormatType = 0x00000015
	KeyFormatTypeTransparentRSAPrivateKey   KeyFormatType = 0x0000000a
	KeyFormatTypeTransparentRSAPublicKey    KeyFormatType = 0x0000000b
	KeyFormatTypeTransparentSymmetricKey    KeyFormatType = 0x00000007
	KeyFormatTypeX_509                      KeyFormatType = 0x00000005
)

var _KeyFormatTypeNameToValueMap = map[string]KeyFormatType{
	"ECPrivateKey": KeyFormatTypeECPrivateKey,
	"Opaque":       KeyFormatTypeOpaque,
	"PKCS_1":       KeyFormatTypePKCS_1,
	"PKCS_12":      KeyFormatTypePKCS_12,
	"PKCS_8":       KeyFormatTypePKCS_8,
	"Raw":          KeyFormatTypeRaw,
	"TransparentDHPrivateKey":    KeyFormatTypeTransparentDHPrivateKey,
	"TransparentDHPublicKey":     KeyFormatTypeTransparentDHPublicKey,
	"TransparentDSAPrivateKey":   KeyFormatTypeTransparentDSAPrivateKey,
	"TransparentDSAPublicKey":    KeyFormatTypeTransparentDSAPublicKey,
	"TransparentECDHPrivateKey":  KeyFormatTypeTransparentECDHPrivateKey,
	"TransparentECDHPublicKey":   KeyFormatTypeTransparentECDHPublicKey,
	"TransparentECDSAPrivateKey": KeyFormatTypeTransparentECDSAPrivateKey,
	"TransparentECDSAPublicKey":  KeyFormatTypeTransparentECDSAPublicKey,
	"TransparentECMQVPrivateKey": KeyFormatTypeTransparentECMQVPrivateKey,
	"TransparentECMQVPublicKey":  KeyFormatTypeTransparentECMQVPublicKey,
	"TransparentECPrivateKey":    KeyFormatTypeTransparentECPrivateKey,
	"TransparentECPublicKey":     KeyFormatTypeTransparentECPublicKey,
	"TransparentRSAPrivateKey":   KeyFormatTypeTransparentRSAPrivateKey,
	"TransparentRSAPublicKey":    KeyFormatTypeTransparentRSAPublicKey,
	"TransparentSymmetricKey":    KeyFormatTypeTransparentSymmetricKey,
	"X_509":                      KeyFormatTypeX_509,
}

var _KeyFormatTypeValueToNameMap = map[KeyFormatType]string{
	KeyFormatTypeECPrivateKey:               "ECPrivateKey",
	KeyFormatTypeOpaque:                     "Opaque",
	KeyFormatTypePKCS_1:                     "PKCS_1",
	KeyFormatTypePKCS_12:                    "PKCS_12",
	KeyFormatTypePKCS_8:                     "PKCS_8",
	KeyFormatTypeRaw:                        "Raw",
	KeyFormatTypeTransparentDHPrivateKey:    "TransparentDHPrivateKey",
	KeyFormatTypeTransparentDHPublicKey:     "TransparentDHPublicKey",
	KeyFormatTypeTransparentDSAPrivateKey:   "TransparentDSAPrivateKey",
	KeyFormatTypeTransparentDSAPublicKey:    "TransparentDSAPublicKey",
	KeyFormatTypeTransparentECDHPrivateKey:  "TransparentECDHPrivateKey",
	KeyFormatTypeTransparentECDHPublicKey:   "TransparentECDHPublicKey",
	KeyFormatTypeTransparentECDSAPrivateKey: "TransparentECDSAPrivateKey",
	KeyFormatTypeTransparentECDSAPublicKey:  "TransparentECDSAPublicKey",
	KeyFormatTypeTransparentECMQVPrivateKey: "TransparentECMQVPrivateKey",
	KeyFormatTypeTransparentECMQVPublicKey:  "TransparentECMQVPublicKey",
	KeyFormatTypeTransparentECPrivateKey:    "TransparentECPrivateKey",
	KeyFormatTypeTransparentECPublicKey:     "TransparentECPublicKey",
	KeyFormatTypeTransparentRSAPrivateKey:   "TransparentRSAPrivateKey",
	KeyFormatTypeTransparentRSAPublicKey:    "TransparentRSAPublicKey",
	KeyFormatTypeTransparentSymmetricKey:    "TransparentSymmetricKey",
	KeyFormatTypeX_509:                      "X_509",
}

func (k KeyFormatType) String() string {
	if s, ok := _KeyFormatTypeValueToNameMap[k]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", k)
}

func ParseKeyFormatType(s string) (KeyFormatType, error) {
	if strings.HasPrefix(s, "0x") && len(s) == 10 {
		b, err := hex.DecodeString(s[2:])
		if err != nil {
			return 0, err
		}
		return KeyFormatType(binary.BigEndian.Uint32(b)), nil
	}
	if v, ok := _KeyFormatTypeNameToValueMap[s]; ok {
		return v, nil
	} else {
		var v KeyFormatType
		return v, fmt.Errorf("%s is not a valid KeyFormatType", s)
	}
}

func (k KeyFormatType) MarshalText() (text []byte, err error) {
	return []byte(k.String()), nil
}

func (k *KeyFormatType) UnmarshalText(text []byte) (err error) {
	*k, err = ParseKeyFormatType(string(text))
	return
}

func (k KeyFormatType) MarshalTTLVEnum() uint32 {
	return uint32(k)
}

// Code generated by "kmipenums "; DO NOT EDIT.

package kmip

import (
	"encoding/binary"
	"encoding/hex"
	"fmt"
	"strings"
)

// Key Compression Type Enumeration
// 9.1.3.2.2
type KeyCompressionType uint32

const (
	KeyCompressionTypeECPublicKeyTypeUncompressed         KeyCompressionType = 0x00000001
	KeyCompressionTypeECPublicKeyTypeX9_62CompressedChar2 KeyCompressionType = 0x00000003
	KeyCompressionTypeECPublicKeyTypeX9_62CompressedPrime KeyCompressionType = 0x00000002
	KeyCompressionTypeECPublicKeyTypeX9_62Hybrid          KeyCompressionType = 0x00000004
)

var _KeyCompressionTypeNameToValueMap = map[string]KeyCompressionType{
	"ECPublicKeyTypeUncompressed":         KeyCompressionTypeECPublicKeyTypeUncompressed,
	"ECPublicKeyTypeX9_62CompressedChar2": KeyCompressionTypeECPublicKeyTypeX9_62CompressedChar2,
	"ECPublicKeyTypeX9_62CompressedPrime": KeyCompressionTypeECPublicKeyTypeX9_62CompressedPrime,
	"ECPublicKeyTypeX9_62Hybrid":          KeyCompressionTypeECPublicKeyTypeX9_62Hybrid,
}

var _KeyCompressionTypeValueToNameMap = map[KeyCompressionType]string{
	KeyCompressionTypeECPublicKeyTypeUncompressed:         "ECPublicKeyTypeUncompressed",
	KeyCompressionTypeECPublicKeyTypeX9_62CompressedChar2: "ECPublicKeyTypeX9_62CompressedChar2",
	KeyCompressionTypeECPublicKeyTypeX9_62CompressedPrime: "ECPublicKeyTypeX9_62CompressedPrime",
	KeyCompressionTypeECPublicKeyTypeX9_62Hybrid:          "ECPublicKeyTypeX9_62Hybrid",
}

func (k KeyCompressionType) String() string {
	if s, ok := _KeyCompressionTypeValueToNameMap[k]; ok {
		return s
	}
	return fmt.Sprintf("%#08x", k)
}

func ParseKeyCompressionType(s string) (KeyCompressionType, error) {
	if strings.HasPrefix(s, "0x") && len(s) == 10 {
		b, err := hex.DecodeString(s[2:])
		if err != nil {
			return 0, err
		}
		return KeyCompressionType(binary.BigEndian.Uint32(b)), nil
	}
	if v, ok := _KeyCompressionTypeNameToValueMap[s]; ok {
		return v, nil
	} else {
		var v KeyCompressionType
		return v, fmt.Errorf("%s is not a valid KeyCompressionType", s)
	}
}

func (k KeyCompressionType) MarshalText() (text []byte, err error) {
	return []byte(k.String()), nil
}

func (k *KeyCompressionType) UnmarshalText(text []byte) (err error) {
	*k, err = ParseKeyCompressionType(string(text))
	return
}

func (k KeyCompressionType) MarshalTTLVEnum() uint32 {
	return uint32(k)
}
